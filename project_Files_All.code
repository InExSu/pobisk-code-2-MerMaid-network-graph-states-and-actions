<?php

declare(strict_types=1);

$File_Name = '../Bitrix24-entity-operations/webHookURL.txt';
if (!defined('WEB_HOOK')) define('WEB_HOOK', file_get_contents($File_Name));

require_once __DIR__ . '/lib_Php.php';

/**
 * быстрая выгрузка двойными Batch
 */
function batch_Fast_InExSu_Double(string $hook,
                                  string $method,
                                  array  $select_fields,
                                  array  $filter = []): array
{
    // https://dev.1c-bitrix.ru/support/forum/messages/forum48/topic140616/message684232/?result=vote4user#message684232
    // если сущностей более 125 000, нужно увеличить уровень вложенности.

    //----------запрос общего количества-----------
    $total = query_Total($hook, $method);
    if (!is_numeric($total)) {
        error_EMail(__FUNCTION__, '!is_numeric($total)');
        return [];
    }

//----------расчеты количества-----------
    $pack_limit = 50;
    $pack_limit_prev = $pack_limit - 1;
    $requests_value = ceil($total / $pack_limit);          //количество запросов
    $batch_value = ceil($requests_value / $pack_limit); //количество батчей
    $counter = $requests_value;
    $batch_levels = batch_Levels($counter, $pack_limit);

//----------формируем запросы в батчи-----------
    $batches = batches_While(1,
        $batch_value,
        $requests_value,
        $pack_limit,
        $method,
        $filter,
        0,
        $select_fields,
        $pack_limit_prev,
        []);


//---------основной запрос---------
    if ($method === 'tasks.task.list') {
        $result = batches_curlExec($hook, $batches);
    } elseif ($method === 'department.get') {
        require_once __DIR__ . '/lib_Bitrix24.php';
        $result = list_Jet($hook, $method);
    } else {
        //----------формируем вложенные батчи-----------
        $extra_batch = batches_Nested($batch_levels, $batches, $pack_limit);
        $result0 = curlExec($hook, $extra_batch);
        $result = json_decode($result0, true);
    }
    /*
     * Ошибка может выглядеть так
      array (
      'error' => 'INTERNAL_SERVER_ERROR',
      'error_description' => 'Internal server error')
     */
    $result = $result['result']['result'] ?? $result;

//---------собираем ответ в общий массив---------
    if ($method === 'department.get') {
        $all = $result;
    } else {
        $all = keys_Like_Methods($result, $method);
    }
    // когда задействуется пользовательский фильтр, дубликаты будут
    $unique = duplicates_Remove($all);
    if (empty($filter)) {
        if (count($unique) < $total) {
            error_EMail(__FUNCTION__, 'count($unique) < $total');
            exit();
        }
    }
    return $unique;
}

/**
 * Получение записей одноуровневым batch, для методов, типа 'tasks.task.list',
 * которые не отдают многоуровневым batch
 * @param array $batches
 * @param string $hook
 * @return array
 */
function batches_curlExec(string $hook, array $batches): array
{
    $filter = filter_From($batches[0]['cmd']['list1'] ?? '');

    $return = [];

    foreach ($batches as $batch) {
        if (!is_numeric($filter)) {
            error_EMail(__FUNCTION__, '!is_numeric($filter)');
            exit();
        }

        $filter = (int)$filter;

        $batch['cmd']['list1'] = filter_Start($batch['cmd']['list1'], $filter);
        $result = curlExec($hook, $batch);
        $result = json_decode($result, true);
        // придумай обработку ошибок и operating
        if (!empty($result['result']['result_error'])) {
            error_EMail(__FUNCTION__, 'Есть ошибки: ' . implode_If("\n", $result['result']['result_error']));
        }
        $return = array_merge_recursive($return, $result['result']['result'] ?? []);

        $end = end($return);
        if (isset($end['tasks'])) {
            $end = end($end['tasks']);
            $filter = $end['id'] ?? '';
        } elseif (isset($end['ID'])) {
            $filter = $end['ID'];
        }
        if (!is_numeric($filter)) {
            error_EMail(__FUNCTION__, 'Не вернули номер последней записи');
            break;
        }
    }

    if (php_sapi_name() === 'cli')
        array_2_File($return, __FUNCTION__);

    return $return;
}

/**
 * вернуть значение для filter
 */
function filter_From(string $haystack)
{
    $return = false;

    $needle = 'filter%5B%3EID%5D=';

    if (strpos($haystack, $needle) !== false) {
        if (strpos($haystack, '&select') !== false) {
            $return = string_Between($haystack,
                $needle,
                '&select');
        } elseif (strpos($haystack, '&start') !== false) {
            $return = string_Between($haystack,
                $needle,
                '&start');
        }
    }

    return (is_numeric($return)) ? $return : false;
}

/**
 * вернуть подстроку, справа от $from
 * @param string $from 'filter%5B%3EID%5D='
 * @param string $haystack 'qwefilter%5B%3EID%5D=0'
 * @return string '0', если не найдено, то ''
 */
function string_Right_From(string $haystack, string $from): string
{
    // Ищем позицию начала подстроки $from в строке $haystack

    $return = '';

    $fromPos = strpos($haystack, $from);

    if ($fromPos !== false) {
        // Возвращаемая подстрока - все символы, находящиеся справа от $from
        $return = substr($haystack, $fromPos + strlen($from));
    }
    return $return;
}

/**
 * заменяет в строке между 'filter%5B%3EID%5D=' и '&select' число на $filter
 * @param int $filter 50
 * @param string $batch 'filter%5B%3EID%5D=0&select%5B0%5D=ID&select%5B1%5D=TITLE&select'
 * @return string 'filter%5B%3EID%5D=50&select%5B0%5D=ID&select%5B1%5D=TITLE&select'
 */
function filter_Start(string $batch, int $filter): string
{
    $start = 'filter%5B%3EID%5D=';

    $end = string_From_Two($batch, ['&select', '&start']);

    $start_pos = strpos($batch, $start);

    if ($start_pos !== false) {
        $start_pos += strlen($start);

        $end_pos = strpos($batch, $end, $start_pos);

        $length = $end_pos - $start_pos;

        if ($length < 1) {
            error_EMail(__FUNCTION__, '$length < 1');
            exit();
        }

        if ($end_pos !== false) {
            $return = substr_replace($batch,
                (string)$filter,
                $start_pos,
                $length);
        }
    }
    return $return ?? $batch;
}

/**
 * Какая из $needles есть в $haystack
 */
function string_From_Two(string $haystack, array $needles): string
{
    $return = '';
    foreach ($needles as $needle) {
        if (strpos($haystack, $needle) !== false) {
            $return = $needle;
            break;
        }
    }
    if ($return === '') {
        error_EMail(__FUNCTION__, '$return === \'\'');
        exit();
    }
    return $return;
}

/**
 * извлечь между
 *
 * @param string $start 'quick '
 * @param string $end ' fox'
 * @param string $string 'quick brown fox jumps'
 * @return string 'brown'
 */
function string_Between(string $string, string $start, string $end): string
{
    $start_pos = strpos($string, $start);
    if ($start_pos !== false) {
        $start_pos += strlen($start);
        $end_pos = strpos($string, $end, $start_pos);
        if ($end_pos !== false) {
            $result = substr($string, $start_pos, $end_pos - $start_pos);
        }
    }
    return $result ?? '';
}

function keys_Like_Methods(array  $result,
                           string $method): array
{
    $return = [];

    $needle = ($method == 'tasks.task.list') ? 'tasks' : 'list';

    // улучши
    keys_Like($result, $needle, $return);

    return $return;
}

/**
 * @param array $extra_batch
 * @param string $hook
 * @return bool|string
 */
function curlExec(string $hook, array $extra_batch)
{
    $run = microtime(true);
    echo __FUNCTION__ . PHP_EOL;

    $queryUrl = $hook . 'batch';
    $queryData = http_build_query($extra_batch);

    static $curl;
    if (empty($curl)) {
        $curl = curl_init();
    }
    curl_setopt_array($curl,
        [
            CURLOPT_SSL_VERIFYPEER => 0,
            CURLOPT_POST => 1,
            CURLOPT_HEADER => 0,
            CURLOPT_RETURNTRANSFER => 1,
            CURLOPT_URL => $queryUrl,
            CURLOPT_POSTFIELDS => $queryData,
        ]);
    $result0 = curl_exec($curl);
    // curl_close($curl);

    echo 'time passed = ' . number_format(microtime(true) - $run, 6, '.', ' ') . PHP_EOL;
    return $result0;
}

/**
 * @param array $batches
 * @param int $pack_limit
 * @param array $batch_levels
 * @return array
 */
function batches_Nested(array $batch_levels, array $batches, int $pack_limit): array
{
    $run = microtime(true);
    echo __FUNCTION__ . PHP_EOL;

    $extra_batch = [];
    foreach ($batch_levels as $ignored) {
        $extra_batches = [];
        $current_batch = current($batches);
        while ($current_batch) {
            $extra_batch = ['halt' => 0, 'cmd' => []];
            $counter = 1;
            while ($counter <= $pack_limit and $current_batch) {
                $extra_batch['cmd']['batch' . $counter] = 'batch?'
                    . http_build_query($current_batch);
                $current_batch = next($batches);
                $counter++;
            }
            $extra_batches[] = $extra_batch;
        }
        $batches = $extra_batches;
    }
    echo 'time passed = ' . number_format(microtime(true) - $run, 6, '.', ' ') . PHP_EOL;
    return $extra_batch;
}

/**
 * Формирует пакет batсh запросов Битрикс24 облако REST
 * @param int $e
 * @param        $batch_value
 * @param        $requests_value
 * @param int $pack_limit
 * @param string $method
 * @param array $filter
 * @param        $counter_1
 * @param array $select_fields
 * @param int $pack_limit_prev
 * @param array $batches
 * @return array
 */
function batches_While(int    $e,
                              $batch_value,
                              $requests_value,
                       int    $pack_limit,
                       string $method,
                       array  $filter,
                              $counter_1,
                       array  $select_fields,
                       int    $pack_limit_prev,
                       array  $batches): array
{
    $start_param = -1; //для первого запроса в батче - задаем значение параметра start

    $id_Counter = $counter_1;

    while ($e <= $batch_value) {
        if ($requests_value > $pack_limit) {
            $inbatch_requests = $pack_limit;
            $requests_value = $requests_value - $pack_limit; //сколько еще запросов осталось запаковать
        } else {
            $inbatch_requests = $requests_value;
        }
        //формируем батч
        $batch = ['halt' => 0, 'cmd' => []];

        for ($i = 1; $i <= $inbatch_requests; $i++) {
            $batch['cmd']['list' . $i] = $method . '?'
                . http_build_query([
                    'order' => ['ID' => 'asc'],
                    // 'filter' => array_merge($filter, ['>ID' => $id_Counter]),
                    'filter' => array_merge($filter,
                        filter_Method($method,
                            $id_Counter,
                            'list',
                            $i,
                            $pack_limit)),
                    'select' => $select_fields,
                    'start' => $start_param,
                ]);
            $id_Counter = '$result[list' . $i . '][' . $pack_limit_prev . '][ID]'; //берем последний ID из прошлого запроса внутри батча
            $start_param = -1;
        }
        $id_Counter = $counter_1;
        $batches[] = $batch;
        $e++;
    }
    return $batches;
}

/**
 * создать строку фильтра в зависимости от метода
 */
function filter_Method($method, $id_Counter, string $prev, int $i, int $packLimit): array
{
    $return = ['>ID' => $id_Counter];

    if ($i > 1) {
        /** @noinspection PhpSwitchStatementWitSingleBranchInspection */
        // Есть шанс, что у Битрикс24 есть ещё чудные методы
        switch ($method) {
            case 'tasks.task.list':
                $return = ['>ID' => '$result[' . $prev . ($i - 1) . '][tasks][' . ($packLimit - 1) . '][id]'];
                break;
        }
    }
    return $return;
}

/**
 * @param int $pack_limit
 * @param     $counter
 * @return array
 */
function batch_Levels($counter, int $pack_limit): array
{
    $batch_levels = [];
    while ($counter > $pack_limit) {
        $counter = ceil($counter / $pack_limit);
        $batch_levels[] = $counter; //количество батчей каждого уровня
    }
    if (!($batch_levels)) {
        $batch_levels[0] = 1; //если все поместится в 1 батч
    }
    return $batch_levels;
}

/**
 * @param string $method
 * @param string $hook
 * @noinspection PhpMissingReturnTypeInspection
 * @return array
 */
function query_Total(string $hook, string $method)
{
    $queryUrl = $hook . $method;

    if ($method == 'catalog.product.list') {
        $queryData = http_build_query([
            'order' => ['id' => 'asc'],
            'filter' => ['>id' => 0, 'iblockId' => '15'],
            'select' => ['id', 'iblockId'],
        ]);
    } else {
        $queryData = http_build_query([
            'order' => ['ID' => 'asc'],
            'filter' => ['>ID' => 0],
            'select' => ['ID'],
        ]);
    }
    $curl = curl_init();
    curl_setopt_array($curl,
        [
            CURLOPT_SSL_VERIFYPEER => 0,
            CURLOPT_POST => 1,
            CURLOPT_HEADER => 0,
            CURLOPT_RETURNTRANSFER => 1,
            CURLOPT_URL => $queryUrl,
            CURLOPT_POSTFIELDS => $queryData,
        ]);
    $result = curl_exec($curl);
//    curl_close($curl);
    $result = json_decode($result,
        true);
    if (isset($result['error_description'])) {
        error_EMail(__FUNCTION__, $result['error_description']);
        exit();
    }

    return $result['total'];
}

/**
 * Ищет в $array ключи (не значения), содержащие в названии $needle (не только полное совпадение) и
 * собирает их в массив, если значение является массивом.
 *
 * @param array $array ['a' => ['b' => 1,
 *                                      'd' => [
 *                                      'e1' => [2]]],
 *                                      'b' => ['b' => 1,
 *                                      'q' => [
 *                                      '3e' => [1]]],];
 * @param string $needle 'e'
 * @param array $result Массив ключей, содержащих указанный ключ
 *                                      [0 => [2],
 *                                      1 => [1]]
 */
function keys_Like(array $array, string $needle, array &$result)
{
    foreach ($array as $key => $value) {
        if (strpos((string)$key, $needle) !== false) {
            if (is_array($value)) {
                $result = array_merge_recursive($result, $value);
            }
        } elseif (is_array($value)) {
            keys_Like($value, $needle, $result);
        }
    }
}
<?php
declare(strict_types=1);

// Вызов https://restzg.ru/phpb24/Bitrix24-entity-operations/aProducts_2_GoogleSheet.php
$File_Name   = __DIR__ . '/webHookURL.txt';
$WEB_HOOK = file_get_contents($File_Name);

require_once __DIR__ . '/vendor/autoload.php';
require_once __DIR__ . '/crest_SRP.php';
require_once __DIR__ . '/lib_Bitrix24.php';
require_once __DIR__ . '/lib_Php.php';
require_once __DIR__ . '/google_Sheets.php';

use App\Bitrix24\Bitrix24API;

// use Google\Service\Sheets\UpdateValuesResponse;

$BX24 = new Bitrix24API($WEB_HOOK);

/**
 * поместить товары Битрикс24 в гугл таблицу
 * $arr1d_ListLabels - человечьи названия полей */
function b24_Products_2_Google_Sheet(string $googleSheet_Range_Address,
                                     string $googleSheet_spreadSheets_ID,
                                     array $arr1d_ListLabels,
                                     string $file_Credentials,
                                     int $catalog_ID) {

    global $WEB_HOOK;

    $arr_2_Sheet = b24_Products_2_Array2D($arr1d_ListLabels, $WEB_HOOK, $catalog_ID);
    log_2_File('Массив для вставки в диапазон ' . (count($arr_2_Sheet) > 0) ? 'подготовлен' : 'ПУСТ');

    if (!array_Empty($arr_2_Sheet)) {

        googleSheet_Range_Clear($googleSheet_Range_Address . ':Z',
                                $googleSheet_spreadSheets_ID,
                                $file_Credentials);
        log_2_File('Диапазон очищен');

        array_2_Google_Sheet($arr_2_Sheet,
                             $googleSheet_Range_Address,
                             $googleSheet_spreadSheets_ID,
                             $file_Credentials);
        log_2_File('Таблица вставлена. Программа завершена');
    }
}

/** Запуск - вставить продукты в гугл таблицу Приказ */
function b24_Products_2_Google_Sheet_RUN() {

    global $File_Credentials;

    $range_Address   = 'Отчет по внесенной информации по продукции в Битрикс24!';
    $spread_Sheet_Id = '1W3PaaY7yB6Acd0QA7B_Uy0B60jvlVGBquLjY3u7Jncg';
    $catalog_ID      = 24;

    /** товар названия полей взять из гуглтаблицы */
    $arr1d_ListLabels = googleSheet_Range_2_Array('1:1',
                                                  $spread_Sheet_Id,
                                                  $File_Credentials)['values'][0];
    if (count($arr1d_ListLabels) > 0) {
        log_2_File('Заголовки из таблицы загружены');
    } else {
        log_2_File('Заголовки из таблицы НЕ загружены');
    }

    b24_Products_2_Google_Sheet($range_Address.'A2',
                                $spread_Sheet_Id,
                                $arr1d_ListLabels,
                                $File_Credentials,
                                $catalog_ID);
}

b24_Products_2_Google_Sheet_RUN();


<?php
declare(strict_types=1);

// /**
//  * сколько подстрок можно создать из строки
//  * @param string $highStack
//  * @param string $needles
//  * @return int
//  */
// function how_Match(string $highStack, string $needles): int {
//     // из $needles создать массив символов с количеством повторов
//     // проходом по $highStack набрать количества в массив
//     // выявить символ с мин колвом повторов и
//     // разделить колво сколько раз символ в $highStack на ковво раз в $needles.
//
//     return
//         divide_Quant( // разделить колво сколько раз символ в $highStack на min_in.
//             min_In(  // выявить символ с мин колвом повторов
//                 for_HighStack( // проходом по $highStack набрать количества в массив
//                     $highStack,
//                     uniques_Counts($needles)))); // создать массив символов с количеством повторов
// }
//
// /**
//  * из строки создать массив символов с колвом
//  */
// function uniques_Counts(string $needles): array {
//
// }
//
// function how_Match_Test() {
//
//     $res = how_Match('z', 'q');
//     assert($res == 0);
//
//     $res = how_Match('z', 'z');
//     assert($res == 1);
//
//     $res = how_Match('zqqzz', 'zq');
//     assert($res == 2);
//
//     $res = how_Match('balloon balon', 'balloon');
//     assert($res == 1);
//
// }

/**
 * сколько чисел меньше чем текущее число
 */

function numbers_Less_Current(array $arr_Numbers): array {
    $arr_Sorted = $arr_Numbers;
    sort($arr_Sorted);

    $arr_Sorted_Len = count($arr_Sorted);
    $arr_Result     = [];

    for ($i = 0; $i < $arr_Sorted_Len; $i++) {

        $arr_Result[$arr_Numbers[$arr_Sorted[$i]]] = position_Less($arr_Sorted, $i);

    }

    return $arr_Result;
}

/**
 * вернуть позицию следующего меньшего элемента
 */
function position_Less(array $arr, int $i): int {

    $j = 0;

    if ($i > 0) {

        for ($j = $i - 1; $j > 0; $j--) {

            if ($arr[$i] > $arr[$j]) {

                break;
            }
        }
    }
    return $j;
}

function position_Less_Test() {

    $res = position_Less([], 0);
    assert($res == 0);

    $res = position_Less([0,1], 0);
    assert($res == 1);

}

function numbers_Less_Current_Test() {

    $res = numbers_Less_Current([]);
    assert(count($res) == 0);

}

echo preg_replace_callback('~-([a-z])~', function ($match) {
    return strtoupper($match[1]);
}, 'hello-world');

// выведет helloWorld
// position_Less_Test();

// numbers_Less_Current_Test();

// how_Match_Test();
<?php
/** @noinspection PhpUnused */

declare(strict_types=1);

require_once __DIR__ . '/lib_Batch_Fast.php';
require_once __DIR__ . '/lib_Bitrix24.php';
require_once __DIR__ . '/lib_Php.php';

/** @noinspection PhpUnused */
function batch_Fast_InExSu_Double_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $hook = WEB_HOOK;
//    $method = 'crm.lead.list';
    $method = 'tasks.task.list';
    $select_fields = ['ID', 'TITLE'];
    $filter = [];

    $value = batch_Fast_InExSu_Double($hook, $method, $select_fields, $filter);
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;

    assert(is_array($value));
}

function batch_Fast_InExSu_catalog_product_list()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $hook = WEB_HOOK;
//    $method = 'crm.lead.list';
    $method = 'catalog.product.list';
    $select_fields = ['id', 'iblockId', 'previewPicture'];
    $filter = ['iblockId' => '15'];

    $value = batch_Fast_InExSu_Double($hook, $method, $select_fields, $filter);
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;

    assert(is_array($value));
}

function checkYearInArray(array $data, int $year): bool
{
    foreach ($data as $task) {
        foreach ($task as $key => $value) {
            // Проверяем, что значение содержит дату и год соответствует заданному году
            if (strpos($key, 'Date') !== false && date('Y', strtotime($value)) != $year) {
                return false;
            }
        }
    }

    return true;
}

/** @noinspection PhpUnused */
function CheckYearInArray_Test()
{
    // Тестовые данные
    $data1 = [
        [
            'id' => '36567',
            'title' => 'Подготовить сводные еженедельные таблицы по продажам и остаткам ИС',
            'createdDate' => '2023-01-06T08:00:00+03:00',
            'closedDate' => '2023-01-20T12:01:16+03:00',
            'group' => []
        ],
        [
            'id' => '36571',
            'title' => 'Подготовить ответ Росгвардии об участии в мероприятии.',
            'createdDate' => '2023-01-09T11:53:09+03:00',
            'closedDate' => '2023-01-10T15:35:35+03:00',
            'group' => []
        ]
    ];

    $data2 = [
        [
            'id' => '36567',
            'title' => 'Подготовить сводные еженедельные таблицы по продажам и остаткам ИС',
            'createdDate' => '2022-12-31T23:59:59+03:00', // Год не соответствует заданному году
            'closedDate' => '2023-01-20T12:01:16+03:00',
            'group' => []
        ],
        [
            'id' => '36571',
            'title' => 'Подготовить ответ Росгвардии об участии в мероприятии.',
            'createdDate' => '2023-01-09T11:53:09+03:00',
            'closedDate' => '2023-01-10T15:35:35+03:00',
            'group' => []
        ]
    ];

    // Проверяем, что функция возвращает true для массива, где все значения дат соответствуют заданному году
    $result1 = checkYearInArray($data1, 2023);
    assert($result1 === true, 'Test case 1 failed');

    // Проверяем, что функция возвращает false для массива, где одно из значений дат не соответствует заданному году
    $result2 = checkYearInArray($data2, 2023);
    assert($result2 === false, 'Test case 2 failed');
}

/**
 * не удаляй, в комментариях разные варианты тестирования
 * потом можно разнести по отдельным функциям
 * @noinspection PhpUnused
 * @noinspection PhpUnusedLocalVariableInspection
 */
function batch_Fast_InExSu_Double_Dates_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $hook = WEB_HOOK;
    // $method = 'crm.lead.list';
    $method = 'tasks.task.list';

    $select_fields = ['ID', 'TITLE', 'CREATED_DATE', 'CLOSED_DATE', 'STATUS'];

    $current_year = date('Y');
    $previous_year = $current_year - 1;
    $created_Date = "$current_year-01-01T00:00:00+03:00";
    $closed_Date = "$current_year-12-31T23:59:59+03:00";
    $filter = [
        '<=CLOSED_DATE' => $closed_Date,
        '>=CREATED_DATE' => $created_Date,
        '!REAL_STATUS' => '5',];

    $value = batch_Fast_InExSu_Double($hook, $method, $select_fields, $filter);
    assert(count($value) > 0);

    $value = tasksInWork($value);

    $clipBoard = array_2_Table_ClipBoard($value);
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
    assert(is_array($value));
}

/**
 * Тест одного года
 * @noinspection PhpUnused
 */
function batch_Fast_InExSu_Double_YearOne_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $hook = WEB_HOOK;

    $method = 'tasks.task.list';

    $select_fields = ['ID', 'TITLE', 'CREATED_DATE', 'CLOSED_DATE'];

    /**
     * Если значения вводить напрямую фильтр, НЕ работает.
     * Поэтому через переменные.
     */
    $date_Start = '2023-01-01T00:00:00+03:00';
    $date_Stop_ = '2023-12-31T23:59:59+03:00';

    $filter =
        ['>=CREATED_DATE' => $date_Start,
            '<=CREATED_DATE' => $date_Stop_,
            '>=CLOSED_DATE' => $date_Start,
            '<=CLOSED_DATE' => $date_Stop_,
        ];

    $value = batch_Fast_InExSu_Double($hook, $method, $select_fields, $filter);
    assert(checkYearInArray($value, 2023));
    array_2_Table_ClipBoard($value);
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
    assert(is_array($value));
}

/**
 * tasks.task.list Тест одного дня
 * @noinspection PhpUnused
 */
function batch_Fast_InExSu_Double_DateOne_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $hook = WEB_HOOK;
    $method = 'tasks.task.list';

    $select_fields = ['ID', 'TITLE', 'CREATED_DATE', 'CLOSED_DATE'];

    /**
     * Если значения вводить напрямую фильтр, НЕ работает.
     * Поэтому через переменные.
     */
    $date_Start = '2023-04-04T00:00:00+03:00';
    $date_Stop_ = '2023-04-04T23:59:59+03:00';
    $filter = ['>=CLOSED_DATE' => $date_Start,
        '<=CLOSED_DATE' => $date_Stop_];

    $value = batch_Fast_InExSu_Double($hook, $method, $select_fields, $filter);
    assert(count($value) == 18);

    array_2_Table_ClipBoard($value);
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
    assert(is_array($value));
}

/** @noinspection PhpUnused */
function keys_Like_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

    $array = [
        'level1' => [
            'level2' => [
                'level3' => [
                    'lost_1' => [0 => [0]],
                    'lost_2' => [0 => [0]],
                    'level4' => [
                        'lost_41' => [0 => [0]]]]]]];

    $result = [];
    keys_Like($array, 'lost', $result);
    $expect = [0 => [0 => 0,],
        1 => [0 => 0,],
        2 => [0 => 0,],];
    assert($expect === $result);
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
}

/**
 * Принимает массив задач из Битрикс24, название столбца, год.
 * Возвращает массив задач, у которых столбец с 'название столбца', не содержит дату с 'год'
 *
 * @param $columnName
 * @param $year
 * @param $tasks
 * @return array
 */
function tasksColumnFilterByYearNOT($tasks, $columnName, $year): array
{
    $filteredTasks = [];
    foreach ($tasks as $task) {
        // Проверяем, есть ли у задачи указанный столбец
        if (isset($task[$columnName])) {
            // Парсим дату из строки в формате "Y-m-d\TH:i:sP"
            $date = DateTime::createFromFormat('Y-m-d\TH:i:sP', $task[$columnName]);
            if ($date) {
                // Получаем год из даты и сравниваем с указанным годом
                if ($date->format('Y') != $year) {
                    // Если год даты не совпадает с указанным годом, добавляем задачу в отфильтрованный массив
                    $filteredTasks[] = $task;
                }
            }
        }
    }
    return $filteredTasks;
}

/** @noinspection PhpUnused */
function tasksColumnFilterByYearNOT_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

// Подготовка данных
    $tasks = [
        [
            'task_id' => 1,
            'task_name' => 'Task 1',
            'due_date' => '2022-01-15T12:30:00+03:00'
        ],
        [
            'task_id' => 2,
            'task_name' => 'Task 2',
            'due_date' => '2021-11-25T09:45:00+03:00'
        ],
        [
            'task_id' => 3,
            'task_name' => 'Task 3',
            'due_date' => '2023-02-10T16:15:00+03:00'
        ]
    ];

    $columnName = 'due_date';
    $year = 2022;

// Вызов функции filterTasksByYear
    $filteredTasks = tasksColumnFilterByYearNOT($tasks, $columnName, $year);

// в выдаче не должно быть 2022 года
    assert(count($filteredTasks) === 2);

    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
}

function batches_curlExec_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $fileName = __DIR__ . '/webHookURL.txt';
    $hook = file_get_contents($fileName);

    $batches = [0 => ['halt' => 0,
        'cmd' =>
            ['list1' => 'tasks.task.list?order%5BID%5D=asc&filter%5B%3EID%5D=0&select%5B0%5D=ID&select%5B1%5D=TITLE&select%5B2%5D=CREATED_DATE&select%5B3%5D=CLOSED_DATE&start=0',
                'list2' => 'tasks.task.list?order%5BID%5D=asc&filter%5B%3EID%5D=%24result%5Blist1%5D%5Btasks%5D%5B49%5D%5Bid%5D&select%5B0%5D=ID&select%5B1%5D=TITLE&select%5B2%5D=CREATED_DATE&select%5B3%5D=CLOSED_DATE&start=-1']],
        //                1 => ['halt' => 1,
        //                      'cmd'  =>
        //                          ['list1' => 'tasks.task.list?order%5BID%5D=asc&filter%5B%3EID%5D=0&select%5B0%5D=ID&select%5B1%5D=TITLE&select%5B2%5D=CREATED_DATE&select%5B3%5D=CLOSED_DATE&start=0',
        //                           'list2' => 'tasks.task.list?order%5BID%5D=asc&filter%5B%3EID%5D=%24result%5Blist1%5D%5Btasks%5D%5B49%5D%5Bid%5D&select%5B0%5D=ID&select%5B1%5D=TITLE&select%5B2%5D=CREATED_DATE&select%5B3%5D=CLOSED_DATE&start=-1']]
    ];

    $result = batches_curlExec($hook, $batches);
    assert(count($result['result']['result_error']) == 0);
    assert(count($result['result']['result']) == 2);
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
}

//batch_Fast_InExSu_catalog_product_list();
//batch_Fast_InExSu_department_get_Test();
function batch_Fast_InExSu_user_get_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $hook = WEB_HOOK;
//    $method = 'crm.lead.list';
    $method = 'user.get';
    $select_fields = ['ID', 'NAME'];
    $filter = [];

    $value = batch_Fast_InExSu_Double($hook, $method, $select_fields, $filter);
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;

    assert(is_array($value));
}

function batch_Fast_crm_product_list()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

    $method = 'crm.product.list';

//    $arr = batch_Fast_InExSu_Double(WEB_HOOK, $method, ['ID', 'PREVIEWPICTURE']);
    $arr = jet_list(WEB_HOOK, 'crm.product.list', ['PROPERTY_*']);
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
    assert(count($arr) > 100);
}

//batch_Fast_crm_product_list();
//batch_Fast_InExSu_user_get_Test();
//batches_curlExec_Test();
//tasksColumnFilterByYearNOT_Test();
//keys_Like_Test();
//array_Keys_All_Test();
//batch_Fast_InExSu_Double_Test();
//CheckYearInArray_Test();
//batch_Fast_InExSu_Double_DateOne_Test();
//batch_Fast_InExSu_Double_YearOne_Test();
batch_Fast_InExSu_Double_Dates_Test();
<?php /** @noinspection PhpUnused */
/** @noinspection PhpComposerExtensionStubsInspection */

require_once __DIR__ . '/settings.php';

/**
 * @version 1.36
 *  define:
 *      C_REST_WEB_HOOK_URL = 'https://rest-api.bitrix24.com/rest/1/doutwqkjxgc3mgc1/'  //url on creat Webhook
 *      or
 *      C_REST_CLIENT_ID = 'local.5c8bb1b0891cf2.87252039' //Application ID
 *      C_REST_CLIENT_SECRET = 'SakeVG5mbRdcQet45UUrt6q72AMTo7fkwXSO7Y5LYFYNCRsA6f'//Application key
 *
 *        C_REST_CURRENT_ENCODING = 'windows-1251'//set current encoding site if encoding unequal UTF-8 to use iconv()
 *      C_REST_BLOCK_LOG = true //turn off default logs
 *      C_REST_LOGS_DIR = __DIR__ .'/logs/' //directory path to save the log
 *      C_REST_LOG_TYPE_DUMP = true //logs save var_export for viewing convenience
 *      C_REST_IGNORE_SSL = true //turn off validate ssl by curl
 */

const VERSION = '1.36';
const BATCH_COUNT = 50;//count batch 1 query
const TYPE_TRANSPORT = 'json'; // json or xml

/**
 * call where install application even url
 * only for rest application, not webhook
 */


function installApp(): array
{
    $result = [
        'rest_only' => true,
        'install' => false
    ];
    if ($_REQUEST['event'] == 'ONAPPINSTALL' && !empty($_REQUEST['auth'])) {
        $result['install'] = setAppSettings($_REQUEST['auth'], true);
    } elseif ($_REQUEST['PLACEMENT'] == 'DEFAULT') {
        $result['rest_only'] = false;
        $result['install'] = setAppSettings(
            [
                'access_token' => htmlspecialchars($_REQUEST['AUTH_ID']),
                'expires_in' => htmlspecialchars($_REQUEST['AUTH_EXPIRES']),
                'application_token' => htmlspecialchars($_REQUEST['APP_SID']),
                'refresh_token' => htmlspecialchars($_REQUEST['REFRESH_ID']),
                'domain' => htmlspecialchars($_REQUEST['DOMAIN']),
                'client_endpoint' => 'https://' . htmlspecialchars($_REQUEST['DOMAIN']) . '/rest/',
            ],
            true);
    }

    setLog(
        [
            'request' => $_REQUEST,
            'result' => $result
        ],
        'installApp');
    return $result;
}

/**
 * @return array|bool|string|string[] array|string|boolean curl-return or error
 *
 * @var $arParams array
 * $arParams = [
 *      'method'    => 'some rest method',
 *      'params'    => []//array params of method
 * ];
 */

function callCurl(array $arParams)
{
    if (!function_exists('curl_init')) {
        return [
            'error' => 'error_php_lib_curl',
            'error_information' => 'need install curl lib'
        ];
    }
    $arSettings = getAppSettings();
    if ($arSettings !== false) {
        if (isset($arParams['this_auth']) && $arParams['this_auth'] == 'Y') {
            $url = 'https://oauth.bitrix.info/oauth/token/';
        } else {
            $url = $arSettings["client_endpoint"] . $arParams['method'] . '.' . TYPE_TRANSPORT;
            if (empty($arSettings['is_web_hook']) || $arSettings['is_web_hook'] != 'Y') {
                $arParams['params']['auth'] = $arSettings['access_token'];
            }
        }

        $sPostFields = http_build_query($arParams['params']);

        try {
            $obCurl = curl_init();
            curl_setopt($obCurl, CURLOPT_URL, $url);
            curl_setopt($obCurl, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($obCurl, CURLOPT_POSTREDIR, 10);
            curl_setopt($obCurl, CURLOPT_USERAGENT, 'Bitrix24 CRest PHP ' . VERSION);
            if ($sPostFields) {
                curl_setopt($obCurl, CURLOPT_POST, true);
                curl_setopt($obCurl, CURLOPT_POSTFIELDS, $sPostFields);
            }
            curl_setopt(
                $obCurl, CURLOPT_FOLLOWLOCATION, (isset($arParams['followlocation']))
                ? $arParams['followlocation'] : 1
            );
            if (defined("C_REST_IGNORE_SSL") && C_REST_IGNORE_SSL === true) {
                curl_setopt($obCurl, CURLOPT_SSL_VERIFYPEER, false);
                curl_setopt($obCurl, CURLOPT_SSL_VERIFYHOST, false);
            }
            $out = curl_exec($obCurl);
            $info = curl_getinfo($obCurl);
            if (curl_errno($obCurl)) {
                $info['curl_error'] = curl_error($obCurl);
            }
            if (TYPE_TRANSPORT == 'xml' && (!isset($arParams['this_auth']) || $arParams['this_auth'] != 'Y'))//auth only json support
            {
                $result = $out;
            } else {
                $result = expandData($out);
            }
            curl_close($obCurl);

            if (!empty($result['error'])) {
                if ($result['error'] == 'expired_token' && empty($arParams['this_auth'])) {
                    $result = GetNewAuth($arParams);
                } else {
                    $arErrorInform = [
                        'expired_token' => 'expired token, cant get new auth? Check access oauth server.',
                        'invalid_token' => 'invalid token, need reinstall application',
                        'invalid_grant' => 'invalid grant, check out define C_REST_CLIENT_SECRET or C_REST_CLIENT_ID',
                        'invalid_client' => 'invalid client, check out define C_REST_CLIENT_SECRET or C_REST_CLIENT_ID',
                        'QUERY_LIMIT_EXCEEDED' => 'Too many requests, maximum 2 query by second',
                        'ERROR_METHOD_NOT_FOUND' => 'Method not found! You can see the permissions of the application: CRest::call(\'scope\')',
                        'NO_AUTH_FOUND' => 'Some setup error b24, check in table "b_module_to_module" event "OnRestCheckAuth"',
                        'INTERNAL_SERVER_ERROR' => 'Server down, try later'
                    ];
                    if (!empty($arErrorInform[$result['error']])) {
                        $result['error_information'] = $arErrorInform[$result['error']];
                    }
                }
            }
            if (!empty($info['curl_error'])) {
                $result['error'] = 'curl_error';
                $result['error_information'] = $info['curl_error'];
            }

            setLog(
                [
                    'url' => $url,
                    'info' => $info,
                    'params' => $arParams,
                    'result' => $result
                ],
                'callCurl'
            );

            return $result;
        } catch (Exception $e) {
            setLog(
                [
                    'message' => $e->getMessage(),
                    'code' => $e->getCode(),
                    'trace' => $e->getTrace(),
                    'params' => $arParams
                ],
                'exceptionCurl'
            );

            return [
                'error' => 'exception',
                'error_exception_code' => $e->getCode(),
                'error_information' => $e->getMessage(),
            ];
        }
    } else {
        setLog(
            [
                'params' => $arParams
            ],
            'emptySetting'
        );
    }

    return [
        'error' => 'no_install_app',
        'error_information' => 'error install app, pls install local application '
    ];
}

/**
 * Generate a request for callCurl()
 *
 * @return mixed array|string|boolean curl-return or error
 * @var $params array method params
 * @var $method string
 */


function call($method, $params = [])
{
    $arPost = [
        'method' => $method,
        'params' => $params
    ];
    if (defined('C_REST_CURRENT_ENCODING')) {
        $arPost['params'] = changeEncoding($arPost['params']);
    }

    return callCurl($arPost);
}

/**
 * @return array
 *
 * @var $arData array
 * @var $halt   integer 0 or 1 stop batch on error
 * @example $arData:
 * $arData = [
 *      'find_contact' => [
 *          'method' => 'crm.duplicate.findbycomm',
 *          'params' => [ "entity_type" => "CONTACT",  "type" => "EMAIL", "values" => array("info@bitrix24.com") ]
 *      ],
 *      'get_contact' => [
 *          'method' => 'crm.contact.get',
 *          'params' => [ "id" => '$result[find_contact][CONTACT][0]' ]
 *      ],
 *      'get_company' => [
 *          'method' => 'crm.company.get',
 *          'params' => [ "id" => '$result[get_contact][COMPANY_ID]', "select" => ["*"],]
 *      ]
 * ];
 *
 */

// function callBatch(array $arData, int $halt = 0)
// { // теперь batch_SRP
//    $arResult = [];
//    if (is_array($arData)) {
//        if (defined('C_REST_CURRENT_ENCODING')) {
//            $arData = changeEncoding($arData);
//        }
//        $arDataRest = [];
//        $i = 0;
//        foreach ($arData as $key => $data) {
//            if (!empty($data['method'])) {
//                $i++;
//                if (BATCH_COUNT >= $i) {
//                    $arDataRest['cmd'][$key] = $data['method'];
//                    if (!empty($data['params'])) {
//                        $arDataRest['cmd'][$key] .= '?' . http_build_query($data['params']);
//                    }
//                }
//            }
//        }
//        if (!empty($arDataRest)) {
//            $arDataRest['halt'] = $halt;
//            $arPost = [
//                'method' => 'batch',
//                'params' => $arDataRest
//            ];
//            $arResult = callCurl($arPost);
//        }
//    }
//    return $arResult;
// }

/**
 * Getting a new authorization and sending a request for the 2nd time
 *
 * @return array query result from $arParams
 *
 * @var $arParams array request when authorization error returned
 */

function GetNewAuth(array $arParams)
{
    $result = [];
    $arSettings = getAppSettings();
    if ($arSettings !== false) {
        $arParamsAuth = [
            'this_auth' => 'Y',
            'params' =>
                [
                    'client_id' => $arSettings['C_REST_CLIENT_ID'],
                    'grant_type' => 'refresh_token',
                    'client_secret' => $arSettings['C_REST_CLIENT_SECRET'],
                    'refresh_token' => $arSettings["refresh_token"],
                ]
        ];
        $newData = callCurl($arParamsAuth);
        if (isset($newData['C_REST_CLIENT_ID'])) {
            unset($newData['C_REST_CLIENT_ID']);
        }
        if (isset($newData['C_REST_CLIENT_SECRET'])) {
            unset($newData['C_REST_CLIENT_SECRET']);
        }
        if (isset($newData['error'])) {
            unset($newData['error']);
        }
        if (setAppSettings($newData)) {
            $arParams['this_auth'] = 'N';
            $result = callCurl($arParams);
        }
    }
    return $result;
}

/**
 * @return boolean
 * @var $isInstall  boolean true if install app by installApp()
 * @var $arSettings array settings application
 */


function setAppSettings($arSettings, $isInstall = false)
{
    $return = false;
    if (is_array($arSettings)) {
        $oldData = getAppSettings();
        if ($isInstall != true && !empty($oldData) && is_array($oldData)) {
            $arSettings = array_merge($oldData, $arSettings);
        }
        $return = setSettingData($arSettings);
    }
    return $return;
}

/**
 * @return mixed setting application for query
 */


function getAppSettings()
{
    if (defined("C_REST_WEB_HOOK_URL") && !empty(C_REST_WEB_HOOK_URL)) {
        $arData = [
            'client_endpoint' => C_REST_WEB_HOOK_URL,
            'is_web_hook' => 'Y'
        ];
        $isCurrData = true;
    } else {
        $arData = getSettingData();
        $isCurrData = false;
        if (
            !empty($arData['access_token']) &&
            !empty($arData['domain']) &&
            !empty($arData['refresh_token']) &&
            !empty($arData['application_token']) &&
            !empty($arData['client_endpoint'])
        ) {
            $isCurrData = true;
        }
    }

    return ($isCurrData) ? $arData : false;
}

/**
 * Can overridden this method to change the data storage location.
 *
 * @return array setting for getAppSettings()
 */


function getSettingData()
{
    $return = [];
    if (file_exists(__DIR__ . '/settings.json')) {
        $return = expandData(file_get_contents(__DIR__ . '/settings.json'));
        if (defined("C_REST_CLIENT_ID") && !empty(C_REST_CLIENT_ID)) {
            $return['C_REST_CLIENT_ID'] = C_REST_CLIENT_ID;
        }
        if (defined("C_REST_CLIENT_SECRET") && !empty(C_REST_CLIENT_SECRET)) {
            $return['C_REST_CLIENT_SECRET'] = C_REST_CLIENT_SECRET;
        }
    }
    return $return;
}

/**
 * @return string json_encode with encoding
 * @var $encoding boolean true - encoding to utf8, false - decoding
 *
 * @var $data mixed
 */

function changeEncoding($data, $encoding = true)
{
    if (defined('C_REST_CURRENT_ENCODING')) {
        if (is_array($data)) {
            $result = [];
            foreach ($data as $k => $item) {
                $k = changeEncoding($k, $encoding);
                $result[$k] = changeEncoding($item, $encoding);
            }
        } else {
            if ($encoding) {
                $result = iconv(C_REST_CURRENT_ENCODING, "UTF-8//TRANSLIT", $data);
            } else {
                $result = iconv("UTF-8", C_REST_CURRENT_ENCODING, $data);
            }
        }
        return $result;
    }
    return $data;
}

/**
 * @return string json_encode with encoding
 * @var $debag boolean
 *
 * @var $data mixed
 */

function wrapData($data, $debag = false): string
{
    if (defined('C_REST_CURRENT_ENCODING')) {
        $data = changeEncoding($data, true);
    }
    $return = json_encode($data, JSON_HEX_TAG | JSON_HEX_AMP | JSON_HEX_APOS | JSON_HEX_QUOT);

    if ($debag) {
        $e = json_last_error();
        if ($e != JSON_ERROR_NONE) {
            if ($e == JSON_ERROR_UTF8) {
                return 'Failed encoding! Recommended \'UTF - 8\' or set define C_REST_CURRENT_ENCODING = current site encoding for function iconv()';
            }
        }
    }

    return $return;
}

/**
 * @return string json_decode with encoding
 * @var $debag boolean
 *
 * @var $data mixed
 */

function expandData($data)
{
    $return = json_decode($data, true);
    if (defined('C_REST_CURRENT_ENCODING')) {
        $return = changeEncoding($return, false);
    }
    return $return;
}

/**
 * Can overridden this method to change the data storage location.
 *
 * @return boolean is successes save data for setSettingData()
 * @var $arSettings array settings application
 */


function setSettingData(array $arSettings)
{
    return (boolean)file_put_contents(__DIR__ . '/settings.json', wrapData($arSettings));
}

/**
 * Can overridden this method to change the log data storage location.
 *
 * @return boolean is successes save log data
 * @var $type   string to more identification log data
 * @var $arData array of logs data
 */

function setLog($arData, $type = ''): bool
{
    $return = false;
    if (!defined("C_REST_BLOCK_LOG") || C_REST_BLOCK_LOG !== true) {
        if (defined("C_REST_LOGS_DIR")) {
            $path = C_REST_LOGS_DIR;
        } else {
            $path = __DIR__ . '/logs/';
        }
        $path .= date("Y-m-d/H") . '/';

        if (!file_exists($path)) {
            @mkdir($path, 0775, true);
        }

        $path .= time() . '_' . $type . '_' . rand(1, 9999999) . 'log';
        if (!defined("C_REST_LOG_TYPE_DUMP") || C_REST_LOG_TYPE_DUMP !== true) {
            $jsonLog = wrapData($arData);
            if ($jsonLog === false) {
                $return = file_put_contents($path . '_backup.txt', var_export($arData, true));
            } else {
                $return = file_put_contents($path . '.json', $jsonLog);
            }
        } else {
            $return = file_put_contents($path . '.txt', var_export($arData, true));
        }
    }
    return $return;
}

/**
 * check minimal settings server to work CRest
 * @return array of errors
 * @var $print boolean
 */

function checkServer($print = true): array
{
    $return = [];

    //check curl lib install
    if (!function_exists('curl_init')) {
        $return['curl_error'] = 'Need install curl lib.';
    }

    //creat setting file
    file_put_contents(__DIR__ . '/settings_check.json', wrapData(['test' => 'data']));
    if (!file_exists(__DIR__ . '/settings_check.json')) {
        $return['setting_creat_error'] = 'Check permission! Recommended: folders: 775, files: 664';
    }
    unlink(__DIR__ . '/settings_check.json');
    //creat logs folder and files
    $path = __DIR__ . '/logs/' . date("Y-m-d/H") . '/';
    if (!mkdir($path, 0775, true) && !file_exists($path)) {
        $return['logs_folder_creat_error'] = 'Check permission! Recommended: folders: 775, files: 664';
    } else {
        file_put_contents($path . 'test.txt', var_export(['test' => 'data'], true));
        if (!file_exists($path . 'test.txt')) {
            $return['logs_file_creat_error'] = 'check permission! recommended: folders: 775, files: 664';
        }
        unlink($path . 'test.txt');
    }

    if ($print === true) {
        if (empty($return)) {
            $return['success'] = 'Success!';
        }
        echo '<pre>';
        print_r($return);
        echo '</pre>';

    }

    return $return;
}

/**
 * пакетный запрос
 * SRP версия
 */
function batch_SRP(array $arData, int $halt = 0, int $batch_Count = 50, bool $encoding = false): array
{
    return callCurl(
        batch_Array(
            batch_ForEach(
                encodind_Change($arData, $encoding), $batch_Count), $halt));
}

function batch_Array(array $arr, int $halt): array
{
    $arr['halt'] = $halt;
    return [
        'method' => 'batch',
        'params' => $arr
    ];
}

function batch_ForEach(array $arData, int $batch_Count): array
{
    $arDataRest = [];
    $i = 0;

    foreach ($arData as $key => $data) {

        if ($batch_Count >= $i++) {

            $arDataRest['cmd'][$key] = $data['method'];

            if (!empty($data['params'])) {
                $arDataRest['cmd'][$key] .= '?' . http_build_query($data['params']);
            }
        }
    }
    return $arDataRest;
}

function encodind_Change(array $arData, bool $encoding): array
{
    if ($encoding) {
        $arData = changeEncoding($arData);
    }
    return $arData;
}
<?php
declare(strict_types=1);



<?php

echo exec('id');

<?php /** @noinspection PhpDefineCanBeReplacedWithConstInspection */
define('C_REST_CLIENT_ID', 'local.5c8bb1b0891cf2.87252039');//Application ID
define('C_REST_CLIENT_SECRET', 'SakeVG5mbRdcQet45UUrt6q72AMTo7fkwXSO7Y5LYFYNCRsA6f'); //Application key
// or
define('C_REST_WEB_HOOK_URL', file_get_contents(__DIR__ . '/webHookURL.txt'));//url on creat Webhook

// define('C_REST_CURRENT_ENCODING','windows-1251');
define('C_REST_IGNORE_SSL', true);//turn off validate ssl by curl
define('C_REST_LOG_TYPE_DUMP', true); //logs save var_export for viewing convenience
define('C_REST_BLOCK_LOG', true);//turn off default logs
define('C_REST_LOGS_DIR', __DIR__ . '/logs/'); //directory path to save the log
<?php

declare(strict_types=1);

require_once __DIR__ . '/lib_Php.php';

/**
 * заменить в задаче ID на значения
 */
function task_ID_2_Value_ForEach(array $arr_Task): array
{
    $arr_Return = [];

    foreach ($arr_Task as $key => $value) {
        switch ($key) {
            case 'createdBy':
                $arr_Return[$key] = $arr_Task['creator']['name'];
                break;
            case 'responsibleId':
                $arr_Return[$key] = $arr_Task['responsible']['name'];
                break;
            case 'groupId':
                if (isset($arr_Task['group']['name'])) {
                    $arr_Return[$key] = $arr_Task['group']['name'] ?? $arr_Return[$key];
                }
                break;
            case 'status':
                $arr_Return[$key] = task_Status($arr_Task[$key]);
                break;
            // некоторые пропускаю
            case 'creator':
            case 'group':
            case 'responsible':
                break;
            default:
                if (is_array($value)) {
                    $value = implode_If('',
                                        $value);
                }
                $arr_Return[$key] = dateTime_Replace_2_Date((string)$value);
        }
    }
    return $arr_Return;
}

/**
 * заменить в задаче ID на значения
 * некоторые поля в задаче имеют внутреннюю расшифоровку
 */
function task_Field_Inner(array $task, string $field_System, bool $timeClear = true)
{
    $return = $task[$field_System] ?? null;

    switch ($field_System) {
        case 'createdBy':
            $return = $task['creator']['name'];
            break;
        case 'responsibleId':
            $return = $task['responsible']['name'];
            break;
        case 'groupId':
            $return = $task['group']['name'] ?? '';
            break;
        case 'status':
            $return = task_Status($task[$field_System]);
            break;
        // некоторые пропускаю
        case 'creator':
        case 'group':
        case 'responsible':
            break;
    }

    if ($timeClear) {
        if (is_string($return)) {
            $return = timeClear($return);
        }
    }

    return $return;
}

/**
 * Очистка строки от времени
 *
 * @return string Строка даты в формате '2023-03-14'
 * @param string $date Строка даты и времени в формате '2023-03-14T08:43:56+03:00'
 */
function timeClear(string $date): string
{
    $dateParts = explode('T', $date);
    return $dateParts[0] ?? $date;
}

/** задача, статус заменить число на строку */
function task_Status(string $status): string
{
    switch ($status) {
        case '2':
            $return = 'Ждет выполнения';
            break;
        case '3':
            $return = 'Выполняется';
            break;
        case '4':
            $return = 'Ожидает контроля';
            break;
        case '5':
            $return = 'Завершена';
            break;
        case '6':
            $return = 'Отложена';
            break;
        default:
            $return = $status . ' - НЕ опознан статус задачи';
    }
    return $return;
}
<?php
// https://github.com/andrey-tech/bitrix24-api-php#%D0%9C%D0%B5%D1%82%D0%BE%D0%B4%D1%8B-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B-%D1%81%D0%BE-%D1%81%D0%B4%D0%B5%D0%BB%D0%BA%D0%B0%D0%BC%D0%B8

require __DIR__ . '/vendor/autoload.php';

use App\Bitrix24\Bitrix24API;
use App\Bitrix24\Bitrix24APIException;

try {
    // https://zelinskygroup.bitrix24.ru/devops/edit/in-hook/417/
    $file_Name = __DIR__ . '/webHookURL.txt';
    $webHookURL = file_get_contents($file_Name);

    $BX24 = new Bitrix24API($webHookURL);

    $filter = ['%TITLE' => 'Тест'];
//    $select = ['ID', 'TITLE'];
    $order_ = ['ID' => 'ASC'];

    $deal = $BX24->crm_deal_userfield_list($order_, $filter);
    $deal = $BX24->getDeal('$order_');

    // брать из UF_CRM_1602662883400 Способ закупки
//    [21] => Array
//    (
//        [ID] => 2353
//            [ENTITY_ID] => CRM_DEAL
//    [FIELD_NAME] => UF_CRM_1602662883400
//    [USER_TYPE_ID] => string

    // вставить в UF_CRM_1654498701 Способ закупки:

    // массив в файл в читаемом виде
    file_put_contents("crm_deal_userfield_list.txt", print_r($deal, true));

    //    print_r($deal);

    // Загружаем все сделки используя быстрый метод при работе с большими объемами данных
//    $generator = $bx24->fetchDealList($filter, $select, $order_);
//    foreach ($generator as $deals) {
//        foreach ($deals as $deal) {
//            // print_r($deal);
//            $dealId = $deal['ID'];
//            // Загружаем сделку по ID вместе со связанными товарами и контактами одним запросом
//            $deal = $bx24->getDeal($dealId);
//            $from = $deal['UF_CRM_1627624301'];
//
//            //    // Обновляем существующую сделку
////    $bx24->updateDeal($dealId, [
////        'TITLE' => 'Новая сделка №12'
////    ]);
//        }
//    }


} catch (Bitrix24APIException $e) {
    printf('Ошибка (%d): %s' . PHP_EOL, $e->getCode(), $e->getMessage());
} catch (Exception $e) {
    printf('Ошибка (%d): %s' . PHP_EOL, $e->getCode(), $e->getMessage());
}

function object2file($value, string $filename): void
{
    $str_value = serialize($value);

    $f = fopen($filename, 'w');
    fwrite($f, $str_value);
    fclose($f);
}

function object_from_file(string $filename): object
{
    return unserialize(
        file_get_contents($filename)
    );
}


<?php
declare(strict_types=1);

$File_Name = __DIR__ . '/webHookURL.txt';
define('WEB_HOOK', file_get_contents($File_Name));

require_once __DIR__ . '/vendor/autoload.php';
require_once __DIR__ . '/lib_Bitrix24.php';
require_once __DIR__ . '/lib_Php.php';

use App\Bitrix24\Bitrix24API;

$BX24 = new Bitrix24API(WEB_HOOK);

/** Изменить значение поля товара
 * Например, получить массив id товаров с пустыми ценами
 * в массиве заменить пустые цены на 0
 * создать массив запросов изменения цены
 * обновить цены batch */

// Вызов https://restzg.ru/phpb24/Bitrix24-entity-operations/aProducts_Field_Values_Change.php

function aMain() {
    $arr_Order = [];
    $arr_Filter       = [
        '>ID' => '10000',];
    $arr_Fields       = [
        'ID',
        'NAME',
        'PRICE'];
    $arr_Products_IDs = batch_Fast_Gomzin(WEB_HOOK,
                                          'crm.product.list',
                                          $arr_Fields, $arr_Filter);
    // $arr_Products_IDs = jet_list(WEB_HOOK,
    //                                  'crm.product.list',
    //                              $arr_Fields);
}

aMain();
<?php
declare(strict_types=1);

require_once __DIR__ . '/lib_Bitrix24.php';

$File_Name = __DIR__ . '/webHookURL.txt';
define('WEB_HOOK',
       file_get_contents($File_Name));


function tasks_task_getFields_Test() {
    $arr_Task_Fields = b24request_Test(WEB_HOOK,
                                  'tasks.task.getFields',
                                  [])['result']['fields'];
}
function b24request_Test(string $url,
                    string $method,
                    array $queryData = []) {

    $queryUrl = $url . $method . '/';

    $curl = curl_init();

    curl_setopt_array(
        $curl,
        [
            CURLOPT_SSL_VERIFYPEER => false,
            CURLOPT_POST => true,
            CURLOPT_HEADER => false,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_URL => $queryUrl,
            CURLOPT_POSTFIELDS => http_build_query($queryData),
        ]
    );
    $result = curl_exec($curl);
    curl_close($curl);

    return json_decode($result,
                       true);
}
tasks_task_getFields_Test();
<?php
/** показать путь к файлу на серверк */
echo 'Document root: ' . $_SERVER['DOCUMENT_ROOT'] . '<br>';

echo 'Полный путь к скрипту и его имя: ' . $_SERVER['SCRIPT_FILENAME'] . '<br>';

echo 'Имя скрипта: ' . $_SERVER['SCRIPT_NAME'];



<?php

declare(strict_types=1);

require_once __DIR__ . '/lib_Php.php';

function array1D_Order_by_Array_Test()
{
    $arr_Ord = [
        0 => 'PROPERTY_485',
        1 => 'ID'];
    $arr_1d = [
        'ID'           => '495',
        'PROPERTY_485' => 'Массив',];

    // обычная
    $arr_Resu = array1D_Order_by_Array($arr_1d,
                                       $arr_Ord);
    // хорошо
    assert(reset($arr_Resu) == $arr_1d[array_key_last($arr_1d)]);
//    print_r($arr_Resu);

    // дальше assert не проходят, поэтому я их сделал !=
    // стрелочная
//     $arr_Resu = array_map(fn($key,
//                              $val) => [$arr_Ord[$key] => $arr_1d_[$val]],
//         array_keys($arr_Ord),
//         array_values($arr_Ord));
//
//     assert(reset($arr_Resu) != $arr_1d[array_key_last($arr_1d)]);
// //    print_r($arr_Resu);
//
//     // анонимная
//     $fu = function ($key,
//                     $val) {
//         return [$arr_Ord[$key] => $arr_1d_[$val]];
//     };
//
//     $arr_Resu = array_map($fu,
//                           array_keys($arr_Ord),
//                           array_values($arr_Ord));
//
//     assert(reset($arr_Resu) != $arr_1d[array_key_last($arr_1d)]);
//    print_r($arr_Resu);
}

function array1D_Order_by_Array_with_Substitution_Test()
{
    $arr_Ord = [
        0 => 'PROPERTY_485',
        1 => 'Новое',
        2 => 'ID'];
    $arr_1d = [
        'ID'           => '495',
        'PROPERTY_485' => 'Массив',];

    // обычная
    $arr_Resu = array1D_Order_by_Array_with_Substitution($arr_1d,
                                                         $arr_Ord);
    // хорошо
    assert(reset($arr_Resu) == $arr_1d[array_key_last($arr_1d)]);
}

/** упорядочить массив 2мерный по массив 1мерный */
function array2D_Order_by_Array_Test()
{
    $arr_Ord = [
        0 => 'PROPERTY_485',
        1 => 'ID',];

    $arr_2d = [
        0 => [
            'ID'           => '495',
            'PROPERTY_485' => 'Массив',],
        1 => [
            'ID'           => '496',
            'PROPERTY_485' => 'Массив',]];

    $arr_Resu = array2D_Order_by_Array($arr_2d,
                                       $arr_Ord);
//    print_r($arr_Resu);
    assert(is_array($arr_Resu));
}

function array1D_Order_by_Array_Flip(array $arr_1d_,
                                     array $arr_Ord): array
{
    return array_intersect_key($arr_1d_,
                               array_flip($arr_Ord));
}

function array1D_Order_by_Array_Flip_Test()
{
    $arr_Ord = [
        0 => 'PROPERTY_485',
        1 => 'ID'];
    $arr_1d_ = [
        'ID'           => '495',
        'PROPERTY_485' => 'Массив',];

    $arr_Resu = array1D_Order_by_Array_Flip($arr_1d_,
                                            $arr_Ord);

    assert(reset($arr_Resu) != $arr_1d_[array_key_last($arr_1d_)]);
//    print_r($arr_Resu);
}

function product_Value_by_FieldName()
{
    // $arr_Product;
    // $key;
    // $field;
    // $arr_Product_Fields;
    //
    // $result = product_Value_by_FieldName($arr_Product,
    //                                      $key,
    //                                      $field,
    //                                      $arr_Product_Fields);

}

function array_Search_Part_Test()
{
    $arr_Fields = [0 => 'x'];
    $sFind = 'z';
    $res = array_Search_Part($arr_Fields,
                             $sFind);
    assert(count($res) == 0);

    $arr_Fields = [0 => 'x', 1 => 'xz'];
    $res = array_Search_Part($arr_Fields,
                             $sFind);
    assert(count($res) == 1);
}

function array_Search_Recursive_Key_Neighb_Test()
{
    $array = [
        0 =>
            [
                'ID'         => '285',
                'CATALOG_ID' => '24',
                'SECTION_ID' => null,
                'NAME'       => 'ВЭД',
                'CODE'       => null,
                'XML_ID'     => null,
            ],
        1 =>
            [
                'ID'         => '481',
                'CATALOG_ID' => '24',
                'SECTION_ID' => null,
                'NAME'       => '09. Дыхательная техника со сжатым воздухом и сопутствующее оборудование',
                'CODE'       => null,
                'XML_ID'     => null,
            ],
        2 =>
            [
                'ID'         => '489',
                'CATALOG_ID' => '24',
                'SECTION_ID' => null,
                'NAME'       => '02. СИЗОД Промышленного назначения',
                'CODE'       => null,
                'XML_ID'     => null,
            ],];

    $key_Search = 'ID';
    $key_Return = 'NAME';

    $res = array_Search_Recursive_Key_Neighb($array,
                                             'NOTHING',
                                             'нечто',
                                             $key_Return);
    assert($res === null);

    $res = array_Search_Recursive_Key_Neighb($array,
                                             $key_Search,
                                             '285',
                                             $key_Return);
    assert($res == 'ВЭД');

    $res = array_Search_Recursive_Key_Neighb($array,
                                             $key_Search,
                                             '489',
                                             $key_Return);

    assert($res == '02. СИЗОД Промышленного назначения');

    $arrayX = [
        0 =>
            [
                0            => ['ID'   => '285',
                                 'NAME' => 'ВЭД',],
                'CATALOG_ID' => '24',
                'NAME'       => 'ВЭД',

            ],
        1 =>
            [
                'ID'   => '481',
                'NAME' => '09. Дыхательная техника со сжатым воздухом и сопутствующее оборудование',

            ],
        2 =>
            [
                'ID'         => '489',
                'CATALOG_ID' => '24',
                'SECTION_ID' => null,
                'NAME'       => '02. СИЗОД Промышленного назначения',
                'CODE'       => null,
                'XML_ID'     => null,
            ],];

    $res = array_Search_Recursive_Key_Neighb($arrayX,
                                             $key_Search,
                                             '285',
                                             $key_Return);
    assert($res == 'ВЭД');
}

function dateTime_Replace_2_Date_Test()
{
    echo __FUNCTION__ . PHP_EOL;

    $string = '';
    $str = dateTime_Replace_2_Date($string);
    assert($str === '');

    $string = 'z';
    $str = dateTime_Replace_2_Date($string);
    assert($str === 'z');

    $string = '2022-07-11T12:42:18+03:00';
    $str = dateTime_Replace_2_Date($string);
    assert($str === '2022-07-11');
}

function file_Clear_If_Test()
{
    echo __FUNCTION__ . PHP_EOL;

    $res = file_Clear_If(__DIR__ . DIRECTORY_SEPARATOR . 'log.txt', 1024);

    assert(isset($res));
}

function duplicates_Remove_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $array = [['id' => '22315', 'title' => 'ПРОМ'],
              ['id' => '22316', 'title' => 'ПРОМ'],
              ['id' => '22315', 'title' => 'ПРОМ']];
    $unique = [['id' => '22315', 'title' => 'ПРОМ'],
               ['id' => '22316', 'title' => 'ПРОМ'],];
    $uniqueArray = duplicates_Remove($array);
    assert($uniqueArray == $unique);
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
}

function string_Contains_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

    // Тест для функции string_Contains()

// Исходная строка для теста
    $haystack = 'Hello, World!';
// Подстрока, которую ожидаем найти
    $needle = 'World';

// Вызываем функцию string_Contains() с заданными параметрами
    $result = string_Contains($haystack, $needle);

    assert($result);

// Подстрока, которую ожидаем не найти
    $needle = 'world';

// Вызываем функцию string_Contains() с заданными параметрами
    $result = string_Contains($haystack, $needle, true); // Указываем true для учета регистра

// Сравниваем результат с ожидаемым результатом
    assert($result === false);

    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
}

function timeStamp_2_ISO8601_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $timestamp = '1682333235';

    $result = timeStamp_2_ISO8601($timestamp);
    echo 'time passed == ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
    assert($result == '2023-04-24T10:47:15+00:00');
}

function date_In_Range_Test()
{
    assert(date_In_Range('2022-01-01', '2022-01-31', '2022-01-15', '2022-02-15') === true);
    assert(date_In_Range('2022-01-01', '2022-01-31', '2022-02-01', '2022-02-15') === false);
    assert(date_In_Range('2022-01-01', '2022-01-31', '2021-12-15', '2021-12-31') === false);
    assert(date_In_Range('2022-01-01', '2022-01-31', '2021-12-15', '2022-01-15') === true);
}

date_In_Range_Test();
timeStamp_2_ISO8601_Test();
string_Contains_Test();
duplicates_Remove_Test();
file_Clear_If_Test();
dateTime_Replace_2_Date_Test();
array1D_Order_by_Array_Test();
array1D_Order_by_Array_with_Substitution_Test();
array2D_Order_by_Array_Test();
array1D_Order_by_Array_Flip_Test();
array_Search_Part_Test();
array_Search_Recursive_Key_Neighb_Test();
<?php

/** @noinspection PhpUnused */
declare(strict_types=1);

/**
 * для обработки и массивов и не массивов
 * чтобы не выдавалось предупреждений
 * когда в значение необязательно массив */
function implode_OR(
    string $separ,
           $array_Or)
{
    return (is_array($array_Or)) ? implode($separ,
                                           $array_Or) : $array_Or;
}

/** записать объект в файл, чтобы потом его прочитать в переменную */
function object_2_File($value,
                       string $filename): void
{
    $str_value = serialize($value);

    $f = fopen($filename,
               'w');
    fwrite($f,
           $str_value);
    fclose($f);
}

/** прочитать объект из файла в переменную */
function object_From_File(string $filename)
{
    return unserialize(
        file_get_contents($filename)
    );
}

/** Массив 2d упорядочить по образцу: массив 1мерный
 * если имя поля не нашлось, то вставить его с пустым значениеb
 */
function array2D_Order_by_Array(array $arr_2d,
                                array $arr_Ord): array
{
    $arr_Retu = [];

    foreach ($arr_2d as $arr_1d) {
        if (is_array($arr_1d)) {
            $arr_Retu[] = array1D_Order_by_Array_with_Substitution($arr_1d,
                                                                   $arr_Ord);
        }
    }
    return $arr_Retu;
}

/** Массив 1d упорядочить по образцу: массив 1мерный
 */
function array1D_Order_by_Array(array $arr_1d_,
                                array $arr_Ord): array
{
    $arr_Row_Key = [];

    foreach ($arr_Ord as $val) {
        if (isset($arr_1d_[$val])) {
            // $arr_Row_Key += [$arr_Ord[$key] => $arr_1d_[$val]];
            $arr_Row_Key += [$val => $arr_1d_[$val]];
        }
    }

    return $arr_Row_Key;
}

/** Массив 1d упорядочить по образцу: массив 1мерный
 * если имя поля не нашлось, то вставить его с пустым значениеb
 */
function array1D_Order_by_Array_with_Substitution(array $arr_1d_,
                                                  array $arr_Ord): array
{
    $arr_Row_Key = [];

    foreach ($arr_Ord as $val) {
        if (isset($arr_1d_[$val])) {
            $arr_Row_Key += [$val => $arr_1d_[$val]];
        } else {
            $arr_Row_Key += [$val => ''];
        }
    }
    return $arr_Row_Key;
}

/** показать путь к файлу на серверк */
function server_File_Path()
{
    echo 'Document root: ' . $_SERVER['DOCUMENT_ROOT'] . '<br>';
    echo 'Полный путь к скрипту и его имя: ' . $_SERVER['SCRIPT_FILENAME'] . '<br>';
    echo 'Имя скрипта: ' . $_SERVER['SCRIPT_NAME'];
}

// isset функциональый вариант 
/** @noinspection PhpParameterByRefIsNotUsedAsReferenceInspection */
function isset_Or(&$var,
                  $default = null)
{
    // return isset($var) ? $var : $default;
    return $var ?? $default;
}

/** по id вернуть value  */
function array_Value_by_Id(array  $arr2d,
                           string $name_Find,
                           string $value,
                           string $name_Return)
{
    // Для поиска по массиву списка
    //   $arr_List = {array} [4]
    // 0 = {array} [4]
    //  ID = "60077"
    //  VALUE = "223"
    // 1 = {array} [4]
    //  ID = "60079"
    //  VALUE = "44"
    foreach ($arr2d as $arr1d) {
        if ($arr1d[$name_Find] == $value) {
            return $arr1d[$name_Return];
        }
    }
    return '';
}

/** массив 1мерный последний элемент изменить
 * пример
 * $a = ['one' => 'apple', 'two' => 'orange', 'three' => 'pear'];
 * $a[array1d_Last($a)] = 'new';*/
function array1d_Last($array)
{
    end($array);
    return key($array);
}

// найти в массиве по частичному совпадению, вернуть ключ
function array_Search_Part(array  $array,
                           string $needle,
                           array  $keys = []): array
{
    $result = [];

    foreach ($array as $key => $value) {
        if (is_array($value)) {
            $second_result = array_Search_Part($value,
                                               $needle,
                                               $keys);
            $result = array_merge($result,
                                  $second_result);
            continue;
        }

        if (mb_strripos((string)$value,
                        $needle) !== false) {
            if (count($keys) > 0) {
                foreach ($keys as $val) {
                    $result[] = $array[$val];
                }
            } else {
                $result[] = $key;
            }
        }
    }
    return $result;
}

/**
 * в многомерном массиве найти ключ, вернуть соседний ключ
 * @noinspection PhpInconsistentReturnPointsInspection
 */
function array_Search_Recursive_Key_Neighb($array,
                                           $key_Search,
                                           $val_Search,
                                           $key_Return)
{
    if (ok_4($array,
             $key_Search,
             $val_Search,
             $key_Return)) {
        return $array[$key_Return];
    }

    if (is_array($array)) {
        foreach ($array as $item) {
            $result = array_Search_Recursive_Key_Neighb($item,
                                                        $key_Search,
                                                        $val_Search,
                                                        $key_Return);
            if (!is_null($result)) {
                return $result;
            }
        }
    }
}

/**
 * меnод для array_Search_Recursive_Key_Neighb
 */
function ok_4($array,
              $key_Search,
              $val_Search,
              $key_Return): bool
{
    if (isset($array[$key_Search])) {
        if ($array[$key_Search] == $val_Search) {
            if (isset($array[$key_Return])) {
                return true;
            }
        }
    }
    return false;
}

/** если строка датаВремя заменить на дату */
function dateTime_Replace_2_Date($string)
{
    if ($string === null) {
        return null;
    }

    // работало, но PHPStorm предложил улучшить $pattern = '/\d{4}\-\d{2}\-\d{2}T\d{2}:\d{2}:\d{2}\+\d{2}:\d{2}/i';
    $pattern = '/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\+\d{2}:\d{2}/i';

    return (preg_match($pattern,
                       $string)) ? substr($string,
                                          0,
                                          10) : $string;
}

/**
 * Масссив пуст?
 */
function array_Empty(array $array): bool
{
    foreach (new RecursiveIteratorIterator(new RecursiveArrayIterator($array)) as $value) {
        if ($value != '') {
            return false;
        }
    }
    return true;
}

function log_2($message,
               string $level = 'Info',
    $flags = FILE_APPEND,
               string $file = 'log.txt')
{
    // Текущая дата в формате 1970-12-01 23:59:59
    // $dateFormatted = (new DateTime())->format('Y-m-d H:i:s');
    $dateFormatted = date('Y-m-d H-i-s');

    // Собираем сообщение, подставив дату, уровень и текст из аргумента
    $text = sprintf(
        '[%s] %s: %s%s',
        $dateFormatted,
        $level,
        implode_If(';',
                   $message),
        PHP_EOL // Перенос строки
    );

    // Пишем в файл
    file_put_contents($file,
                      $text,
                      $flags);

    return $message;
}

function implode_recursive(string $separator,
                                  $array_Or_String): string
{
    $out = '';

    if (!is_array($array_Or_String)) {
        $out = $array_Or_String . $separator;
    } else {
        foreach ($array_Or_String as $av) {
            if (is_array($av)) {
                $out .= implode_recursive($separator,
                                          $av);
            } elseif ($out === '') {
                $out = $av . $separator;
            } else {
                $out .= $separator . $av;
            }
        }
    }

    return $out;
}

/**
 * implode, если массив
 */
function implode_If(string $delimiter,
                           $array_Or_String): string
{
    $result = [];

    if (is_array($array_Or_String)) {
        foreach ($array_Or_String as $item) {
            if (is_array($item)) {
                $result[] = implode_If($delimiter,
                                       $item);
            } else {
                $result[] = (string)$item;
            }
        }
    } else {
        $result = [$array_Or_String];
    }

    return implode($delimiter,
                   $result);
}

/**
 * очистить файл, если размер
 */
function file_Clear_If(string $file,
                       int    $size_Byte)
{
    if (file_exists($file)) {
        if (filesize($file) >= $size_Byte) {
            return file_put_contents($file,
                                     '');
        }
    }
    return false;
}


/**
 * проверить само существование всех файлов,
 * чтобы не городить проверки в других функциях
 */
function files_Exists(
    array $files,
    int   $seconds,
    int   $start
): bool
{
    $count = 0;

    do {
        if (file_exists($files[$count])) {
            $count++;
        } else {
            sleep(1);
        }

        if ((time() - $start) > $seconds) {
            break;
        }
    } while ($count < count($files));

    return $count === count($files);
}


/**
 * @return array|bool
 * @param int   $microseconds
 * @param array $files
 */
function files_Wait(int   $microseconds,
                    array $files)
{
    if (files_Exists($files,
                     22,
                     $microseconds)) {
        return true;
    } // для отладки

    error_EMail(__FUNCTION__,
                '');

    // if (!DEBUG) exit();

    return array_map('file_exists',
                     $files); //для отладки
}

/**
 * ошибка CRITICAL
 */
function error_EMail(
    string $method,
    string $description,
    string $mailto = 'mihail.popov@zelinskygroup.com'
): void
{
    $message =
        $_SERVER['SCRIPT_FILENAME'] . ', ' .
        $method . ', ' .
        $description . PHP_EOL;

    echo $message;

    // по любому в обычный лог
    log_2(
        $message,
        'CRITICAL'
    );

    // а если на хостинге, то и на почту
    if (php_sapi_name() != 'cli') {
        error_log(
            $message,
            1,
            $mailto
        );
    }
}

/**
 * Положить в буфер обмена текстовую двумерную таблицу для вставки в Excel
 * @return string
 * @param array $data
 */
function array_2_Table_ClipBoard(array $data): string
{
    $return = '';

    if (!isset($data[0])) {
        echo __FUNCTION__ . ' !isset($data[0]';
    } else {
        // Получаем заголовки столбцов
        $headers = array_keys($data[0]);

        // Создаем заголовок таблицы
        $table = "\t" . implode("\t",
                                $headers) . "\n";

        // Добавляем строки данных
        foreach ($data as $index => $row) {
            /** @noinspection PhpMethodOrClassCallIsNotCaseSensitiveInspection */
            $table .= $index . preg_replace('/\t+/',
                                            "\t",
                                            implode_if("\t",
                                                       $row)) . "\n";
        }

        // Кладем таблицу в буфер вывода
        clipBoard_Set($table);
        $return = $table;
    }
    return $return;
}

function clipBoard_Set(string $new): bool
{
    if (PHP_OS_FAMILY === 'Windows') {
        // works on windows 7 +
        $clip = popen('clip',
                      'wb');
    } elseif (PHP_OS_FAMILY === 'Linux') {
        // tested, works on ArchLinux
        $clip = popen('xclip -selection clipboard',
                      'wb');
    } elseif (PHP_OS_FAMILY === 'Darwin') {
        // untested!
        $clip = popen('pbcopy',
                      'wb');
    } else {
        exit('running on unsupported OS: ' . PHP_OS_FAMILY . ' - only Windows, Linux, and MacOS supported.');
    }
    $written = fwrite($clip,
                      $new);
    return (pclose($clip) === 0 && strlen($new) === $written);
}

/**
 * @return array массив без дублей значений
 *                     0 => array (
 *                     'id' => '22315',
 *                     'title' => 'ПРОМ',
 *                     )
 *                     1 => array (
 *                     'id' => '22316',
 *                     'title' => 'ПРОМ',
 *                     )
 * @param array $array 0 => array (
 *                     'id' => '22315',
 *                     'title' => 'ПРОМ',
 *                     )
 *                     1 => array (
 *                     'id' => '22316',
 *                     'title' => 'ПРОМ',
 *                     )
 *                     2 => array (
 *                     'id' => '22315',
 *                     'title' => 'ПРОМ',
 *                     )
 */
function duplicates_Remove(array $array): array
{
    // map потребляет памяти > 400 Мб
    $uniqueArray = [];
    foreach ($array as $value) {
        $serializedValue = serialize($value);
        if (!isset($uniqueArray[$serializedValue])) {
            $uniqueArray[$serializedValue] = $value;
        }
    }
    return array_values($uniqueArray);
}

/**
 * Проверяет, содержится ли подстрока в строке.
 *
 * @return bool Возвращает true, если подстрока содержится в строке, иначе false
 * @param bool   $case     Учитывать регистр (по умолчанию false)
 * @param string $haystack Исходная строка
 * @param string $needle   Подстрока, которую нужно найти
 */
function string_Contains(string $haystack,
                         string $needle,
                         bool   $case = false): bool
{
    if (!$case) {
        $haystack = mb_strtolower($haystack,
                                  'UTF-8');
        $needle = mb_strtolower($needle,
                                'UTF-8');
    }
    return mb_strpos($haystack,
                     $needle) !== false;
}

function timeStamp_2_ISO8601(string $timestamp): string
{
    // Преобразуем строку в числовое значение
    $timestamp = (int)$timestamp;

    // Получаем дату и время из временной метки
    /** @noinspection PhpUnhandledExceptionInspection */
    $date = new DateTime('@' . $timestamp);

    // Преобразуем дату и время в формат ISO 8601
    return $date->format('Y-m-d\TH:i:sP');
}

function array_2_Dictionary_DECORATOR(array $array,
                                            $key): array
{
    $check = array_Key_Values_Unique($array,
                                     $key);

    if ($check) {
        return array_2_Dictionary($array,
                                  $key);
    } else {
        error_EMail(__FUNCTION__,
                    $key);
        exit();
    }
}

/**
 * Вернуть массив дубликатов значений, с указанием ключей, имеющих дубликаты.
 * Если дубликатов нет, то вернуть true.
 * @return array|bool
 *                     =[
 *                     5=>[0,1],
 *                     6=>[2,3]];
 * @param array $array = [
 *                     0 => ['ID' => 5],
 *                     1 => ['ID' => 5],
 *                     2 => ['ID' => 6],
 *                     3 => ['ID' => 6],
 *                     4 => ['ID' => 2]];
 * @param       $key   = 'ID';
 */
function array_Key_Values_Unique(array $array,
                                       $key)
{
    $result = [];
    $duplicateKeys = [];

    foreach ($array as $index => $item) {
        if (isset($item[$key])) {
            $value = $item[$key];

            // Если значение уже есть в списке дубликатов, то пропускаем этот элемент
            if (isset($duplicateKeys[$value])) {
                continue;
            }

            // Иначе проверяем дубликаты этого значения в оставшихся элементах массива
            for ($i = $index + 1; $i < count($array); $i++) {
                if ($value == $array[$i][$key]) {
                    $result[$value][] = $index;
                    $result[$value][] = $i;
                    $duplicateKeys[$value] = true;
                    break;
                }
            }
        }
    }
    return (empty($result))
        ? true
        : $result;
}


/** Сделать ключом поле $key
 * @return array = = [
 *                     1 = [
 *                     'ID'=> 1,
 *                     'XML_ID' => '17362571']]
 * @param array $array = [
 *                     0 = [
 *                     'ID'=> 1,
 *                     'XML_ID' => '17362571']]
 * @param       $key   = 'ID'
 */
function array_2_Dictionary(array  $array,
                            string $key): array
{
    $dict = [];
//    $lost = [];
    foreach ($array as $value) {
        if (isset($value[$key])) {
            $dict[$value[$key]] = $value;
//        } else {
//            $lost[] = $value;
        }
    }
    return $dict;
}

/**
 * Дата начала квартала
 *
 * @return false|string
 * @param string $year
 * @param string $quarter
 */
function quarter_start(string $year,
                       string $quarter)
{
    return date('Y-m-d',
                strtotime($year . '-' . (1 + ($quarter - 1) * 3) . '-1'));
}

/**
 * Квартал, последний день
 *
 * @return false|string
 * @param string $year
 * @param string $quarter
 */
function quarter_Stop_(string $year,
                       string $quarter)
{
    $month = 1 + ($quarter - 1) * 3 + 2;
    return date('Y-m-t',
                strtotime($year . '-' . $month));
}

function year_Day_Last(string $year): string
{
    return date('Y-m-d',
                strtotime($year . '-12-31'));
}

function year_Day_First(string $year): string
{
    return date('Y-m-d',
                strtotime($year . '-1-1'));
}

/**
 * Попадает ли хоть один день из диапазона дат от $date_Start по $date_Stop
 * в диапазон от $range_Start по $range_Stop_.
 * Всё включительно.
 *
 * @return bool
 * @param  $date_Start
 * @param  $date_Stop
 * @param  $range_Start
 * @param  $range_Stop
 */
function date_In_Range($range_Start,
                       $range_Stop,
                       $date_Start,
                       $date_Stop): bool
{
    return $date_Start <= $range_Stop && $date_Stop >= $range_Start;
}

function unlink_If(string $file)
{
    if (file_exists($file)) unlink($file);
}
<?php

require_once 'crest_SRP.php';
require_once 'lib_Bitrix24.php';

//Пример callBatch https://dev.1c-bitrix.ru/rest_help/crm/cases/add/form_lead_with_crm_mode.php

//$arData = [
//    'add_lead' => [
//        'method' => 'crm.lead.add',
//        'params' => [
//            'fields'    =>  [
//                'TITLE' => 'From the site: ' . implode(' ', [$sName, $sLastName]),
//                'NAME' => (!empty($sName)) ? $sName : 'Empty name',//if simple mode crm NAME or LAST_NAME required for converting to contact
//                'LAST_NAME' => $sLastName,
//                'PHONE' => (!empty($sPhone)) ? array(array('VALUE' => $sPhone, 'VALUE_TYPE' => 'HOME')) : array(),
//                'EMAIL' => (!empty($sEmail)) ? array(array('VALUE' => $sEmail, 'VALUE_TYPE' => 'HOME')) : array()
//            ]
//        ]
//    ],
//    'get_lead' => [
//        'method' => 'crm.lead.get',
//        'params' => [
//            'id' => '$result[add_lead]'
//        ]
//    ],
//];
//$result = CRest::callBatch($arData);

function batch_SRP_RUN(): void
{
    $arData=[];

    //    $arData = [
////        'company' => [
////            'method' => 'crm.company.get',
////            'params' => [
////                'id' => 13519
////            ]
////        ],
////        $arr_Fields = [
////            'ID' => $comp_ID,
////            'fields' => [$uf_Into_Name => $bool]];
////    // компанию обновляю с паузой
////    $resu = b24request($webHookURL, 'crm.company.update', $arr_Fields)
//
////      61575; // значение Нет в UF_CRM_1660889613
////      61573; // значение Да  в UF_CRM_1660889613
//        'update' => [
//            'method' => 'crm.company.update',
//            'params' => [
//                'ID' => 13519,
//                // инвертирую
//                //'fields' => ['UF_CRM_1660889613' => check_Print($result['company']['UF_CRM_1548155934428']) ? 'Нет' : 'Да'] // "В компании есть номенклатурный справочник список";
//                'fields' => ['UF_CRM_1660889613' => 61573]
//            ]
//        ],
//    ];

//    $arData = company_UserFields_Mass_Add_Array();

    $result = batch_SRP($arData);

//    echo '<PRE>';
//    print_r($result['result']);
//    echo '</PRE>';
    array_2_File($result, 'batch_Result.txt');
    assert($result['result']['result']['update'] == 1);
}

function company_UserFields_Mass_Add_Array(): array
{
    // уже отработала

    $arr_Name = ['В компании есть номенклатурный справочник список',
        'Потребность СИЗОД ПРОМ список',
        'Потребность СИЗОД ГО список',
        'Потребность СИЗОД Пожарные самоспасатели список',
        'Потребность СИЗОД ДАСВ список',
        'Потребность СИЗОД Шахтные самоспасатели список',
        'Участвует в рассылке список',
        'Поставить компанию на отслеживание список',
        'Потребность СИЗОД Байонет список',
        'Потребность СИЗОД Резьба список',
        'Потребность СИЗОД Легкие фильтрующие список',
        'Повторное обращение список',
        'Сделка закрыта список',
        'Заявка по эл.почте список',
        'СМП список',
        'делимый лот список',];

    $method = 'crm.company.userfield.add';
    $arr_Return = [];
    $count = count($arr_Name);

    for ($i = 0; $i < $count; $i++) {

        $uf_Name = russian_2_Latin_Transliterate(mb_substr($arr_Name[$i], 0, 7)) .
            string_Random('0123459789', 6);

        $arr_One = ['call_' . $i => [
            'method' => $method,
            'params' => [
                'FIELD_NAME' => $uf_Name,
                'EDIT_FORM_LABEL' => $arr_Name[$i],
                'LIST_COLUMN_LABEL' => $arr_Name[$i],
                'USER_TYPE_ID' => 'enumeration',
                'LIST' => [['VALUE' => 'Да'], ['VALUE' => 'Нет']],
                'SETTINGS' => ['DEFAULT_VALUE' => 'не выбрано'],
            ]]];

        $arr_Return = array_merge($arr_Return, $arr_One);

    }
    return $arr_Return;
}

// Запуск тестов
//batch_SRP_RUN();
//array_2_file(company_UserFields_Mass_Add_Array(), 'company_UserFields_Mass_Add_Array.txt');


<?php

// https://github.com/bitrix-tools/crest

declare(strict_types=1);

require_once(__DIR__ . '/settings.php');

/**
 * @version 1.36
 *  define:
 *      C_REST_WEB_HOOK_URL = 'https://rest-api.bitrix24.com/rest/1/doutwqkjxgc3mgc1/'  //url on creat Webhook
 *      or
 *      C_REST_CLIENT_ID = 'local.5c8bb1b0891cf2.87252039' //Application ID
 *      C_REST_CLIENT_SECRET = 'SakeVG5mbRdcQet45UUrt6q72AMTo7fkwXSO7Y5LYFYNCRsA6f'//Application key
 *
 *        C_REST_CURRENT_ENCODING = 'windows-1251'//set current encoding site if encoding unequal UTF-8 to use iconv()
 *      C_REST_BLOCK_LOG = true //turn off default logs
 *      C_REST_LOGS_DIR = __DIR__ .'/logs/' //directory path to save the log
 *      C_REST_LOG_TYPE_DUMP = true //logs save var_export for viewing convenience
 *      C_REST_IGNORE_SSL = true //turn off validate ssl by curl
 */
class CRest
{
    const VERSION = '1.36';
    const BATCH_COUNT = 50;//count batch 1 query
    const TYPE_TRANSPORT = 'json';// json or xml

    /**
     * call where install application even url
     * only for rest application, not webhook
     */

    public static function installApp()
    {
        $result = [
            'rest_only' => true,
            'install'   => false
        ];
        if ($_REQUEST['event'] == 'ONAPPINSTALL' && !empty($_REQUEST['auth'])) {
            $result['install'] = static::setAppSettings($_REQUEST['auth'], true);
        } elseif ($_REQUEST['PLACEMENT'] == 'DEFAULT') {
            $result['rest_only'] = false;
            $result['install'] = static::setAppSettings(
                [
                    'access_token'      => htmlspecialchars($_REQUEST['AUTH_ID']),
                    'expires_in'        => htmlspecialchars($_REQUEST['AUTH_EXPIRES']),
                    'application_token' => htmlspecialchars($_REQUEST['APP_SID']),
                    'refresh_token'     => htmlspecialchars($_REQUEST['REFRESH_ID']),
                    'domain'            => htmlspecialchars($_REQUEST['DOMAIN']),
                    'client_endpoint'   => 'https://' . htmlspecialchars($_REQUEST['DOMAIN']) . '/rest/',
                ],
                true
            );
        }

        static::setLog(
            [
                'request' => $_REQUEST,
                'result'  => $result
            ],
            'installApp'
        );
        return $result;
    }

    /**
     * @return mixed array|string|boolean curl-return or error
     *
     * @var $arParams array
     *                $arParams = [
     *                'method'    => 'some rest method',
     *                'params'    => []//array params of method
     *                ];
     */
    protected static function callCurl($arParams)
    {
        if (!function_exists('curl_init')) {
            return [
                'error'             => 'error_php_lib_curl',
                'error_information' => 'need install curl lib'
            ];
        }
        $arSettings = static::getAppSettings();
        if ($arSettings !== false) {
            if (isset($arParams['this_auth']) && $arParams['this_auth'] == 'Y') {
                $url = 'https://oauth.bitrix.info/oauth/token/';
            } else {
                $url = $arSettings["client_endpoint"] . $arParams['method'] . '.' . static::TYPE_TRANSPORT;
                if (empty($arSettings['is_web_hook']) || $arSettings['is_web_hook'] != 'Y') {
                    $arParams['params']['auth'] = $arSettings['access_token'];
                }
            }

            $sPostFields = http_build_query($arParams['params']);

            try {
                $obCurl = curl_init();
                curl_setopt($obCurl, CURLOPT_URL, $url);
                curl_setopt($obCurl, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($obCurl, CURLOPT_POSTREDIR, 10);
                curl_setopt($obCurl, CURLOPT_USERAGENT, 'Bitrix24 CRest PHP ' . static::VERSION);
                if ($sPostFields) {
                    curl_setopt($obCurl, CURLOPT_POST, true);
                    curl_setopt($obCurl, CURLOPT_POSTFIELDS, $sPostFields);
                }
                curl_setopt(
                    $obCurl,
                    CURLOPT_FOLLOWLOCATION,
                    (isset($arParams['followlocation']))
                        ? $arParams['followlocation'] : 1
                );
                if (defined("C_REST_IGNORE_SSL") && C_REST_IGNORE_SSL === true) {
                    curl_setopt($obCurl, CURLOPT_SSL_VERIFYPEER, false);
                    curl_setopt($obCurl, CURLOPT_SSL_VERIFYHOST, false);
                }
                $out = curl_exec($obCurl);
                $info = curl_getinfo($obCurl);
                if (curl_errno($obCurl)) {
                    $info['curl_error'] = curl_error($obCurl);
                }
                if (static::TYPE_TRANSPORT == 'xml' && (!isset($arParams['this_auth']) || $arParams['this_auth'] != 'Y'))//auth only json support
                {
                    $result = $out;
                } else {
                    $result = static::expandData($out);
                }
                curl_close($obCurl);

                if (!empty($result['error'])) {
                    if ($result['error'] == 'expired_token' && empty($arParams['this_auth'])) {
                        $result = static::GetNewAuth($arParams);
                    } else {
                        $arErrorInform = [
                            'expired_token'          => 'expired token, cant get new auth? Check access oauth server.',
                            'invalid_token'          => 'invalid token, need reinstall application',
                            'invalid_grant'          => 'invalid grant, check out define C_REST_CLIENT_SECRET or C_REST_CLIENT_ID',
                            'invalid_client'         => 'invalid client, check out define C_REST_CLIENT_SECRET or C_REST_CLIENT_ID',
                            'QUERY_LIMIT_EXCEEDED'   => 'Too many requests, maximum 2 query by second',
                            'ERROR_METHOD_NOT_FOUND' => 'Method not found! You can see the permissions of the application: CRest::call(\'scope\')',
                            'NO_AUTH_FOUND'          => 'Some setup error b24, check in table "b_module_to_module" event "OnRestCheckAuth"',
                            'INTERNAL_SERVER_ERROR'  => 'Server down, try later'
                        ];
                        if (!empty($arErrorInform[$result['error']])) {
                            $result['error_information'] = $arErrorInform[$result['error']];
                        }
                    }
                }
                if (!empty($info['curl_error'])) {
                    $result['error'] = 'curl_error';
                    $result['error_information'] = $info['curl_error'];
                }

                static::setLog(
                    [
                        'url'    => $url,
                        'info'   => $info,
                        'params' => $arParams,
                        'result' => $result
                    ],
                    'callCurl'
                );

                return $result;
            } catch (Exception $e) {
                static::setLog(
                    [
                        'message' => $e->getMessage(),
                        'code'    => $e->getCode(),
                        'trace'   => $e->getTrace(),
                        'params'  => $arParams
                    ],
                    'exceptionCurl'
                );

                return [
                    'error'                => 'exception',
                    'error_exception_code' => $e->getCode(),
                    'error_information'    => $e->getMessage(),
                ];
            }
        } else {
            static::setLog(
                [
                    'params' => $arParams
                ],
                'emptySetting'
            );
        }

        return [
            'error'             => 'no_install_app',
            'error_information' => 'error install app, pls install local application '
        ];
    }

    /**
     * Generate a request for callCurl()
     *
     * @return mixed array|string|boolean curl-return or error
     * @var $params array method params
     * @var $method string
     */

    public static function call($method, $params = [])
    {
        $arPost = [
            'method' => $method,
            'params' => $params
        ];
        if (defined('C_REST_CURRENT_ENCODING')) {
            $arPost['params'] = static::changeEncoding($arPost['params']);
        }

        $result = static::callCurl($arPost);
        return $result;
    }

    /**
     * @return array
     *
     * @var $arData array
     * @var $halt   integer 0 or 1 stop batch on error
     * @example $arData:
     *              $arData = [
     *              'find_contact' => [
     *              'method' => 'crm.duplicate.findbycomm',
     *              'params' => [ "entity_type" => "CONTACT",  "type" => "EMAIL", "values" => array("info@bitrix24.com") ]
     *              ],
     *              'get_contact' => [
     *              'method' => 'crm.contact.get',
     *              'params' => [ "id" => '$result[find_contact][CONTACT][0]' ]
     *              ],
     *              'get_company' => [
     *              'method' => 'crm.company.get',
     *              'params' => [ "id" => '$result[get_contact][COMPANY_ID]', "select" => ["*"],]
     *              ]];
     */
    public static function callBatch($arData, $halt = 0)
    {
        $arResult = [];
        if (is_array($arData)) {
            if (defined('C_REST_CURRENT_ENCODING')) {
                $arData = static::changeEncoding($arData);
            }
            $arDataRest = [];
            $i = 0;
            foreach ($arData as $key => $data) {
                if (!empty($data['method'])) {
                    $i++;
                    if (static::BATCH_COUNT >= $i) {
                        $arDataRest['cmd'][$key] = $data['method'];
                        if (!empty($data['params'])) {
                            $arDataRest['cmd'][$key] .= '?' . http_build_query($data['params']);
                        }
                    }
                }
            }
            if (!empty($arDataRest)) {
                $arDataRest['halt'] = $halt;
                $arPost = [
                    'method' => 'batch',
                    'params' => $arDataRest
                ];
                $arResult = static::callCurl($arPost);
            }
        }
        return $arResult;
    }

    /**
     * Getting a new authorization and sending a request for the 2nd time
     *
     * @return array query result from $arParams
     *
     * @var $arParams array request when authorization error returned
     */

    private static function GetNewAuth($arParams)
    {
        $result = [];
        $arSettings = static::getAppSettings();
        if ($arSettings !== false) {
            $arParamsAuth = [
                'this_auth' => 'Y',
                'params'    =>
                    [
                        'client_id'     => $arSettings['C_REST_CLIENT_ID'],
                        'grant_type'    => 'refresh_token',
                        'client_secret' => $arSettings['C_REST_CLIENT_SECRET'],
                        'refresh_token' => $arSettings["refresh_token"],
                    ]
            ];
            $newData = static::callCurl($arParamsAuth);
            if (isset($newData['C_REST_CLIENT_ID'])) {
                unset($newData['C_REST_CLIENT_ID']);
            }
            if (isset($newData['C_REST_CLIENT_SECRET'])) {
                unset($newData['C_REST_CLIENT_SECRET']);
            }
            if (isset($newData['error'])) {
                unset($newData['error']);
            }
            if (static::setAppSettings($newData)) {
                $arParams['this_auth'] = 'N';
                $result = static::callCurl($arParams);
            }
        }
        return $result;
    }

    /**
     * @return boolean
     * @var $isInstall  boolean true if install app by installApp()
     * @var $arSettings array settings application
     */

    private static function setAppSettings($arSettings, $isInstall = false)
    {
        $return = false;
        if (is_array($arSettings)) {
            $oldData = static::getAppSettings();
            if ($isInstall != true && !empty($oldData) && is_array($oldData)) {
                $arSettings = array_merge($oldData, $arSettings);
            }
            $return = static::setSettingData($arSettings);
        }
        return $return;
    }

    /**
     * @return mixed setting application for query
     */

    private static function getAppSettings()
    {
        if (defined("C_REST_WEB_HOOK_URL") && !empty(C_REST_WEB_HOOK_URL)) {
            $arData = [
                'client_endpoint' => C_REST_WEB_HOOK_URL,
                'is_web_hook'     => 'Y'
            ];
            $isCurrData = true;
        } else {
            $arData = static::getSettingData();
            $isCurrData = false;
            if (
                !empty($arData['access_token']) &&
                !empty($arData['domain']) &&
                !empty($arData['refresh_token']) &&
                !empty($arData['application_token']) &&
                !empty($arData['client_endpoint'])
            ) {
                $isCurrData = true;
            }
        }

        return ($isCurrData) ? $arData : false;
    }

    /**
     * Can overridden this method to change the data storage location.
     *
     * @return array setting for getAppSettings()
     */

    protected static function getSettingData()
    {
        $return = [];
        if (file_exists(__DIR__ . '/settings.json')) {
            $return = static::expandData(file_get_contents(__DIR__ . '/settings.json'));
            if (defined("C_REST_CLIENT_ID") && !empty(C_REST_CLIENT_ID)) {
                $return['C_REST_CLIENT_ID'] = C_REST_CLIENT_ID;
            }
            if (defined("C_REST_CLIENT_SECRET") && !empty(C_REST_CLIENT_SECRET)) {
                $return['C_REST_CLIENT_SECRET'] = C_REST_CLIENT_SECRET;
            }
        }
        return $return;
    }

    /**
     * @return string json_encode with encoding
     * @var $encoding boolean true - encoding to utf8, false - decoding
     *
     * @var $data     mixed
     */
    protected static function changeEncoding($data, $encoding = true)
    {
        if (is_array($data)) {
            $result = [];
            foreach ($data as $k => $item) {
                $k = static::changeEncoding($k, $encoding);
                $result[$k] = static::changeEncoding($item, $encoding);
            }
        } else {
            if ($encoding) {
                $result = iconv(C_REST_CURRENT_ENCODING, "UTF-8//TRANSLIT", $data);
            } else {
                $result = iconv("UTF-8", C_REST_CURRENT_ENCODING, $data);
            }
        }

        return $result;
    }

    /**
     * @return string json_encode with encoding
     * @var $debag boolean
     *
     * @var $data  mixed
     */
    protected static function wrapData($data, $debag = false)
    {
        if (defined('C_REST_CURRENT_ENCODING')) {
            $data = static::changeEncoding($data, true);
        }
        $return = json_encode($data, JSON_HEX_TAG | JSON_HEX_AMP | JSON_HEX_APOS | JSON_HEX_QUOT);

        if ($debag) {
            $e = json_last_error();
            if ($e != JSON_ERROR_NONE) {
                if ($e == JSON_ERROR_UTF8) {
                    return 'Failed encoding! Recommended \'UTF - 8\' or set define C_REST_CURRENT_ENCODING = current site encoding for function iconv()';
                }
            }
        }

        return $return;
    }

    /**
     * @return string json_decode with encoding
     * @var $debag boolean
     *
     * @var $data  mixed
     */
    protected static function expandData($data)
    {
        $return = json_decode($data, true);
        if (defined('C_REST_CURRENT_ENCODING')) {
            $return = static::changeEncoding($return, false);
        }
        return $return;
    }

    /**
     * Can overridden this method to change the data storage location.
     *
     * @return boolean is successes save data for setSettingData()
     * @var $arSettings array settings application
     */

    protected static function setSettingData($arSettings)
    {
        return (boolean)file_put_contents(__DIR__ . '/settings.json', static::wrapData($arSettings));
    }

    /**
     * Can overridden this method to change the log data storage location.
     *
     * @return boolean is successes save log data
     * @var $type   string to more identification log data
     * @var $arData array of logs data
     */

    public static function setLog($arData, $type = '')
    {
        $return = false;
        if (!defined("C_REST_BLOCK_LOG") || C_REST_BLOCK_LOG !== true) {
            if (defined("C_REST_LOGS_DIR")) {
                $path = C_REST_LOGS_DIR;
            } else {
                $path = __DIR__ . '/logs/';
            }
            $path .= date("Y-m-d/H") . '/';

            if (!file_exists($path)) {
                @mkdir($path, 0775, true);
            }

            $path .= time() . '_' . $type . '_' . rand(1, 9999999) . 'log';
            if (!defined("C_REST_LOG_TYPE_DUMP") || C_REST_LOG_TYPE_DUMP !== true) {
                $jsonLog = static::wrapData($arData);
                if ($jsonLog === false) {
                    $return = file_put_contents($path . '_backup.txt', var_export($arData, true));
                } else {
                    $return = file_put_contents($path . '.json', $jsonLog);
                }
            } else {
                $return = file_put_contents($path . '.txt', var_export($arData, true));
            }
        }
        return $return;
    }

    /**
     * check minimal settings server to work CRest
     * @return array of errors
     * @var $print boolean
     */
    public static function checkServer($print = true)
    {
        $return = [];

        //check curl lib install
        if (!function_exists('curl_init')) {
            $return['curl_error'] = 'Need install curl lib.';
        }

        //creat setting file
        file_put_contents(__DIR__ . '/settings_check.json', static::wrapData(['test' => 'data']));
        if (!file_exists(__DIR__ . '/settings_check.json')) {
            $return['setting_creat_error'] = 'Check permission! Recommended: folders: 775, files: 664';
        }
        unlink(__DIR__ . '/settings_check.json');
        //creat logs folder and files
        $path = __DIR__ . '/logs/' . date("Y-m-d/H") . '/';
        if (!mkdir($path, 0775, true) && !file_exists($path)) {
            $return['logs_folder_creat_error'] = 'Check permission! Recommended: folders: 775, files: 664';
        } else {
            file_put_contents($path . 'test.txt', var_export(['test' => 'data'], true));
            if (!file_exists($path . 'test.txt')) {
                $return['logs_file_creat_error'] = 'check permission! recommended: folders: 775, files: 664';
            }
            unlink($path . 'test.txt');
        }

        if ($print === true) {
            if (empty($return)) {
                $return['success'] = 'Success!';
            }
            echo '<pre>';
            print_r($return);
            echo '</pre>';
        }

        return $return;
    }
}
<?php

require_once __DIR__ . '/vendor/autoload.php';
require_once __DIR__ . '/lib_Bitrix24.php';
require_once 'aMain_UF_update_02.php';

function uf_Batch_Update_Test()
{

    global $WEB_HOOK;

    $arr2d_Fields_Pair_listLabels = [
        ['COMPANY_TYPE', 'UF_CRM_1662558139'],
    ];

    uf_Batch_Update($arr2d_Fields_Pair_listLabels);

}

function array_Compare_If_Less_Batch_Test()
{
    global $WEB_HOOK;

    $field = 'UF_CRM_1616502587';

    $uf = batch_Fast_Gomzin($WEB_HOOK,
                            'crm.company.list',
                            [$field],
                            []);

    $csv = file_CSV_2_Array('o:\+PME\_Arrange\Битрикс24 ЗГ\Годовой бюджет СИЗОД пром.csv');

    $assertion = array_Compare_If_Less_Batch($uf,
                                             $csv,
                                             $field);
    assert(count($assertion));
}

function company_fields_Diff_Test()
{
    global $WEB_HOOK;

    $arr2d_fields_pair = [
        ['COMPANY_TYPE', 'UF_CRM_1662558139'],
    ];

    // вытягиваю массив 2мерный, чтобы использовать в получении списка компаний с нужными полями
    $arr1d_Fields  = array2d_2_1d($arr2d_fields_pair);
    $arrX_Companys = batch_Fast_Gomzin($WEB_HOOK,
                                       'crm.company.list',
                                       $arr1d_Fields,
                                       []);

    $field_Sour = 'COMPANY_TYPE';
    $field_Dest = 'UF_CRM_1662558139';

    $result = company_fields_Diff($arrX_Companys,
                                  $field_Sour,
                                  $field_Dest);

    array_2_File_DateTime($result,
                          'company_fields_Diff_Test');
}

//uf_Batch_Update_Test();

//array_Compare_If_Less_Batch_Test();
//ufs_Csv_update('UF_CRM_1616502587'); // UF_CRM_1616502587 Годовой бюджет СИЗОД пром
// company_fields_Diff_Test();
// array_Compare_If_Less_Batch_Test();
uf_Batch_Update_Test();
﻿<?php

$G_NOO_SFERA = [];
Массив_Полей_Компании_Из_Гуглтаблицы($noo_Sfera);
Лог_Выход($noo_Sfera);
Массив_Полей_Компании_В_Битрикс24($noo_Sfera);


Function Массив_Полей_Компании_Из_Гуглтаблицы(array &$Noo_Sfera){

}
Function Лог_Выход(array &$Noo_Sfera){

}
Function Массив_Полей_Компании_В_Битрикс24(array &$Noo_Sfera){

}

<?php
// uf = user field
// Обновляет по одному, массовое обновление в companys_UF_Update_batch.php

require_once __DIR__ . '/vendor/autoload.php';
require_once __DIR__ . '/lib_Bitrix24.php';

use App\Bitrix24\Bitrix24API;

$file_Name = __DIR__ . '/webHookURL.txt';
$WEB_HOOK = file_get_contents($file_Name);

$BX24 = new Bitrix24API($WEB_HOOK);

/** компании ПП тип флаг положить в тип список */
function aUF_Update_Flag_2_List_Batch(Bitrix24API $bx24,
                                string $uf_From_Name,
                                string $uf_Into_Name,
                                int $list_ID_0,
                                int $list_ID_1,
                                int $id_Start): void
{
    global $WEB_HOOK;
    log_2_File('1 Этап;' . __FUNCTION__ . ';' . PHP_EOL);
    $gen_Companys = company_List_fetch($bx24, $uf_From_Name, $uf_Into_Name, $id_Start);

    log_2_File('3 Этап.; Начинаю foreach ($gen_Companys as $companies)' . PHP_EOL);
    foreach ($gen_Companys as $companies) {
        log_2_File('4 Этап.; Начинаю foreach ($companies as $company)' . PHP_EOL);
        foreach ($companies as $company) {
            log_2_File('5 Этап.; Начинаю company_UF_Flag_2_List_Update, companyID:' . $company['ID'] . PHP_EOL);
            company_UF_Flag_2_List_Update($company['ID'], $uf_From_Name, $uf_Into_Name, $list_ID_0, $list_ID_1, $WEB_HOOK);
        }
    }
}

/** компания, обовить ПП флаг в лист */
function company_UF_Flag_2_List_Update(int $comp_ID,
                                       string $uf_From_Name,
                                       string $uf_Into_Name,
                                       int $list_ID_0,
                                       int $list_ID_1,
                                       string $webHookURL): void
{
    //  в Битрикс24 поле список обновляется через обновление ID

// Структура поля список 'UF_CRM_1660889613'; // В компании есть номенклатурный справочник список:

//    array (
//        0 =>
//            array (
//                'ID' => '61573',
//                'SORT' => '10',
//                'VALUE' => 'Да',
//                'DEF' => 'N',
//            ),
//        1 =>
//            array (
//                'ID' => '61575',
//                'SORT' => '20',
//                'VALUE' => 'Нет',
//                'DEF' => 'N',
//            ),
//        2 =>
//            array (
//                'ID' => '61577',
//                'SORT' => '30',
//                'VALUE' => 'Не заполнено',
//                'DEF' => 'Y',
//            ),
//    )
    $etap = 6;
//    log_2_File($etap++ . ' Этап.; Внутри у company_UF_Flag_2_List_Update' . PHP_EOL);

    $arr_Company = b24request($webHookURL, 'crm.company.get', ['ID' => $comp_ID])['result'];

//    log_2_File($etap++ . ' Этап.; Получил $arr_Company:' . PHP_EOL);

    // взять значение из поля "В компании есть номенклатурный справочник" - 0 = Нет 1 = Да
    $bool = $arr_Company[$uf_From_Name]; // 0 или 1
    $bool = ($bool == 0) ? $list_ID_0 : $list_ID_1;
    $list = $arr_Company[$uf_Into_Name]; // 61573 - Да, 61575 - Нет, 61577 - Не заполнено

//    log_2_File($etap++ . ' Этап.; Внутри $bool=' . $bool . ', $list=' . $list . PHP_EOL);

    if ($bool != $list) {
        // $resu = $bx24->updateCompany($comp_ID, [$uf_Into_Name => $bool]);
        $arr_Fields = [
            'ID' => $comp_ID,
            'fields' => [$uf_Into_Name => $bool]];
        // компанию обновляю с паузой
        $resu = b24request($webHookURL, 'crm.company.update', $arr_Fields)['result'];

        if (!$resu) {
            /** @noinspection PhpUnusedLocalVariableInspection */
            log_2_File($etap++ . ' Этап.; Ошибка: $resu = false. $comp_ID:' . $comp_ID . PHP_EOL);
            // $stop = true; /** @noinspection PhpUnusedLocalVariableInspection */
        } else {
            /** @noinspection PhpUnusedLocalVariableInspection */
            log_2_File($etap++ . ' Этап.; Обновил компанию:' . $comp_ID . PHP_EOL);
        }
    }
}


<?php

declare(strict_types=1);

require_once __DIR__ . '/aTasks_IN_Work.php';

aChain();
<?php

/**
 * Методы для работы с crest php Битрикс24
 * @link https://github.com/bitrix-tools/crest/blob/master/src/crest.php
 */

/**
 * Документации для метода batch
 * @link https://dev.1c-bitrix.ru/rest_help/general/batch.php
 * Особенности списочных методов и пакетного метода Batch
 * @link https://dev.1c-bitrix.ru/rest_help/general/lists.php
 */
declare(strict_types=1);

require_once __DIR__ . '/crest.php';

/**
 * Выгрузить всех записи метода пакетно
 *
 * @return array
 * @param array  $params
 * @param int    $start
 * @param int    $limit
 * @param string $method
 */
function list_Batch(string $method,
                    array  $params,
                    int    $start,
                    int    $limit = 50): array
{
    $total = result_total($method);

    if ($total < 1) {
        error_EMail($method, '$total < 0');
        exit();
    }

    return batch_While($start, $method, $params, $limit);
}

/**
 * @return array
 * @param string $method
 * @param array  $params
 * @param int    $limit
 * @param int    $start
 */
function batch_While(int    $start,
                     string $method,
                     array  $params,
                     int    $limit): array
{
    $result = [];

    $ok = true;

    $batches = [];

    while ($ok) {
        // массив $limit * $limit запросов
        $batch = batch_Limit($method,
                             $params,
                             $start,
                             $limit);

        $batches = array_merge($batches, $batch); // потом удали

        $batch_Result = CRest::callBatch($batch);

        if (isset($batch_Result['result']['result'])) {
            $result = array_merge($result,
                                  $batch_Result['result']['result']);
        }

        /**
         * Бывает что, последний вернушийся элемент больше чем $start += $limit * $limit
         */
        $start = start_Choice($start, $limit, $batch, $batch_Result);

        $ok = isset($batch_Result['result']['result'][0]['tasks'][0]['id']);
    }

    // для отладки
    // inArray($batches);
    return $result;
}

/**
 * @return int следующий ID для batch
 * @param int   $limit
 * @param array $batch
 * @param array $batch_Result
 * @param int   $start
 */
function start_Choice(int   $start,
                      int   $limit,
                      array $batch,
                      array $batch_Result): int
{
    $start += $limit * $limit;

    $last = last_Value($batch, $batch_Result);
    if (is_numeric($last)) {
        $start = $last + 1;
    }
    return $start;
}


/**
 * @return false|mixed вынес отдельно цепочку проверок
 * @param array $batch_Result
 * @param array $batch
 */
function last_Value(array $batch, array $batch_Result)
{
    $return = false;

    if (isset($batch[0]['params']['order']['ID'])) {
        if ($batch[0]['params']['order']['ID'] == 'asc') {
            if (isset($batch_Result['result']['result'])) {
                $max1 = count($batch_Result['result']['result']) - 1;
                // $max1 = array_Key_Max($batch_Result['result']['result'], 'id');
                if (isset($batch_Result['result']['result'][$max1]['tasks'])) {
                    // $max2 = count($batch_Result['result']['result'][$max1]['tasks']) - 1;
                    $max2 = index_Key_Exist($batch_Result['result']['result'][$max1]['tasks'], 'id');
                    if (isset($batch_Result['result']['result'][$max1]['tasks'][$max2]['id'])) {
                        $return = $batch_Result['result']['result'][$max1]['tasks'][$max2]['id'];
                    }
                }
            }
        }
    }
    return $return;
}


/**
 * вернуть масссив без строк с повторяющимися значениями ключей $keys
 * @return array [0 => [ * 'id'    => '1',
 *              'title' => 'Заполнить профиль',],
 *              1 => ['id'    => '6',
 *              'title' => 'Заполнить профиль',],];
 * @param array $keys
 * @param array $array [0 => ['id' => '1',
 *                     'title' => 'Заполнить профиль',],
 *                     2 => ['id' => '6',
 *                     'title' => 'Заполнить профиль',],
 *                     3 => ['id' => '1',
 *                     'title' => 'Заполнить профиль',],];
 */
function array_Duplicate_by_Keys_Delete(array $array, array $keys): array
{
    $unique_array = [];

    foreach ($array as $row) {
        $unique_key = [];

        foreach ($keys as $key) {
            if (isset($row[$key])) {
                $unique_key[] = $row[$key];
            }
        }

        $unique_key = implode('_', $unique_key);

        if (!isset($unique_array[$unique_key])) {
            $unique_array[$unique_key] = $row;
        }
    }

    return array_values($unique_array);
}

/**
 * @return false или ключ, содержащий последний $key
 * @param       $key   'id'
 * @param array $array если массив такой [
 *                     0 => ['id' = 'не важно'],
 *                     1 => []] то вернуть 0
 */
function index_Key_Exist(array $array, $key)
{
    $keyLast = false;
    foreach ($array as $item => $value) {
        if (isset($value[$key])) {
            $keyLast = $item;
        } else {
            break;
        }
    }
    return $keyLast;
}

/**
 * Рекурсивный обход массива многомерного.
 *
 * @return mixed Максимальное значение ключа $key в массиве или false.
 * @param array  $array Массив многомерный.
 * @param string $key   Ключ, для которого нужно найти максимальное значение.
 */
function array_Key_Max(array $array, string $key)
{
    $maxValue = false; // Переменная для хранения максимального значения

    foreach ($array as $value) {
        if (isset($value[$key])) {
            $maxValue = max($value[$key], $maxValue);
        } elseif (is_array($value)) {
            $maxValue = max(array_Key_Max($value, $key), $maxValue);
        }
    }
    return $maxValue;
}


/**
 * @return array Пакетный запрос одной порции
 *
 * @param array  $params
 * @param int    $start
 * @param int    $limit
 * @param string $method
 */
function batch_Limit(string $method,
                     array  $params,
                     int    $start,
                     int    $limit): array
{
    $batch_Limit = [];

    for ($key = 0; $key < $limit; $key++) {
        $batch_Limit[$key] = batch_1($start, $params, $method);

        $start += $limit;
    }
    return $batch_Limit;
}

/**
 * @return array один batch
 * @param array  $params
 * @param string $method
 * @param int    $count
 */
function batch_1(int    $count,
                 array  $params,
                 string $method): array
{
    $add = ['filter' =>
                ['>=ID' => $count],
            'start'  => -1,]; // без пагинации

    $params_add = array_merge($params,
                              $add);

    return ['method' => $method,
            'params' => $params_add];
}

/**
 * @return int Если $count + $limit > $total, то
 *             вернуть $total - $count,
 *             иначе вернуть $limit.
 *             Например:
 *             $count = 0, $total = 3, $limit = 5
 *             вернуть 3.
 *             $count = 0, $total = 5, $limit = 4
 *             вернуть 4.
 * @param int $start
 * @param int $total
 * @param int $limit
 */
function diff(int $start, int $total, int $limit): int
{
    return (($start + $limit) > $total)
        ? ($total - $start)
        : $limit;
}

/**
 * сколько записей вернёт метод. Если неудача, то -1
 */
function result_total(string $method): int
{
    $query = [
        '01' => [
            'method' => $method,
            'params' => ['select' => ['ID'],]
        ]
    ];

    $arr = CRest::callBatch($query);

    return $arr['result']['result_total']['01'] ?? -1;
}

function batch_Results_2_Array($arrays): array
{
    $result = [];
    foreach ($arrays as $array) {
        foreach ($array['tasks'] as $task) {
            $result[] = $task;
    // избавься от повторов по полям
        }
    }

    return $result;
}

<?php
declare(strict_types=1);

function abs_($x) {
    return ($x > 0) ? $x :
        ($x == 0 ? 0 :
            -$x);
}

/** $x1 < $x2 */
function less($x1,
              $x2): bool {
    return $x1 < $x2;
}

/** $x1 > $x2 */
function more($x1,
              $x2): bool {
    return $x1 > $x2;
}

/** аргументы равны */
function equa(...$args): bool {

    foreach ($args as $arg) {

        if (!isset($arg_prev)) $arg_prev = $arg;

        if ($arg_prev != $arg) return false;

        $arg_prev = $arg;
    }
    return true;
}

/** логическое И для любого колва аругментов */
function and_(...$args): bool {
    foreach ($args as $arg) {
        if (!$arg) return false;
    }
    return true;
}
/** логическое ИЛИ для любого колва аругментов */
function or_(...$args): bool {
    foreach ($args as $arg) {
        if ($arg) return true;
    }
    return false;
}

// echo abs_(-3) . abs_(0) . abs_(3);
// assert(equa(1,
//             1,
//             1,
//             1,
//             1));

 // assert(and_(1, 0));

echo and_(more(1,2), less(1,2));


<?php
declare(strict_types=1);

// Вызов https://restzg.ru/phpb24/Bitrix24-entity-operations/aCompanys_2_GoogleSheet.php

const FILE_CREDENTIALS = __DIR__ . '/popov-php-bitrix24-zg-20220603-a1df757bd724.json';
define('WEB_HOOK', file_get_contents('webHookURL.txt'));

// require_once __DIR__ . '/vendor/autoload.php';
// require_once __DIR__ . '/crest_SRP.php';
// require_once __DIR__ . '/lib_Bitrix24.php';
// require_once __DIR__ . '/lib_Php.php';
// require_once __DIR__ . '/google_Sheets.php';
//
// use App\Bitrix24\Bitrix24API;
//
// // use Google\Service\Sheets\UpdateValuesResponse;
// $BX24 = new Bitrix24API(WEB_HOOK);
//
// /**
//  * поместить компании Битрикс24 в гугл таблицу
//  * $arr1d_ListLabels - человечьи названия полей */
// function b24_Companys_2_Google_Sheet(string $sheet_Name,
//                                      string $googleSheet_spreadSheets_ID,
//                                      string $file_Credentials,
//                                      array $arr1d_ListLabels,
//                                      bool $clear) {
//
//     $arr_2_Sheet = b24_Companys_2_Array2D_From_Fields_Russian($arr1d_ListLabels, WEB_HOOK);
//     log_2_File('Массив для вставки в диапазон ' . (count($arr_2_Sheet) > 0) ? 'подготовлен' : 'ПУСТ');
//
//     if (!array_Empty($arr_2_Sheet)) {
//
//         if ($clear) {
//             googleSheet_Range_Clear($sheet_Name . 'A3:AWZ',
//                                     $googleSheet_spreadSheets_ID,
//                                     $file_Credentials);
//             log_2_File('Диапазон очищен');
//         }
//
//         array_Companies_2_Google_Sheet($arr_2_Sheet,
//                              $sheet_Name,
//                              $googleSheet_spreadSheets_ID,
//                              $file_Credentials);
//         log_2_File('Таблица вставлена. Программа завершена');
//     }
// }
//
// /**
//  * Запуск - вставить продукты в гугл таблицу
//  */
// function b24_Companys_2_Google_Sheet_RUN() {
//
//     $sheet_Name      = 'Битрикс24 Компании 2022-12-26!';
//     $spread_Sheet_Id = '1HhDntSA619JnVoAR0gkM7Mz68GifPID16o6bdmJohJ0';
//
//     /** названия полей взять из гуглтаблицы */
//     $arr1d_ListLabels = googleSheet_Range_2_Array($sheet_Name . '1:1',
//                                                   $spread_Sheet_Id,
//                                                   FILE_CREDENTIALS)['values'][0];
//     if (count($arr1d_ListLabels) > 0) {
//         log_2_File('Заголовки из таблицы загружены');
//     } else {
//         log_2_File('Заголовки из таблицы НЕ загружены');
//     }
//
//     b24_Companys_2_Google_Sheet($sheet_Name . 'A2',
//                                 $spread_Sheet_Id,
//                                 FILE_CREDENTIALS,
//                                 $arr1d_ListLabels,
//                                 true);
// }
//
// b24_Companys_2_Google_Sheet_RUN();
//

// массив_2_ГуглТаблицу(
//     диапазон_Очистить(
//         массив_Заполнить(
//             компании_Список(
//                 массив_Заголовки(
//                     гуглТаблица ID,
// 					диапазон_Вставки,
// 					диапазон_Очистки)))))

require_once 'aCompanys_2_GoogleSheet_Methods.php';

// array_Companies_2_Google_Sheet(
//     range_Clear(
//         array_Companies_Fill(
//             companies_List(
//                 companies_Fields_Title_2_Key(
//                     companies_Fields_List(
//                         array_Headers_from_Google_Sheet(
//                             '1HhDntSA619JnVoAR0gkM7Mz68GifPID16o6bdmJohJ0',
//                             'Битрикс24 Компании 2022-12-26!',
//                             '1:1',
//                             'A2',
//                             WEB_HOOK,
//                             FILE_CREDENTIALS)))))));




<?php
// https://wersis.ru/bitrix24/webhook-deal-update/
// Обработаем входные данные, потому что мало ли что

$deal_id = 33477;
$element_id = 171;
$result = array(
    'result' => 1,
    'time' => array(
        'start' => 1,
        'finish' => 1,
        'duration' => 1,
        'processing' => 1,
        'date_start' => 1,
        'date_finish' => 1,
        'operating' => 1,
    )
);

// Если есть оба IDа -работаем
if ($deal_id > 0 && $element_id > 0) {

    // Запрос текущего состояния сделки
    // Ручное исправление, посмотри может ошибка
    $hook = file_get_contents('webHookURL.txt') . '/crm.deal.get.json?id=' . $deal_id;
    $rc = curl_request($hook);

    // Если запрос удался - работаем
    if ($rc['json']->result->ID == $deal_id) {

        // обновляю
        $uf = $rc['json']->result->UF_CRM_1654498701;
        $rc['json']->result->UF_CRM_1654498701 = 60583;

        $request = array(
            'id' => $deal_id,
            'fields' => array(
//                "UF_CRM_1654498701" => array_unique($rc['json']->result->UF_CRM_1654498701)
                "UF_CRM_1654498701" => 60583
// строго уникальные значения

            ),
        );

// Запишем в сделку новое значение поля

        $hook = file_get_contents('webHookURL.txt') . 'crm.deal.update.json?';
        $hook .= http_build_query($request);
        $rc = curl_request($hook);

        print_r($rc);

    } else {
        $result = array(
            'error' => '',
            'error_description' => 'Deal "' . $_REQUEST['deal'] . '" not found'
        );
    }
} else {
    $result = array(
        'error' => '',
        'error_description' => 'Wrong parameters "deal" or "element"'
    );
}

print json_encode($result);


// Функция отправки запроса в Битрикс24

function curl_request($current_url)
{
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $current_url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_POST, 0);
    curl_setopt($ch, CURLOPT_VERBOSE, true);
    $output = curl_exec($ch);
    $x = curl_getinfo($ch);
    $rc = array(

//'result' => $output,

        'json' => json_decode($output),

//'info' => $x

    );
    curl_close($ch);
    return $rc;
}
<?php
/**
 * Компания обновить годовой оборот
 */


declare(strict_types=1);

define('WEB_HOOK', file_get_contents('webHookURL.txt'));

function aRun(){

}

aRun();
<?php
/** @noinspection PhpUnused */

/** @noinspection PhpUnusedParameterInspection */
declare(strict_types=1);

require_once __DIR__ . '/lib_Php.php';
require_once __DIR__ . '/lib_Batch_Fast.php';

/** Константы CRM
 * @link https://dev.1c-bitrix.ru/rest_help/crm/constants.php
 * @param string $message
 * @param string $level
 * @param string $file_Log
 */

// в вызываемом файле используй типа set_include_path('../../../PHP Bitrix24 Library/');
//$WEB_HOOK = file_get_contents('webHookURL.txt', true);

function log_2_File(string $message,
                    string $level = 'Info',
                    string $file_Log = 'log.txt'): void
{
    // Текущая дата в формате 1970-12-01 23:59:59
    // $dateFormatted = (new DateTime())->format('Y-m-d H:i:s');
    $dateFormatted = date('Y-m-d H-i-s');

    // Собираем сообщение, подставив дату, уровень и текст из аргумента
    $message = sprintf(
        '[%s] %s: %s%s',
        $dateFormatted,
        $level,
        $message,
        PHP_EOL // Перенос строки
    );

    // Пишем в файл
    file_put_contents($file_Log,
                      $message,
                      FILE_APPEND);
    // FILE_APPEND - позволяет добавлять записи к существующим,
    // не затирая старые логи
    echo $message;
}

/** найти значение, вернуть поле ID
 * @noinspection PhpInconsistentReturnPointsInspection
 */
function id_by_Value(array  $arr2d,
                     string $value)
{
    // Для поиска по массиву списка
    //   $arr_List = {array} [4]
    // 0 = {array} [4]
    //  ID = "60077"
    //  VALUE = "223"
    // 1 = {array} [4]
    //  ID = "60079"
    //  VALUE = "44"

    foreach ($arr2d as $arr1d) {
        if ($arr1d['VALUE'] == $value) {
            return $arr1d['ID'];
        }
    }
}

function product_Value_by_Id(array  $arr2d,
                             string $id): string
{
    // Для поиска по массиву списка
    //   $arr_List = {array} [4]
    // 0 = {array} [4]
    //  ID = "60077"
    //  VALUE = "223"
    // 1 = {array} [4]
    //  ID = "60079"
    //  VALUE = "44"

    $str_Return = '';
    foreach ($arr2d as $arr1d) {
        if (isset($arr1d['values'][$id])) {
            $str_Return = $arr1d['values'][$id]['VALUE'];
        }
    }

    // if (is_string($str_Return) == false) {
    //     // $stop = true;
    // }
    return $str_Return;
}

/** найти в массиве по ключу и значению, вернуть из сосседнего ключа
 * @noinspection PhpInconsistentReturnPointsInspection
 */
function array_field_By(array  $arr2d,
                        string $field_Find,
                        string $field_Retu,
                               $value)
{ //
    // Для поиска по массиву списка
    //   $arr_List = {array} [4]
    // 0 = {array} [4]
    //  ID = "60077"
    //  VALUE = "223"
    // 1 = {array} [4]
    //  ID = "60079"
    //  VALUE = "44"

    foreach ($arr2d as $arr1d) {
        if ($arr1d[$field_Find] == $value) {
            return $arr1d[$field_Retu];
        }
    }
}

/** найти значение в одном поле, а вернуть значение другого поля */
function field_by_Field(array  $arr2d,
                        string $find,
                        string $valu,
                        string $retu)
{
    foreach ($arr2d as $arr1d) {
        if ($arr1d[$find] == $valu) {
            return $arr1d[$retu];
        }
    }
    return 'НЕ найдено';
}

/** Поиск по вложенным массивам
 * @noinspection PhpUnusedParameterInspection
 * @noinspection PhpUnusedLocalVariableInspection
 */
function array_Nested_Search(array $array,
                                   $search,
                                   $mode = 'value'): bool
{
    foreach (new RecursiveIteratorIterator(new RecursiveArrayIterator($array)) as $value) {
        /** @noinspection PhpVariableVariableInspection */
        if ($search === ${${'mode'}}) {
            return true;
        }
    }
    return false;
}

/** Поиск значений во вложенном массиве, вернуть ключ значения
 * @noinspection PhpUnusedParameterInspection
 */
function array_Nested_Search_Value(array  $array,
                                          $search,
                                   string $mode = 'value')
{
    foreach (new RecursiveIteratorIterator(new RecursiveArrayIterator($array)) as $key => $value) {
        /** @noinspection PhpVariableVariableInspection */
        if ($search === ${${'mode'}}) {
            return $key;
        }
    }
    return false;
}

/** найти ID по имени пп, например UF_CRM_1602662883400 смотри более новый uf_ID_by_Name*/
function crm_Deal_UserField_ID_by_Name(string $uf_name,
                                       string $webHookURL): int
{
//    $params = [
//        ['order' => ["SORT" => "ASC"]],
//        ['filter' => ['LANG' => 'ru']] // чтобы русские имена были в названиях полей
//    ];

    $arr_UF = b24request($webHookURL,
                         'crm.deal.userfield.list',
                         [$uf_name])['result'];

    $arr_ids = array_filter($arr_UF,
        function ($k) use (
            $uf_name
        )
        {
            return $k['FIELD_NAME'] === $uf_name;
        });

    $arr_ID = array_first($arr_ids);
//    var_dump($arr_ID);

    return $arr_ID['ID'];
}

/** найти ID по имени пп, например UF_CRM_1602662883400 запросом метода типа .userfield.list */
function uf_ID_by_Name(string $webHookURL,
                       string $method,
                       string $uf_name,
                       int    $sleep_Time = 300000)
{ //$method = типа 'crm.deal.userfield.list' или crm.company.userfield.list

//    $params = [
//        ['order' => ["SORT" => "ASC"]],
//        ['filter' => ['LANG' => 'ru']] // чтобы русские имена были в названиях полей
//    ];

    $arr_UF = b24request($webHookURL,
                         $method,
                         [$uf_name],
                         $sleep_Time)['result'];

    $arr_ids = array_filter($arr_UF,
        function ($k) use (
            $uf_name
        )
        {
            return $k['FIELD_NAME'] === $uf_name;
        });

    $arr_ID = array_first($arr_ids);
//    var_dump($arr_ID);

    return $arr_ID['ID'];
}

/** Запрос в Битрикс24 REST API с паузой в микросекундах */
function b24request(string $url,
                    string $method,
                    array  $queryData = [],
                    int    $sleep_Time = 300000)
{
    // 300000 микросекунд. Проверил - реально Битрикс24 не банит за частоту запросов REST.

    $return = [];

    $queryUrl = $url . $method . '/';

    static $curl;
    if (empty($curl)) {
        $curl = curl_init();
    }

    curl_setopt_array(
        $curl,
        [
            CURLOPT_SSL_VERIFYPEER => false,
            CURLOPT_POST           => true,
            CURLOPT_HEADER         => false,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_URL            => $queryUrl,
            CURLOPT_POSTFIELDS     => http_build_query($queryData),
        ]
    );
    $result = curl_exec($curl);
    // curl_close($curl);

    if ($sleep_Time > 0) {
        $time_last = microtime(true);
        sleep_Till($time_last,
                   $sleep_Time);
    }

    if (!is_string($result)) {
        error_EMail(__FUNCTION__, '!is_string($result)');
    } else {
        $return = json_decode($result,
                              true);
    }

    return $return;
}

/** пауза плавающая, чтобы не тупить лишнего */
function sleep_Till(float $time_Last,
                    float $microSeconds): void
{
    $time_Next = $time_Last + $microSeconds;
    $how_match = $time_Next - microtime(true);
    if ($how_match > 0) {
        // log_2_File('Пауза секунд $how_match: ' . round($how_match /1000000,2) . PHP_EOL);
        usleep((int)$how_match);
    }
}

function array_first(array $array,
                           $default = null)
{   // вернуть первый элемент массива
    // null возвращать некошерно
    foreach ($array as $item) {
        return $item;
    }
    return $default;
}

/** массив в файл */
function array_2_File(array  $arr,
                      string $file,
                      int    $flags = 0)
{
    return file_put_contents(
        $file,
        print_r($arr,
                true),
        $flags);
}

function array_2_File_DateTime(array  $arr,
                               string $file)
{
    $file = $file . ' ' . date('Y-m-d H-i-s') . '.txt';

    return array_2_File($arr,
                        $file);
}

/** Прошло ли время с последней проверки */
function time_4_Show(float $seconds): bool
{
    $result = false;
    static $seconds_Last = 0;
    $seconds_Now = microtime(true);

    if ($seconds_Last === 0) {
        $seconds_Last = $seconds_Now;
    }

    if ($seconds_Now - $seconds_Last >= $seconds) {
        $seconds_Last = $seconds_Now;
        $result = true;
    }

    return $result;
}

/** @noinspection PhpUnused */
function array2D_2_Screen(array $arr2D,
                          int   $column_Width_Max = 30,
                          int   $rows_Count_Max = 3)
{ // массив 2мерный вывести на экран, с учётом нелатинских символов

    if ($column_Width_Max == 0) {
        $column_Width_Max = 30;
    }

    if ($rows_Count_Max == -1) {
        $rows_Count_Max = count($arr2D);
    }
    if ($rows_Count_Max == 0) {
        $rows_Count_Max = 3;
    }

    $rows_Count = 1;

    foreach ($arr2D as $row) {
        if (is_array($row)) {
            foreach ($row as $cell) {
                $string = $cell . str_pad('',
                                          $column_Width_Max);
                $string = mb_substr($string,
                                    0,
                                    $column_Width_Max,
                                    'UTF-8') . ' ';

                print_r($string);
            }
        } else {
            $string = $row . str_pad('',
                                     $column_Width_Max);
            $string = mb_substr($string,
                                0,
                                $column_Width_Max,
                                'UTF-8') . ' ';

            print_r($string);
        }

        if (++$rows_Count > $rows_Count_Max) {
            break;
        }

        print_r(PHP_EOL);
    }
}

/** Транслитерация строк */

function russian_2_Latin_Transliterate(string $russian): string
{
    $converter = [
        'а' => 'a',
        'б' => 'b',
        'в' => 'v',
        'г' => 'g',
        'д' => 'd',
        'е' => 'e',
        'ё' => 'yo',
        'ж' => 'zh',
        'з' => 'z',
        'и' => 'i',
        'й' => 'y',
        'к' => 'k',
        'л' => 'l',
        'м' => 'm',
        'н' => 'n',
        'о' => 'o',
        'п' => 'p',
        'р' => 'r',
        'с' => 's',
        'т' => 't',
        'у' => 'u',
        'ф' => 'f',
        'х' => 'h',
        'ц' => 'c',
        'ч' => 'ch',
        'ш' => 'sh',
        'щ' => 'sch',
        'ь' => '',
        'ы' => 'y',
        'ъ' => '',
        'э' => 'e',
        'ю' => 'yu',
        'я' => 'ya',

        'А' => 'A',
        'Б' => 'B',
        'В' => 'V',
        'Г' => 'G',
        'Д' => 'D',
        'Е' => 'E',
        'Ё' => 'Yo',
        'Ж' => 'Zh',
        'З' => 'Z',
        'И' => 'I',
        'Й' => 'Y',
        'К' => 'K',
        'Л' => 'L',
        'М' => 'M',
        'Н' => 'N',
        'О' => 'O',
        'П' => 'P',
        'Р' => 'R',
        'С' => 'S',
        'Т' => 'T',
        'У' => 'U',
        'Ф' => 'F',
        'Х' => 'H',
        'Ц' => 'C',
        'Ч' => 'Ch',
        'Ш' => 'Sh',
        'Щ' => 'Sch',
        'Ь' => '',
        'Ы' => 'Y',
        'Ъ' => '',
        'Э' => 'E',
        'Ю' => 'Yu',
        'Я' => 'Ya',
        ' ' => '_',
    ];
    return strtr($russian,
                 $converter);
}

/** генерация строки из набора символов нужнйо длины */
function string_Random(string $characters,
                       int    $length): string
{
    $retu = '';

    for ($i = 0; $i < $length; $i++) {
        $retu = $retu . substr(str_shuffle($characters),
                               0,
                               1);
    }

    return $retu;
}

/** массив полей пользовательских компании
 * @noinspection PhpUnused
 */
function company_Userfield_List(string $webHook,
                                       $sleep_Time = 0): array
{
    $order = ['SORT' => 'ASC'];
    $filter = ['LANG' => 'ru'];

    static $arr;
    if (!is_array($arr)) {
        $arr = b24request($webHook,
                          'crm.company.userfield.list',
                          [$order, $filter],
                          $sleep_Time);
    }
    return $arr;
}

/** компания по id */
function company_Get(string $webHookURL,
                     int    $id,
                            $sleep_Time = 300000): array
{ // $id = 13519 - Тестовая компания
    return b24request($webHookURL,
                      'crm.company.get',
                      ['ID' => $id],
                      $sleep_Time);
}

/** Возвращает описание полей компании, в том числе пользовательских. */
function company_Fields(string $webHookURL,
                               $sleep_Time = 0): array
{
    return b24request($webHookURL,
                      'crm.company.fields',
                      [],
                      $sleep_Time);
}

/** компания вернуть массив 1мерный title по названию listLabel*/
function array1d_UserField_Title_by_listLabel(array $arr1d_Company_Fields,
                                              array $arr1d_ListLabels): array
{
    $arr_Titles = [];
    foreach ($arr1d_ListLabels as $listLabel) {
        $title = company_UserField_Title_by_listLabel($arr1d_Company_Fields,
                                                      $listLabel);

        $arr_Titles[] = ($title == '') ? $listLabel : $title;
    }
    return $arr_Titles;
}

/** вернуть массив 1мерный title по названию listLabel
 * если title не найден, то беру listLabel
 */
function products_userFields_Title_by_listLabel(array $arr1d_Fields,
                                                array $arr1d_ListLabels): array
{
    $arr_Titles = [];

    // У всех ключей есть title, а у CREATED_DATE нет!
    $arr1d_Fields['CREATED_DATE']['title'] = 'Дата создания';

    foreach ($arr1d_ListLabels as $listLabel) {
        foreach ($arr1d_Fields as $key => $arr_Field) {
            if ($arr_Field['title'] == $listLabel) {
                $arr_Titles[] = $key;
                break;
            }
        }
        if ($arr_Titles[array1d_Last($arr_Titles)] != $key) {
            $arr_Titles[] = $listLabel;
        }
    }
//    if (count(array_Search_Part($arr1d_Fields,
//                                'Раздел (уровень ')) > 0) {
    $arr_Titles[] = 'SECTION_ID';
//    }
    return $arr_Titles;
}

/**
 * вернуть массив 1мерный title по названию listLabel
 */
function products_userFields_Title_by_listLabel_Bingo(array $arr1d_Fields,
                                                      array $arr1d_ListLabels): array
{
    $arr_Titles = [];

    // У всех ключей есть title, а у CREATED_DATE нет!
    $arr1d_Fields['CREATED_DATE']['title'] = 'Дата создания';

    foreach ($arr1d_ListLabels as $listLabel) {
        foreach ($arr1d_Fields as $key => $arr_Field) {
            if ($arr_Field['title'] == $listLabel) {
                $arr_Titles[] = $key;
                break;
            }
        }
    }
    return $arr_Titles;
}

/** Компании: по массив 2мерный listlabels вернуть массив 2мерный Titles*/
function array2d_UF_Title_by_listLabel(array $arr1d_Company_Fields,
                                       array $arr2d_ListLabels): array
{
    $arr2d_Titles = $arr2d_ListLabels;

    foreach ($arr2d_Titles as &$arr1D) {
        foreach ($arr1D as &$value) {
            $title = company_UserField_Title_by_listLabel($arr1d_Company_Fields,
                                                          $value);
            if ($title != '') {
                $value = $title;
            }
        }
    }
    return $arr2d_Titles;
}

/**
 * компания: узнать служебное имя пользовательского поля title по названию
 */
function product_UserField_Title_by_listLabel(array  $arr_Fields,
                                              string $listLabel): string
{
    foreach ($arr_Fields as $value) {
        if (isset($value['title'])) {
            if ($value['title'] == $listLabel) {
                return $value;
            }
        }
    }
    return '';
}

/**
 * компания: узнать служебное имя пользовательского поля title по названию
 */
function company_UserField_Title_by_listLabel(array  $arr_Company_Fields,
                                              string $listLabel): string
{
    foreach ($arr_Company_Fields as $value) {
        if (isset($value['listLabel'])) {
            if ($value['listLabel'] == $listLabel) {
                return $value['title'];
            }
        }
    }
    return '';
}

/** по имени поля списка вернуть ID значения  */
function userField_IDs(array  $arr_Company_Fields,
                       string $uf_Name,
                       string $value): int
{
    // массив для контроля поиска id значения списка в field_name.txt

    if (isset($arr_Company_Fields[$uf_Name]['items'])) {
        $arr_items = $arr_Company_Fields[$uf_Name]['items'];

        if (isset($arr_items[0]['VALUE'])) {
            return ($arr_items[0]['VALUE'] == $value) ?
                $arr_items[0]['ID'] :
                $arr_items[1]['ID'];
        }
    }
    return 0;
}

/** @noinspection PhpInconsistentReturnPointsInspection
 * @noinspection PhpMethodOrClassCallIsNotCaseSensitiveInspection
 */
function company_List_fetch($bx24,
                            string $uf_From_Name,
                            string $uf_Into_Name,
                            int $id_Start): generator
{
    log_2_File('company_List_fetch: $bx24->fetchCompanyList($filter, $select)' . PHP_EOL);

    $filter = ['>ID' => $id_Start];
    $select = ['ID', 'TITLE', $uf_From_Name, $uf_Into_Name];
    return $bx24->fetchCompanyList($filter,
                                   $select);
}

/** batch Быстрый метод list
 * @noinspection PhpUnusedLocalVariableInspection
 */
function batch_Fast_Gomzin(string $hook,
                           string $method,
                           array  $select_fields,
                           array  $filter = []): array
{
    // https://dev.1c-bitrix.ru/support/forum/messages/forum48/topic140616/message684232/?result=vote4user#message684232
    // если сущностей более 125 000, нужно увеличить уровень вложенности.

    //----------запрос общего количества-----------
    $queryUrl = $hook . $method;
    $queryData = http_build_query([
                                      'order'  => ['ID' => 'asc'],
                                      'filter' => ['>ID' => 0],
                                      'select' => ['ID'],
                                  ]);
    $curl = curl_init();
    curl_setopt_array($curl,
                      [
                          CURLOPT_SSL_VERIFYPEER => 0,
                          CURLOPT_POST           => 1,
                          CURLOPT_HEADER         => 0,
                          CURLOPT_RETURNTRANSFER => 1,
                          CURLOPT_URL            => $queryUrl,
                          CURLOPT_POSTFIELDS     => $queryData,
                      ]);
    $result = curl_exec($curl);
    curl_close($curl);
    $result = json_decode($result,
                          true);
    $total = $result['total'];

//----------расчеты количества-----------
    $pack_limit = 50;
    $pack_limit_prev = $pack_limit - 1;
    $requests_value = ceil($total / $pack_limit);          //количество запросов
    $batch_value = ceil($requests_value / $pack_limit); //количество батчей
    $batch_levels = [];
    $counter = $requests_value;
    while ($counter > $pack_limit) {
        $counter = ceil($counter / $pack_limit);
        $batch_levels[] = $counter; //количество батчей каждого уровня
    }
    if (!($batch_levels)) {
        $batch_levels[0] = 1; //если все поместится в 1 батч
    }

//----------формируем запросы в батчи-----------
    $e = 1;
    $id_Counter = 0;
    $start = 0;
    $batches = [];
    while ($e <= $batch_value) {
        if ($requests_value > $pack_limit) {
            $inbatch_requests = $pack_limit;
            $requests_value = $requests_value - $pack_limit; //сколько еще запросов осталось запаковать
        } else {
            $inbatch_requests = $requests_value;
        }
        //формируем батч
        $batch = ['halt' => 0, 'cmd' => []];
        $i = 1;
        $start_param = $start; //для первого запроса в батче - задаем значение параметра start
        while ($i <= $inbatch_requests) {
            $batch['cmd']['list' . $i] = $method . '?'
                . http_build_query([
                                       'order'  => ['ID' => 'asc'],
                                       'filter' => ['>ID' => $id_Counter],
                                       'select' => $select_fields,
                                       'start'  => $start_param,
                                   ]);
            $id_Counter = '$result[list' . $i . '][' . $pack_limit_prev . '][ID]'; //берем последний ID из прошлого запроса внутри батча
            $i++;
            $start = $start + $pack_limit; //постоянно считаем актуальный start
            $start_param = -1;                   //но для остальных запросов батча не используем его
        }
        $batches[] = $batch;
        $e++;
    }

//----------формируем вложенные батчи-----------
    $extra_batch = [];                                      // я добавил
    // foreach ($batch_levels as $level => $amount) {
    foreach ($batch_levels as $amount) {
        $extra_batches = [];
        $current_batch = current($batches);
        while ($current_batch) {
            $extra_batch = ['halt' => 0, 'cmd' => []];
            $counter = 1;
            while ($counter <= $pack_limit and $current_batch) {
                $extra_batch['cmd']['batch' . $counter] = 'batch?'
                    . http_build_query($current_batch);
                $current_batch = next($batches);
                $counter++;
            }
            $extra_batches[] = $extra_batch;
        }
        $batches = $extra_batches;
    }

//---------основной запрос---------
    $queryUrl = $hook . 'batch';
    $queryData = http_build_query($extra_batch);
    $curl = curl_init();
    curl_setopt_array($curl,
                      [
                          CURLOPT_SSL_VERIFYPEER => 0,
                          CURLOPT_POST           => 1,
                          CURLOPT_HEADER         => 0,
                          CURLOPT_RETURNTRANSFER => 1,
                          CURLOPT_URL            => $queryUrl,
                          CURLOPT_POSTFIELDS     => $queryData,
                      ]);
    $result0 = curl_exec($curl);
    curl_close($curl);
    $result = json_decode($result0,
                          true);
    $result = $result['result']['result'];

//---------собираем ответ в общий массив---------
    // foreach ($batch_levels as $level => $amount) {
    foreach ($batch_levels as $amount) {
        $result_dump = [];
//        foreach ($result as $key => $value) {
        foreach ($result as $value) {
            $result2 = array_values($value['result']);
            $result_dump = array_merge($result_dump,
                                       $result2);
        }
        $result = $result_dump;
    }
    $all = [];
//    foreach ($result as $key => $value) {
    foreach ($result as $value) {
        $all = array_merge($all,
                           $value);
    }
// echo json_encode($all);
    return $all;
}

/** создать строку обновить у одной сущности несколько полей за раз
 * @noinspection PhpUnused
 */
function batch_String_Mult_at_Once(string $webHoo,
                                   string $method,
                                   int    $id,
                                   array  $arr_Fields,
                                   array  $arr_Params = ['REGISTER_SONET_EVENT' => 'Y']): string
{
    // вернуть строку вида
    // вебхук batch?cmd[1]=crm.company.update%3Fid%3D13519%26fields%5BUF_CRM_ZAYAVKA_207302%5D%3D61893%26fields%5BUF_CRM_UCHASTVU909709%5D%3D61865
    // раскодировано batch?cmd[1]=crm.company.update?id=13519&fields[UF_CRM_ZAYAVKA_207302]=61893&fields[UF_CRM_UCHASTVU909709]=61865
    // якобы рабочая ссылка вида https://dev.1c-bitrix.ru/support/forum/messages/forum48/topic129139/message643433/?result=vote4user#message643433
    // лишние url-кодировки не нужны, достаточно закодировать лишь основные символы: скобки, знаки =, ? и т.д.
    // /rest/1/q7drr43ms1h5fmne/batch.xml?halt=0&cmd[ARA]=tasks.task.get?taskId=22&cmd[DEAL_CHANGE]=crm.deal.update?ID=6&FIELDS[TITLE]=$result[ARA][task][timeSpentInLogs]
    // /rest/1/q7drr43ms1h5fmne/batch.xml?halt=0&cmd[ARA]=tasks.task.get%3ftaskId%3d22&cmd[DEAL_CHANGE]=crm.deal.update%3FID%3d6%26FIELDS%5BTITLE%5D%3d%24result%5BARA%5D%5Btask%5D%5BtimeSpentInLogs%5D

    return
        $webHoo . 'batch?cmd[1]=' .
        $method . '%3F' .
        urlencode(http_build_query([
                                       'ID'     => $id,
                                       'fields' => $arr_Fields,
                                       'params' => $arr_Params,
                                   ]));
}

function array1d_UserField_Title_by_listLabel_Test()
{
    global $WEB_HOOK;
    $arr_Company_Fields = company_Fields($WEB_HOOK)['result'];
    $arr1d_ListLabels = ['Потребность СИЗОД ГО', 'Потребность СИЗОД ГО список'];
    $result = array1d_UserField_Title_by_listLabel($arr_Company_Fields,
                                                   $arr1d_ListLabels);
    assert(is_array($result));
    assert(count($result) > 0);
}

/** Возвращает описание полей счёта, в том числе пользовательских.  */
function invoice_New_fields()
{
    global $WEB_HOOK;
    $arr = b24request($WEB_HOOK,
                      'crm.item.fields',
                      ['entityTypeId' => 31],
                      0)['result'];
    array_2_File($arr,
                 'invoice_New_fields.txt');
}

function invoice_Old_fields()
{
    global $WEB_HOOK;
    $arr = b24request($WEB_HOOK,
                      'crm.company.fields',
                      [],
                      0)['result'];
    array_2_File($arr,
                 'invoice_OLD_fields.txt');
}

/** получить продукты и добавить к массиву счёта */
function products_Add(string $url,
                      int    $owner_Id,
                      array  $arr_Invoice): array
{
    log_2_File(__FUNCTION__ . '; Start');

    $filter = [
        'filter' => [
            '=ownerType' => 'SI',
            '=ownerId'   => $owner_Id,
        ],
    ];

    $arr_Products = b24request($url,
                               'crm.item.productrow.list',
                               $filter,
                               0)['result'];

    $arr_Union = $arr_Invoice + $arr_Products;

    array_2_File($arr_Invoice,
                 __FUNCTION__ . '_arr_Invoice.txt');
    array_2_File($arr_Products,
                 __FUNCTION__ . '_arr_Products.txt');
    array_2_File($arr_Union,
                 __FUNCTION__ . '_arr_Union.txt');

    return $arr_Union;
}

/** вернуть значение поля компании по имени поля и ID компании */
function crm_Company_FieldValue_by_Company_Id(int    $id,
                                              string $field): string
{
    global $Web_Hook_URL;
    $company = b24request($Web_Hook_URL,
                          'crm.company.get',
                          ['ID' => $id],
                          0)['result'];
    return $company[$field];
}

/** проценты ариметика */
function perCent_Arithmetic(float  $fNumber,
                            string $sign,
                            float  $perCents): float
{
    $fNumber_New = 0;

    switch ($sign) {
        case '+':
            $fNumber_New = $fNumber + ($fNumber / 100) * $perCents;
            break;
        case '-':
            $fNumber_New = $fNumber - ($fNumber / 100) * $perCents;
            break;
        case '*':
            $fNumber_New = $fNumber * (($fNumber / 100) * $perCents);
            break;
        case '/':
            $fNumber_New = $fNumber / (($fNumber / 100) * $perCents);
            break;
    }
    return $fNumber_New;
}

/** вернуть crm.company.userfield.list */
function company_UF_List_UF(string $webHook): array
{
    $params = [
        'order'  => ['TITLE' => 'ASC'],
        'filter' => [],
        'select' => [],
    ];

    return b24request($webHook,
                      'crm.company.userfield.list',
                      $params,
                      0);
}

/** вернуть строку без правой подстроки или пусто */
function string_Cut_Right(string $string,
                          string $right): string
{
    $return = '';

    $position = mb_strripos($string,
                            $right);

    // убедится, что справа от $right ничего нет
    if ($position == mb_strlen($string) - mb_strlen($right)) {
        if ($position) {
            $return = mb_substr($string,
                                0,
                                $position + 1);
        }
    }

    return $return;
}

/** массив 2мерный вытянуть в 1мерный */
function array2d_2_1d(array $arr2d): array
{
    $arr1d = [];
    $rows = count($arr2d);
    $cols = count($arr2d[0]);

    for ($row = 0; $row < $rows; $row++) {
        for ($col = 0; $col < $cols; $col++) {
            $arr1d[] = $arr2d[$row][$col];
        }
    }

    return $arr1d;
}

/** Отрезать строку справа от найденной подстроки справа.
 * Если подстрока не нашлась, то вернёт строку целиком
 * @noinspection PhpUnused
 */
//function string_Cut_Right(string $haystack, string $needle): int|string
//{
//    $posi = mb_strripos($haystack, $needle, -1);
//    return ($posi != false) ? mb_substr($haystack, $posi) : $haystack;
//}


function companies_Field_Test()
{
    global $WEB_HOOK;

    $arr = b24request($WEB_HOOK,
                      'crm.company.fields',
                      [],
                      0);
    array_2_File($arr,
                 'company_fields.txt');
}

/** вернуть истину, если левое меньше правого  */
function float_Left_Less_Right($left_,
                               $rigth): bool
{
    return (float)$left_ < (float)$rigth;
}

/** вернуть массив из CSV */
function file_CSV_2_Array(string $file,
                                 $separ = ';'): array
{
    $arr = file_get_contents($file);
    $lines = explode(PHP_EOL,
                     $arr);
    $array = [];
    foreach ($lines as $line) {
        $array[] = str_getcsv($line,
                              $separ);
    }
    return $array;
}

function company_userfield_get(string $webHookURL,
                               int    $id)
{
    return b24request($webHookURL,
                      'crm.company.userfield.get',
                      ['ID' => $id]);
}

/** массив сохранить в json */
function array_2_File_JSON(string $file,
                           array  $array)
{
    return file_put_contents($file . date('Y-m-d H-i-s') . '.txt',
                             json_encode($array,
                                         JSON_PRETTY_PRINT));
}

function file_JSON_2_Array(string $file): array
{
    $json_data = file_get_contents($file);
    return json_decode($json_data, true);
}

function crm_status_fields(string $webHook): array
{
    return b24request($webHook,
                      'crm.status.fields',
                      [],
                      0);
}

/** вернёт массив вида
 * [0] => Array
 * (
 * [ID] => 37
 * [ENTITY_ID] => COMPANY_TYPE
 * [STATUS_ID] => CUSTOMER
 * [NAME] => Потребитель
 * ) */
function crm_status_list(string $webHook,
                         string $entitty_ID): array
{
    $queryData = [
        'filter' => ['ENTITY_ID' => $entitty_ID],
    ];
    return b24request($webHook,
                      'crm.status.list',
                      $queryData,
                      0)['result'];
}

function array_2_File_CSV(array  $array,
                          string $file_Pref = '')
{
    $file_name = $file_Pref . ' ' . date('Y-m-d H-i-s') . '.txt';
    $fp = fopen($file_name,
                'w');

// Loop through file pointer and a line
    foreach ($array as $fields) {
        fputcsv($fp,
                $fields);
    }

    fclose($fp);
}

/** цикл в массиве продуктов заменить значение-массив на значение */
function products_ID_2_Values(array  $arr_Products_Id,
                              array  $arr_Product_Fields,
                              string $url_Domain): array
{
    $arr_Products_Value = $arr_Products_Id;

    foreach ($arr_Products_Value as &$arr_Product) {
        foreach ($arr_Product as $key => $field) {
            $arr_Product[$key] = product_Value_by_FieldName($arr_Product,
                                                            $key,
                                                            $field,
                                                            $arr_Product_Fields,
                                                            $url_Domain);
        }
    }
    return $arr_Products_Value;
}

/** заменить поля продукта значениями */
function product_Value_by_FieldName(array  $arr_Product,
                                    string $key,
                                           $field,
                                    array  $arr_Product_Fields,
                                    string $url_Domain): string
{
    $string_Return = ''; //'Не распознано ' . null_2(implode_OR(';', $key));
    switch ($key) {
        case 'DESCRIPTION': // Описание
        case 'PRICE':
            $string_Return = $arr_Product[$key] ?? '';
            break;
        case 'MEASURE':
            $string_Return = $arr_Product_Fields[$key][$field]['symbol'] ?? '';
            break;
        case 'PREVIEW_PICTURE': // Картинка для анонса
            if (isset($arr_Product[$key]['downloadUrl'])) {
                $string_Return = $url_Domain . $arr_Product[$key]['downloadUrl'] ?? '';
            }
            break;
        case 'PROPERTY_485': // Завод-изгото
            if (isset($field[0]['value'])) {
                $id = $field[0]['value'];
                $string_Return = $arr_Product_Fields[$key][$id]['VALUE'] ?? '';
            }
            break;
        case 'PROPERTY_539': // Артикул
            $string_Return = $arr_Product[$key]['value'] ?? '';
            break;
        case 'PROPERTY_427': // Сертификат
        case 'PROPERTY_705': // Руководство по эксплуатации (РЭ) файл
        case 'PROPERTY_829': // Описание (файл)
            if (isset($arr_Product[$key][0]['value']['downloadUrl'])) {
                $string_Return = $url_Domain . $arr_Product[$key][0]['value']['downloadUrl'] ?? '';
            }
            break;
        case 'SECTION_ID': // делаю пустым
            break;
        default:
            if (isset($arr_Product_Fields[$key])) {
                if (isset($arr_Product_Fields[$key]['propertyType'])) {
                    /** @noinspection PhpSwitchStatementWitSingleBranchInspection */
                    switch ($arr_Product_Fields[$key]['propertyType']) {
                        case 'L':
                            if (isset($arr_Product_Fields[$key]['values'][$field[0]])) {
                                if (isset($arr_Product_Fields[$key]['values'][$field[0]['value']]['VALUE'])) {
                                    $string_Return = $arr_Product_Fields[$key]['values'][$field[0]['value']]['VALUE'];
                                }
                            }
                            break;
                    }
                } elseif (isset($arr_Product_Fields[$key]['title'])) {
                    $string_Return = null_2($arr_Product[$key]);
                }
            } else {
                $string_Return = null_2($arr_Product[$key]);
            }
            break;
    }

    if (is_array($string_Return)) {
        $string_Return = __FUNCTION__ . ' is_array($string_Return)';
    }
    return (string)$string_Return;
}

/** вернуть значение для SECTION_ID */
// function section_Next(array $arrXd,
//                       string $key): string {
//
//     $arr_Return = [];
//
//     foreach ($arrXd['SECTION_ID'] as $arr) {
//
//         //        $arr = array (
//         //            'ID' => '675',
//         //            'CATALOG_ID' => '24',
//         //            'SECTION_ID' => '511',
//         //            'NAME' => '02.02.02. Фильтры противоаэрозольные (UNIX 200, UNIX 300)',
//         //            'CODE' => NULL,
//         //            'XML_ID' => NULL,
//         //        )
//         // для SECTION_ID найти в $arrXd NAME по ID
//         //
//
//         // пустые ID пропускаю
//         if (!is_null($arr['SECTION_ID'])) {
//
//             $value = array_Value_by_Id($arrXd['SECTION_ID'],
//                                        'ID',
//                                        $arr['ID'],
//                                        'NAME');
//             // обновляю последний элемент $arr_Return[]
//             if ($value != '') {
//                 $arr_Return[]['ID']                         = $arr['SECTION_ID'];
//                 $arr_Return[count($arr_Return) - 1]['NAME'] = $value;
//             }
//         }
//     }
//     return $arr_Return;
// }

// добавить значения служебных полей типа MEASURE, SECTION_ID
function table_Make_If(array  $arr_Product_Fields,
                       array  $arr_Fields,
                       string $webHook,
                       int    $catalog_ID): array
{
    $arr_Return = $arr_Product_Fields;

    if (in_array('MEASURE',
                 $arr_Fields)) {
        $arr_Measure_List = b24request($webHook,
                                       'catalog.measure.list',
                                       [],
                                       0);
        $arr_Return['MEASURE'] = $arr_Measure_List['result']['measures'];
    }
    if (array_Search_Part($arr_Fields,
                          'Раздел (уровень')) {
        $arr_Params = ['order'  => ['ID' => 'ASC'],
                       'filter' => ['>ID' => 0, 'CATALOG_ID' => $catalog_ID],
                       'select' => ['ID', 'NAME', 'SECTION_ID'],
                       'start'  => 0,];

        $arr_ProductSection_list = jet_list($webHook,
                                            'crm.productsection.list',
                                            $arr_Params);

        assert(count($arr_ProductSection_list) > 100);

        $arr_Return['SECTION_ID'] = $arr_ProductSection_list;
    }
    if (array_Search_Part($arr_Fields,
                          'PROPERTY_485')) {
        $arr_List = b24request($webHook,
                               'crm.product.property.list');

        $arr_Valu = array_Search_Recursive_Key_Neighb($arr_List,
                                                      'NAME',
                                                      'Завод-изготовитель',
                                                      'VALUES');

        if (!is_array($arr_Valu)) {
            error_log('Завод-изготовитель массив НЕ создан');
        }

        $arr_Return['PROPERTY_485'] = $arr_Valu;
    }
    return $arr_Return;
}

/** цикл создать в массиве товаров Раздел 3 */
// function section_ID_3_ForEach(array $arr_Product_Fields): array {
//     $arr_Return = $arr_Product_Fields;
//     // всего в продуктах 4 уровня раздела
//     // 1 самый верхний
//     // в $arr_Return["SECTION_ID"][0]["SECTION_ID"] находится ID следующего уровня
//
//     foreach ($arr_Return['SECTION_ID'] as $arr1d_Section) {
//
//         if (is_array($arr1d_Section)) {
//
//             if ($arr1d_Section['SECTION_ID'] != null) {
//
//                 $arr_Return['SECTION_ID_3'][] = section_ID_Level_Up($arr1d_Section,
//                                                                     $arr_Product_Fields,
//                                                                     'SECTION_ID_3');
//             }
//         }
//     }
//     return $arr_Return;
// }

/** создать в массиве товаров Раздел */
// function section_ID_Level_Up(array $section_ID,
//                              array $arr_Product_Fields,
//                              string $section_X): array {
//     // добавить название раздела по ID
//     // ключ последнего элемента массива
//     $id_ = $section_ID['ID'];
//     $val = array_Value_by_Id($arr_Product_Fields['SECTION_ID'],
//                              'ID',
//                              $id_,
//                              'NAME');
//
//     $arr_Return['ID']         = $id_;
//     $arr_Return['NAME']       = $val;
//     $arr_Return['CATALOG_ID'] = $section_ID['CATALOG_ID'];
//
//     return $arr_Return;
// }

/**  заполнить "столбцы" разделов товаров */
function section_ID_X_ForEach(array $arr_Products_IDs,
                              array $arr_SECTION_ID): array
{
    $arr_Return = $arr_Products_IDs;

    foreach ($arr_Return as $key => $arr_Product) {
        $value = section_ID_X($arr_Product,
                              $arr_SECTION_ID);

        if ($value != null) {
            $arr_Return[$key] = $value;
        }
    }
    return $arr_Return;
}

/**
 * создать поля названий разделов(Категорий) товара с именем раздела
 */
function section_ID_X(array $arr_Product,
                      array $arr_Section_IDs): array
{
    $arr_Return = $arr_Product;

    $id = $arr_Return['SECTION_ID'];
    $i = 0;
    do {
        $arr_Return['Раздел (уровень ' . ++$i . ')'] = array_Search_Recursive_Key_Neighb($arr_Section_IDs,
                                                                                         'ID',
                                                                                         $id,
                                                                                         'NAME');

        $id = array_Search_Recursive_Key_Neighb($arr_Section_IDs,
                                                'ID',
                                                $id,
                                                'SECTION_ID');
    } while ($id != '');

    return sections_Shift($arr_Return);
}

/**
 * сдвинуть значения в разделах, чтобы пустые стали слева
 * так как имеющийся номер раздела не даёт понять какой он глубины */
function sections_Shift(array $arr_Product): array
{
    $arr_Return = $arr_Product;

    if (!isset($arr_Return['Раздел (уровень 2)'])) {
        arr_Shift(2, $arr_Return);
    }
    if (!isset($arr_Return['Раздел (уровень 3)'])) {
        arr_Shift(3, $arr_Return);
    }
    if (!isset($arr_Return['Раздел (уровень 4)'])) {
        arr_Shift(4, $arr_Return);
    }

    return $arr_Return;
}

/** @noinspection PhpMissingBreakStatementInspection */
function arr_Shift(int $end, array &$arr_Product): void
{
    switch ($end) {
        case 4:
            $arr_Product['Раздел (уровень 4)'] = $arr_Product['Раздел (уровень 3)'];
        case 3:
            $arr_Product['Раздел (уровень 3)'] = $arr_Product['Раздел (уровень 2)'];
        case 2:
            $arr_Product['Раздел (уровень 2)'] = $arr_Product['Раздел (уровень 1)'];
            $arr_Product['Раздел (уровень 1)'] = '';
    }
}

/** вернуть массив списочного метода типа 'crm.productsection.list' */
function jet_list(string $webHook,
                  string $method,
                  array  $params,
                  int    $sleep_Time = 0): array
{
    $arr_Return = [];

    while (true) {
        $arr = b24request($webHook,
                          $method,
                          $params,
                          $sleep_Time);

        if ($arr['result'] === null) {
            break;
        }

        $arr_Return = array_merge($arr_Return,
                                  $arr['result']);

        if (!isset($arr['next'])) {
            break;
        }

        $params['start'] += 50;
    }
    return $arr_Return;
}

function jet_List_Tasks(string $webHook,
                        string $method,
                        array  $params,
                        int    $sleep_Time = 0): array
{
    $start = microtime(true);

    $arr_Return = [];

    if (!isset($params['start'])) {
        $params['start'] = 0;
    }

    while (true) {
        $arr = b24request($webHook,
                          $method,
                          $params,
                          $sleep_Time);

        if ($arr['result']['tasks'] === null) {
            break;
        }

        $arr_Return = array_merge($arr_Return,
                                  $arr['result']['tasks']);

        if (!isset($arr['next'])) {
            break;
        }

        $params['start'] += 50;
    }

    $delta = microtime(true) - $start;
    log_2_File((__FUNCTION__ . ', длительность ') . $delta);

    return $arr_Return;
}

/** Битрикс24 имя поля вида CREATED_BY в createdBy */
function b24_Field_Name_2_Key(string $str_In_): string
{
//    // Split string in words.
//    $arr_Words = explode('_',
//                         strtolower($str_In_));
//
//    $max = count($arr_Words);
//
//    if ($max > 1) {
//        $return = $arr_Words[0];
//        for ($i = 1; $i < $max; $i++) {
//            $return .= ucfirst($arr_Words[$i]);
//        }
//    } else {
//        $return = implode('',
//                          $arr_Words);
//    }
//    return $return;

    // приводим строку к нижнему регистру
    $lowercaseString = strtolower($str_In_);
    // разбиваем строку на массив по символу '_'
    $stringParts = explode('_', $lowercaseString);
    // проходим по каждому элементу массива и приводим первую букву к верхнему регистру
    foreach ($stringParts as &$part) {
        $part = ucfirst($part);
    }
    // объединяем массив обратно в строку, удаляя символ '_'
    $outputString = implode('', $stringParts);
    return lcfirst($outputString);
}

/** Битрикс24 имя поля вида createdBy в CREATED_BY */
function b24_Field_Key_2_Name(string $str_In_): string
{
    $return = '';

    foreach (str_split($str_In_) as $char) {
        if ($char === strtoupper($char)) {
            $char = '_' . $char;
        }
        $return .= strtoupper($char);
    }
    return $return;
}

/**  сейчас разделы от 4 к 1, делаю от 1 к 4 */
function sections_Reverse(&$arr_Products_IDs): void
{
    foreach ($arr_Products_IDs as &$arr_Product) {
        [$arr_Product['Раздел (уровень 1)'],
         $arr_Product['Раздел (уровень 2)'],
         $arr_Product['Раздел (уровень 3)'],
         $arr_Product['Раздел (уровень 4)']] = [
            $arr_Product['Раздел (уровень 4)'],
            $arr_Product['Раздел (уровень 3)'],
            $arr_Product['Раздел (уровень 2)'],
            $arr_Product['Раздел (уровень 1)'],
        ];
    }
}

/** для отчёта по  Приказ ОД-18_2022 от 23.05.2022 _О внесении актуальной информации о продукции сотрудникам
 * если в разделе 2 пусто, копирую из 1  */
function sections_1_2_2_If(&$arr_Products_IDs): void
{
    foreach ($arr_Products_IDs as &$arr_Product) {
        if ($arr_Product['Раздел (уровень 2)'] == '') {
            $arr_Product['Раздел (уровень 2)'] =
                $arr_Product['Раздел (уровень 1)'];
        }
    }
}

/** вернуть массив продуктов Битрикс24 по заголовка */
function b24_Products_2_Array2D(array  $arr1d_ListLabels,
                                string $webHook,
                                int    $catalog_ID): array
{
    $url_Domain = 'https://' . parse_url($webHook)['host'];
    // в $arr_Products_IDs в некоторых полях ID вместо значений
    // $arr_Product_Fields будет хранить значения для ID полей пользователя
    // и в него будут добавляться
    // значения для ID служебных полей, через table_Make_If
    $arr_Product_Fields = b24request($webHook,
                                     'crm.product.fields')['result'];
    // поля названия человечьи в понятные для Bitrix24
    $arr_Fields = products_userFields_Title_by_listLabel($arr_Product_Fields,
                                                         $arr1d_ListLabels);
    log_2_File('Поля из Битрикс24 загружены');

    // вернёт столбцы по названиям полей по алфавиту
    // порядок столбцов улучшит $arr_Products_IDs_Column_Ordered
    $arr_Products_IDs = batch_Fast_Gomzin($webHook,
                                          'crm.product.list',
                                          $arr_Fields);
    log_2_File('продукты загружены');

    if (array_search('Картинки товара количество', $arr1d_ListLabels)) {
        $arr_Products_IDs = products_Images_Count_Add($arr_Products_IDs, 'Картинки товара количество');
    }

    // добавить значения служебных полей типа MEASURE ...,
    // у которых значение нужно достать по ID
    $arr_Product_Fields = table_Make_If($arr_Product_Fields,
                                        $arr_Fields,
                                        $webHook,
                                        $catalog_ID);
    log_2_File('Поля добавлены');
    assert(count($arr_Product_Fields['SECTION_ID']) > 1);

    // заполнить "столбцы" разделов товаров
    $arr_Products_IDs = section_ID_X_ForEach($arr_Products_IDs,
                                             $arr_Product_Fields['SECTION_ID']);
    /**  сейчас разделы от 4 к 1, делаю от 1 к 4 */
    sections_Reverse($arr_Products_IDs);
    /** для отчёта по  Приказ ОД-18_2022 от 23.05.2022 _О внесении актуальной информации о продукции сотрудникам
     * если в разделе 2 пусто, копирую из 1  */
    sections_1_2_2_If($arr_Products_IDs);
    log_2_File('столбцы разделов товаров заполнены');

    // восстановить сортировку полей, сломанную batch_Fast_Gomzin
    $arr_Products_IDs_Column_Ordered = array2D_Order_by_Array($arr_Products_IDs,
                                                              $arr_Fields);
    log_2_File('Сортировка восстановлена');

    $arr_Products_Value = products_ID_2_Values($arr_Products_IDs_Column_Ordered,
                                               $arr_Product_Fields,
                                               $url_Domain);
    log_2_File('ID на значения заменены');

    // массив PHP в массив пригодный для вставки в диапазон листа гуглтаблицы
    return array_Php_2_Array_Sheet($arr_Products_Value);
}

/** добавить в массив товары поле 'Картинки товара количество' */
function products_Images_Count_Add(array $arr_Products_IDs, string $field): array
{
    $arr_Images = [];

    switch ($field) {
        case 'Картинки товара количество':
            $arr_Images = catalog_productImage_list($arr_Products_IDs)[0];
            break;
        case 'Детальное описание количество':
            // $arr_Images = catalog_produc_get($arr_Products_IDs, 'DETAIL_TEXT')[0];
            break;
    }

    foreach ($arr_Images as $image) {
        array_Add_Value_by_Key_If($image, $arr_Products_IDs, $field);
    }
    return $arr_Products_IDs;
}

/** запустить array_Add_Value_by_Key по условиям */
function array_Add_Value_by_Key_If(array $image, array &$arr_Products_IDs, string $field)
{
    if (count($image['productImages']) > 0) {
        if (isset($image['productImages'][0]['productId'])) {
            $id = $image['productImages'][0]['productId'];
            $value = count($image['productImages']);
            // найди в $arr_Products_IDs ключ, в котором $id и
            // добавь к нему $value
            array_Add_Value_by_Key($arr_Products_IDs, 'ID', $id, $field, $value);
        }
    }
}

/** найти ключ по значения, добавить пару ключ=> значений */
function array_Add_Value_by_Key(array  &$arrX,
                                string $key_Find,
                                       $value_Find,
                                string $key_Add_,
                                       $value_Add_): void
{
    foreach ($arrX as &$arr) {
        if ($arr[$key_Find] == $value_Find) {
            $arr[$key_Add_] = $value_Add_;
            break;
        }
    }
}

/** Дозатор: вызывать batchRequest в цикле,
 * разбивая arr1d на count раз и подсовывая новый массив в batchRequest
 * id в запросах должны быть существующие
 */
function batchRequest_Dispenser_Array(array $arr1d,
                                      int   $count,
                                            $b24,
                                      bool  $echo = false): array
{ // можно переделать на array_chunk
    // был случай на 3000 записи REST сломался

    $arr1d_Part = [];
    $result = [];
    $iMax = count($arr1d);
    $index = 0;
    // $result     = [];

    for ($i = 0; $i < $iMax; $i++) {
        $arr1d_Part[] = $arr1d[$i];

        $index++;

        if ($index == $count or $index == $iMax) {
            if ($echo) {
                echo __FUNCTION__ . ' отправил i = ' . $i . " из .$iMax.\n ";
            }

            if (count($result) > 0) {
                $result[array1d_Last($result)] = array_merge($result[array1d_Last($result)],
                                                             $b24->batchRequest($arr1d_Part));
            } else {
                $result[] = $b24->batchRequest($arr1d_Part);
            }

            $arr1d_Part = [];
            $index = 0;
        }
    }

    // остаток массива
    if (count($arr1d_Part) > 0) {
        $result[array1d_Last($result)] = array_merge($result[array1d_Last($result)],
                                                     $b24->batchRequest($arr1d_Part));
    }

    return $result;
}

/** вернуть макс xml_id / Внешний код продуктво */
function products_xml_id_Max()
{
    // создать строку для batch_Fast_Gomzin
    $arr1d_ListLabels = ['ID', 'Внешний код', 'Название'];
    $arr_Products = b24_Products_2_Array2D($arr1d_ListLabels,
                                           WEB_HOOK,
                                           24);
    $max = max(array_column($arr_Products, 1));
    echo 'max xml_id = ' . $max;
}

/** вернуть массив catalog.productImage.list по массиву id продуктов */
function catalog_productImage_list(array $arr_Products_IDs): array
{
    // Используй универсальный catalog_product_Method_list
    // вебхук batch?cmd[1]=crm.company.update%3Fid%3D13519%26fields%5BUF_CRM_ZAYAVKA_207302%5D%3D61893%26fields%5BUF_CRM_UCHASTVU909709%5D%3D61865
    // раскодировано batch?cmd[1]=crm.company.update?id=13519&fields[UF_CRM_ZAYAVKA_207302]=61893&fields[UF_CRM_UCHASTVU909709]=61865

    /**  пример хорошего массива - обработается batchRequest_Dispenser_Array */
    // $batch_Params_Good = [
    //     0 =>
    //         ['productId' => '9305',],
    //     1 =>
    //         ['productId' => '9473',],];

    /** вот так добудь id продуктов  */
    // $arr_Products_IDs = batch_Fast_Gomzin(WEB_HOOK,
    //                                       'crm.product.list',
    //                                       ['select' => ['ID']]);

    $batch_Params = [];
    foreach ($arr_Products_IDs as $index => $product) {
        $batch_Params[$index] = ['productId' => (string)$product['ID']];
    }

    global $BX24;
    $commands = $BX24->buildCommands('catalog.productImage.list',
                                     $batch_Params);
    // 1439 штуки за 32 секунды
    return batchRequest_Dispenser_Array($commands, 50, $BX24);
}

/** для методов не имеющих списочного метода,
 * вернуть массив по массиву id продуктов
 */
function catalog_product_Method_list(array $arr_Products_IDs, string $method, string $id_Key, string $id_Value): array
{
    // вебхук batch?cmd[1]=crm.company.update%3Fid%3D13519%26fields%5BUF_CRM_ZAYAVKA_207302%5D%3D61893%26fields%5BUF_CRM_UCHASTVU909709%5D%3D61865
    // раскодировано batch?cmd[1]=crm.company.update?id=13519&fields[UF_CRM_ZAYAVKA_207302]=61893&fields[UF_CRM_UCHASTVU909709]=61865

    /**  пример хорошего массива - обработается batchRequest_Dispenser_Array */
    // $batch_Params_Good = [
    //     0 =>
    //         ['productId' => '9305',],
    //     1 =>
    //         ['productId' => '9473',],];

    /** вот так добудь id продуктов  */
    // $arr_Products_IDs = batch_Fast_Gomzin(WEB_HOOK,
    //                                       'crm.product.list',
    //                                       ['select' => ['ID']]);

    $batch_Params = [];
    foreach ($arr_Products_IDs as $index => $product) {
        $batch_Params[$index] = ['productId' => (string)$product['ID']];
    }

    global $BX24;
    $commands = $BX24->buildCommands('catalog.productImage.list',
                                     $batch_Params);
    // 1439 штуки за 32 секунды
    return batchRequest_Dispenser_Array($commands, 50, $BX24);
}

/**
 * асинхронный запуск скриптов, без ожидания завершения
 * скрипты создают файлы
 */
function exec_Async(...$files): void
{
    $cli = (php_sapi_name() == 'cli');
    $dir = __DIR__ . DIRECTORY_SEPARATOR;
    $nul = ($cli) ? 'nul' : '/dev/null &';

    foreach ($files as $file) {
        $script_path = $dir . $file . '.php';
        $serials_path = $dir . $file . '.serials';

        // Существуют ли файлы перед выполнением команды
        if (file_exists($script_path)) {
            $escaped_cmd = escapeshellcmd("php -f $script_path $serials_path > $nul");

            $cli
                ? pclose(popen('start /B ' . $escaped_cmd, 'r'))
                : exec($escaped_cmd);
        } else {
            error_EMail(__FUNCTION__, 'НЕ найден файл ' . $script_path);
        }
    }
}


/**
 * вернуть массив списочного метода типа 'crm.productsection.list'
 */
function list_Jet(string $hook,
                  string $method,
                  array  $params = [],
                  int    $sleep_Time = 0): array
{
    $arr_Return = [];

    $params['start'] = $params['start'] ?? 0;

    while (true) {
        $arr = b24request($hook,
                          $method,
                          $params,
                          $sleep_Time);

        if ($arr['result'] === null) {
            break;
        }

        $arr_Return = array_merge($arr_Return,
                                  $arr['result']);

        if (!isset($arr['next'])) {
            break;
        }

        $params['start'] += 50;
    }
    return $arr_Return;
}

/**
 * вернуть массив списочного метода типа 'crm.productsection.list'
 */
function list_Jet_Tasks(string $hook,
                        string $method,
                        array  $params = [],
                        int    $sleep_Time = 0): array
{
    $arr_Return = [];

    $params['start'] = $params['start'] ?? -1;

    while (true) {
        $arr = b24request($hook,
                          $method,
                          $params,
                          $sleep_Time);

        if ($arr['result'] === null) {
            break;
        }

        $arr_Return = array_merge($arr_Return,
                                  $arr['result']);

        if (!isset($arr['next'])) {
            break;
        }

        $params['start'] += 50;
    }
    return $arr_Return;
}


/**
 * Фильтровать задачи, которые были в работе в текущем году:
 * а это созданы или завершены в 2023 или не завершены в предыдущие годы.
 * @return array
 * @param array $tasks [0 => ['id'          => '1',
 *                     'title'       => 'Заполнить профиль',
 *                     'createdDate' => '2018-03-02T23:43:29+03:00',
 *                     'closedDate'  => '2018-04-28T12:19:02+03:00',
 *                     'group'       => [],],
 *                     1 => ['id'          => '6',
 *                     'title'       => 'Заполнить профиль',
 *                     'createdDate' => '2018-03-04T22:36:47+03:00',
 *                     'closedDate'  => '2018-04-26T10:35:35+03:00',
 *                     'group'       => [],]];
 */
function tasksInWork(array $tasks): array
{
    $year = date('Y'); // Получаем текущий год

    // Задачи, созданные в текущем году
    $tasksCreatedInYear = tasksCreatedInYear($tasks, $year);

    // Задачи, завершенные в текущем году
    $tasksClosedInYear = tasksClosedInYear($tasks, $year);

    // Задачи, не завершенные в других годах:
    $tasksClosedNot = tasksClosedNot($tasks);

    // Объединение трех множеств задач
    $tasksMerge = array_merge($tasksCreatedInYear, $tasksClosedInYear, $tasksClosedNot);
    return array_unique($tasksMerge, SORT_REGULAR);
}

/**
 * Задачи, не завершенные в других годах:
 * созданные в других годах - createdDate НЕ содержит years, closedDate == ''
 * @return array ['id'  => '1',
 *                      'title' => 'Заполнить профиль',
 *                      'createdDate' => '2018-03-02T23:43:29+03:00',
 *                      'closedDate' => '',
 *                      'group' => [],]
 * @param string $year  '2023'
 * @param array  $tasks [0 => ['id'  => '1',
 *                      'title' => 'Заполнить профиль',
 *                      'createdDate' => '2018-03-02T23:43:29+03:00',
 *                      'closedDate' => '',
 *                      'group' => [],],
 *                      1 => ['id'  => '6',
 *                      'title' => 'Заполнить профиль',
 *                      'createdDate' => '2018-03-04T22:36:47+03:00',
 *                      'closedDate' => '2018-04-26T10:35:35+03:00',
 *                      'group' => [],]];
 */
function tasksClosedNotInYearsOthers(array $tasks, string $year): array
{
    return array_filter(
        $tasks,
        fn($task) => substr($task['createdDate'] ?? '', 0, 4) !== $year &&
            ($task['closedDate'] ?? '') === '');
}

/**
 * @param array $tasks
 * @return array незавершённые задачи - дата завершения пуста
 */
function tasksClosedNot(array $tasks): array
{
    return array_filter(
        $tasks,
        fn($task) => ($task['closedDate'] ?? '') === '');
}

/**
 * Задачи, завершенные в текущем году
 * @return array ['id'  => '1',
 *               'title' => 'Заполнить профиль',
 *               'createdDate' => '2018-03-02T23:43:29+03:00',
 *               'closedDate' => '1998-04-28T12:19:02+03:00',
 *               'group' => [],]
 * @param $year  1998
 * @param $tasks [0 => ['id'  => '1',
 *               'title' => 'Заполнить профиль',
 *               'createdDate' => '2018-03-02T23:43:29+03:00',
 *               'closedDate' => '1998-04-28T12:19:02+03:00',
 *               'group' => [],],
 *               1 => ['id'  => '6',
 *               'title' => 'Заполнить профиль',
 *               'createdDate' => '2018-03-04T22:36:47+03:00',
 *               'closedDate' => '2018-04-26T10:35:35+03:00',
 *               'group' => [],]];
 */
function tasksClosedInYear(array $tasks, string $year): array
{
    return array_filter(
        $tasks,
        fn($task) => substr($task['closedDate'] ?? '', 0, 4) === $year);
}

/**
 *  Задачи, созданные в year
 * @return array ['id'  => '1',
 *               'title' => 'Заполнить профиль',
 *               'createdDate' => '1967-09-15T23:43:29+03:00',
 *               'closedDate' => '2018-04-28T12:19:02+03:00',
 *               'group' => [],]
 * @param $year  1967
 * @param $tasks [0 => ['id'  => '1',
 *               'title' => 'Заполнить профиль',
 *               'createdDate' => '1967-09-15T23:43:29+03:00',
 *               'closedDate' => '2018-04-28T12:19:02+03:00',
 *               'group' => [],],
 *               1 => ['id'  => '6',
 *               'title' => 'Заполнить профиль',
 *               'createdDate' => '2018-03-04T22:36:47+03:00',
 *               'closedDate' => '2018-04-26T10:35:35+03:00',
 *               'group' => [],]];
 */
function tasksCreatedInYear(array $tasks, string $year): array
{
    return array_filter(
        $tasks,
        fn($task) => substr($task['createdDate'] ?? '', 0, 4) === $year);
}

/**
 * Подразделения пользователя
 * @return string
 * @param string $user_ID
 */
function user_Departments(string $user_ID): string
{
    static $departments_Dictionary;
    if (empty($departments_Dictionary)) {
        $departments = department_get(WEB_HOOK);
        $departments_Dictionary = array_2_Dictionary($departments, 'ID');
    }

    static $users_Dictionary;
    if (empty($users_Dictionary)) {
        $users = user_get(WEB_HOOK);
        $users_Dictionary = array_2_Dictionary($users, 'ID');
    }

    $departments_IDs = $users_Dictionary[$user_ID]['UF_DEPARTMENT'] ?? [];

    $departments_Names = array_map(fn($id) => $departments_Dictionary[$id]['NAME'], $departments_IDs);

    return implode_If(';', $departments_Names);
}

function department_get(string $hook, $select_fields = []): array
{
    static $user_get;
    if (empty($user_get)) {
        $user_get = batch_Fast_InExSu_Double($hook, 'department.get', $select_fields);
    }
    return $user_get;
}

function user_get(string $hook, $select_fields = []): array
{
    static $user_get;
    if (empty($user_get)) {
        $user_get = batch_Fast_InExSu_Double($hook, 'user.get', $select_fields);
    }
    return $user_get;
}

function user_Department_ID(string $user_ID): string
{
    static $users_Dictionary;

    if (empty($users_Dictionary)) {
        $user_get = batch_Fast_InExSu_Double(WEB_HOOK, 'user.get', []);

        if (empty($user_get)) {
            error_EMail(__FUNCTION__, 'empty($user_get)');
        }

        $users_Dictionary = array_2_Dictionary($user_get, 'ID');
    }
    return (string)$users_Dictionary[$user_ID]['UF_DEPARTMENT'][0] ?? 'НЕ найден [$user_ID][\'UF_DEPARTMENT\'] ' . $user_ID;
}

/**
 * Юридическое лицо
 *
 * @return string
 * @param string $user_ID
 */
function legal_Face(string $user_ID): string
{
    static $user_Dictionary;
    if (empty($user_Dictionary)) {
        $user_get = user_get(WEB_HOOK);
        $user_Dictionary = array_2_Dictionary($user_get, 'ID');
    }

    static $legal_Dictionary;
    if (empty($legal_Dictionary)) {
        $legal = batch_Fast_InExSu_Double(WEB_HOOK, 'user.userfield.list', []);
        if (!isset($legal[1]['LIST'])) error_EMail(__FUNCTION__, '!isset($legal[1][\'LIST\'])');
        $legal_Dictionary = array_2_Dictionary($legal[1]['LIST'] ?? [], 'ID');
    }

    $user = $user_Dictionary[$user_ID];

    $legal_ID = $user['UF_USR_1575485432250'] ?? ''; // у некоторых может и не быть UF_USR_1575485432250

    return $legal_Dictionary[$legal_ID]['VALUE'] ?? '';
}
<?php
declare(strict_types=1);

// Задачи все
// Вызов https://restzg.ru/phpb24/Bitrix24-entity-operations/aTasks_2_GoogleSheet.php

require_once __DIR__ . '/aTasks_2_GoogleSheet_Methods.php';

$date_Start = '01.01.' . date("Y");
$date_Stop_ = '31.12.' . date("Y");
$arr_filter = [
    '>=CREATED_DATE' => $date_Start,
    '<=CREATED_DATE' => $date_Stop_ . ' 23:59:59'];

b24_Tasks_2_Google_Sheet_RUN('Задачи!',
                             'A2:Z',
                             '1BRiTRRyd9f0KFxT3VhVgsSZnR8zkkQ8OeNz8cAnG8VY',
                             $arr_filter); // [] - без фильтра

<?php

require_once "deals_UF_List_Update.php";

function crm_Deal_UserField_ID_by_Name_Test(): void
{
    echo 'RUN ' . __FUNCTION__;

    $file_Name = __DIR__ . '/webHookURL.txt';
    $webHookURL = file_get_contents($file_Name);

    $id = crm_Deal_UserField_ID_by_Name('UF_CRM_1654498701', $webHookURL);

    echo assert($id === 6695);

}

function crm_Deal_UserField_List_Test()
{
    $file_Name = __DIR__ . '/webHookURL.txt';
    $webHookURL = file_get_contents($file_Name);
    $arr_UF = b24request($webHookURL, 'crm.deal.userfield.list')['result'];
    array_2_file($arr_UF, 'crm.deal.userfield.list.txt');
}

function id_by_Value_Test()
{
    $arr2d = [
        ['ID' => 60077,
            'VALUE' => '223'],
        ['ID' => 60079,
            'VALUE' => '44']
    ];
    $value = 223;

    $result = id_by_Value($arr2d, $value);
    assert($result == 60077);
}

function aMain_RUN_FZ()
{
    // Строки из ПП тип строка
    // UF_CRM_1627624301 (ФЗ)
    // положить в
    // UF_CRM_1652353902 (ФЗ:)

    echo 'RUN ' . __FUNCTION__ . '...';

    $uf_Field_From_Name_Stri = 'UF_CRM_1627624301';
    $uf_Field_Into_Name_List = 'UF_CRM_1652353902';

    $file_Name = __DIR__ . '/webHookURL.txt';
    $webHookURL = file_get_contents($file_Name);
    $uf_Field_Into_ID = crm_Deal_UserField_ID_by_Name($uf_Field_Into_Name_List, $webHookURL);

    aMain($uf_Field_From_Name_Stri, $uf_Field_Into_Name_List, $uf_Field_Into_ID, 28670);
}

function aMain_RUN_Sposob_Zakupki(int $id_Start = 1): void
{
    // Строки из ПП тип строка
    // UF_CRM_1602662883400 (Способ закупки)
    // положить в
    // ПП сделки тип список UF_CRM_1654498701 (Способ закупки:)

    echo 'RUN ' . __FUNCTION__ . '...';

    $uf_Field_From_Name_Stri = 'UF_CRM_1602662883400';
    $uf_Field_Into_Name_List = 'UF_CRM_1654498701';

    $file_Name = __DIR__ . '/webHookURL.txt';
    $webHookURL = file_get_contents($file_Name);
    $uf_Field_Into_ID = crm_Deal_UserField_ID_by_Name($uf_Field_Into_Name_List, $webHookURL);

    aMain($uf_Field_From_Name_Stri, $uf_Field_Into_Name_List, $uf_Field_Into_ID, $id_Start);

}

function deal_Update_in_For_Test()
{
    $file_Name = __DIR__ . '/webHookURL.txt';
    $webHookURL = file_get_contents($file_Name);

    $uf_Field_From_Name = 'UF_CRM_1627624301';
    $uf_Field_Into_Name = 'UF_CRM_1652353902';
    $uf_Field_Into_ID = 6581;

    // массив списка ПП - должен обновляться после вызова crm.deal.userfield.update
    $arr_UF_Into = b24request($webHookURL, 'crm.deal.userfield.get', ['ID' => $uf_Field_Into_ID])['result']['LIST'];

    $id = 20217; // https://zelinskygroup.bitrix24.ru/crm/deal/details/33477/

    deal_Update_in_For($id, $webHookURL, $uf_Field_From_Name, $arr_UF_Into, $uf_Field_Into_Name, $uf_Field_Into_ID);
}

function time_4_Show_Test()
{

    echo 'RUN ' . __FUNCTION__ . '...';

    $result = time_4_Show(0);
    assert($result === true);

    sleep(1);
    $result = time_4_Show(0.5);
    assert($result === true);

    sleep(1);
    $result = time_4_Show(1.5);
    assert($result === false);
}

//aMain_RUN_FZ(); // НЕ быстро
aMain_RUN_Sposob_Zakupki(1); //

//crm_Deal_UserField_ID_by_Name_Test();
//crm_Deal_UserField_List_Test();
//id_by_Value_Test();
//deal_Update_in_For_Test();
//time_4_Show_Test();
<?php

declare(strict_types=1);

// Задачи года для таблицы
// Вызов https://restzg.ru/phpb24/Bitrix24-entity-operations/aTasks_2_GoogleSheet.php

require_once __DIR__ . '/aTasks_2_GoogleSheet_Methods.php';

/**
 * Фильтрация по дате
 * https://dev.1c-bitrix.ru/api_help/iblock/classes/ciblockelement/getlist.php
 * $date_from = '12.09.2014';
 * $date_to = '18.09.2014';
 *
 * $db_el = CIBlockElement::GetList(
 * array('ID' => 'DESC'),
 * array(
 * '>=DATE_CREATE' => $date_from,
 * '<=DATE_CREATE' => $date_to . ' 23:59:59'
 * )
 * ); */

$date_Start = '01.01.' . date("Y");
$date_Stop_ = '31.12.' . date("Y");
$arr_filter = [
    '>=CREATED_DATE' => $date_Start,
    '<=CREATED_DATE' => $date_Stop_ . ' 23:59:59'
];

b24_Tasks_2_Google_Sheet_RUN(
    'Задачи ГОД!',
    'A2:Z',
    '13yvjC9hV6bVwHdtG6pOTFx6D1LSV9yNuE_DvXa5QX8Y',
    $arr_filter
);

<?php
// uf = user field
// массовое обновление

require_once __DIR__ . '/vendor/autoload.php';
// require_once __DIR__ . '../PHP-Bitrix24-Library/lib_Bitrix24.php';
require_once __DIR__ . '/crest_SRP.php';
require_once __DIR__ . '/lib_Bitrix24.php';

use App\Bitrix24\Bitrix24API;

$File_Name   = __DIR__ . '/webHookURL.txt';
$WEB_HOOK = file_get_contents($File_Name);

$BX24 = new Bitrix24API($WEB_HOOK);

/** Комании обновить
* проверяет расхождения в парных полях $arr2d_UF_Titles и обновляет поля списка */
function aMain_UF_Check_Peplace($companys_Filter = []): array //array $filter = []
{ //
    global $BX24;
    global $WEB_HOOK;

    $arrXd_Companys = batch_Fast_Gomzin($WEB_HOOK,
                                        'crm.company.list',
                                        array1d_UF_Titles(),
                                        $companys_Filter);
    assert(count($arrXd_Companys) > 2);

    // $arr2d_UF_Titles = array2d_UF_Titles();

    $arrXd_company_Fields = company_Fields($WEB_HOOK,
                                           0)['result'];

    // для buildCommands нужен массив вида

//    $batch_Params[0] = [
//        'ID' => 13519,
//        'fields' => [
//            'UF_CRM_1548156531497' => 1,
//            'UF_CRM_POTREBN599337' => 61845],
//    ];
//    $batch_Params[1] = [
//        'ID' => 211,
//        'fields' => [
//            'UF_CRM_1548156531497' => 1,
//            'UF_CRM_POTREBN599337' => 61845],
//        // 'params' => ['REGISTER_SONET_EVENT' => 'Y'], // не срабатывает
//    ];

    $batch_Params = [];

    foreach ($arrXd_Companys as $index => $arr1d_Company) {

        assert($arr1d_Company['ID'] > 0);

        // для полей типа Да/Нет
//        $fields = fields_YesNo_Diff_Batch($arr1d_Company,
//                                          $arr2d_UF_Titles,
//                                          $arrXd_company_Fields);

// для задачи из поля 'тип компании (не выбирать)' перенести в поле 'тип компании'
        $fields = fields_Type_List_Diff_Batch($arr1d_Company,
                                              'COMPANY_TYPE',
                                              'UF_CRM_1662558139',
                                              $arrXd_company_Fields);
        if (count($fields) > 0) {

            $batch_Params[$index] = [
                'ID' => $arr1d_Company['ID'],
                'fields' => $fields,
            ];
        }
    }

    array_2_File($batch_Params,
                 __FUNCTION__ . '_batch_Params.txt');

    $commands = $BX24->buildCommands('crm.company.update',
                                     $batch_Params);

    // основное действие = обновить сущности, троттлинг
//    $result = batchRequest_Dispenser_Array($commands,
//                                           49,
//                                           $BX24);
//
//    array_2_file($result,
//                 __FUNCTION__ . '.txt');
//    return $result;
}

// /** Дозатор: вызывать batchRequest в цикле, разбивая arr1d на count раз и подсовывая новый массив в batchRequest*/
// function batchRequest_Dispenser_Array(array $arr1d,
//                                       int $count,
//                                       $b24): array
// { // можно переделать на array_chunk
//     // был случай на 3000 записи REST сломался
//
//     $arr1d_Part = [];
//     $result     = [];
//     $iMax       = count($arr1d);
//     $index      = 0;
//
//     for ($i = 0; $i < $iMax; $i++) {
//
//         $arr1d_Part[] = $arr1d[$i];
//
//         $index++;
//
//         if ($index == $count) {
//
//             echo __FUNCTION__ . ' отправил i=' . $i . " из .$iMax.\n ";
//
//             $result[] = $b24->batchRequest($arr1d_Part);
//
//             $arr1d_Part = [];
//             $index      = 0;
//         }
//     }
//
//     // остаток массива
//     if (count($arr1d_Part) > 0) {
//         $result[] = $b24->batchRequest($arr1d_Part);
//     }
//
//     return $result;
// }

/** массив полей listLabels */
function array2d_ListLabels_Dest_Sour(): array
{
//    return [
//        ['В компании есть номенклатурный справочник', 'В компании есть номенклатурный справочник список'],
//        ['Потребность СИЗОД ПРОМ', 'Потребность СИЗОД ПРОМ список'],
//        ['Потребность СИЗОД ГО', 'Потребность СИЗОД ГО список'],
//        ['Потребность СИЗОД Пожарные самоспасатели', 'Потребность СИЗОД Пожарные самоспасатели список'],
//        ['Потребность СИЗОД ДАСВ', 'Потребность СИЗОД ДАСВ список'],
//        ['Потребность СИЗОД Шахтные самоспасатели', 'Потребность СИЗОД Шахтные самоспасатели список'],
//        ['Участвует в рассылке', 'Участвует в рассылке список'],
//        ['Поставить компанию на отслеживание', 'Поставить компанию на отслеживание список'],
//        ['Потребность СИЗОД Байонет', 'Потребность СИЗОД Байонет список'],
//        ['Потребность СИЗОД Резьба', 'Потребность СИЗОД Резьба список'],
//        ['Потребность СИЗОД Легкие фильтрующие', 'Потребность СИЗОД Легкие фильтрующие список'],
//        ['Повторное обращение', 'Повторное обращение список'],
//        ['Сделка закрыта', 'Сделка закрыта список'],
//        ['Заявка по эл.почте', 'Заявка по эл.почте список'],
//        ['СМП', 'СМП список'],
//        ['делимый лот', 'делимый лот список'],
//    ];
    return [
        ['COMPANY_TYPE', 'Тип компании'],
    ];
}

/** массив 1мерный массивов 1мерных в массив 1мерный */
function array1d1d_2_array1d(array $arr1d1d): array
{
    $arr1d = [];
    foreach ($arr1d1d as $arr1st) {
        foreach ($arr1st as $value) {
            $arr1d[] = $value;
        }
    }
    return $arr1d;
}

/** Собрать массив и запустить batch. Вернуть результат.
 * $arr_ListLabels - человечное название поля пользователя,
 * $arr_UserField_List - из company_Userfield_List().
 */
function batch_Do(array $company,
                  array $arr_ListLabels,
                  array $arr_Company_Fields): array
{

    $arr_Batch = [];

    foreach ($arr_ListLabels as $arr_listLabels_2) {

        // определить ListLabel исходного поля
        $sour_ListLabel = $arr_listLabels_2[0];
        $dest_ListLabel = $arr_listLabels_2[1];

        assert($sour_ListLabel != '');
        assert($dest_ListLabel != '');

        $sour_Title = company_UserField_Title_by_listLabel($arr_Company_Fields,
                                                           $sour_ListLabel);
        $dest_Title = company_UserField_Title_by_listLabel($arr_Company_Fields,
                                                           $dest_ListLabel);

        assert($sour_Title != '');
        assert($dest_Title != '');

        // найти ID значений Да и Нет в поле назначения, они в каждом поле разные
        $sour_Id_Yes = userField_IDs($arr_Company_Fields,
                                     $dest_Title,
                                     'Да');
        $sour_Id_No_ = userField_IDs($arr_Company_Fields,
                                     $dest_Title,
                                     'Нет');

        assert($sour_Id_Yes > 0);
        assert($sour_Id_No_ > 0);

        // какой ID вбить в поле назначения
        $dest_Value_ID = ($company[$sour_Title] == 1) ? $sour_Id_Yes : $sour_Id_No_;

        assert($dest_Value_ID > 0);

        // элемент массива batch
        $arr_Line  = [
            $company['ID'] => [
                'method' => 'crm.company.update',
                'params' => [
                    'ID' => $company['ID'],
                    'fields' => [$dest_Title => $dest_Value_ID]], // ID значения списка в crm.company.userfield.get
            ],
        ];
        $arr_Batch = array_merge($arr_Batch,
                                 $arr_Line);
    }
    return batch_SRP($arr_Batch);
}


/** массив 1мерный полей пользователя с ID из массива 1мерного массивов 1мерных  */
function array1d_UF_ListLabels_with_ID(): array
{
    $arr2d = array2d_ListLabels_Dest_Sour();
    $resul = array1d1d_2_array1d($arr2d);
    return array_merge(['ID'],
                       $resul);
}

///** Компании: вернуть массив 2мерный Titles*/
//function array2d_UF_with_ID(): array
//{
//    global $WEB_HOOK;
//    $arr1d_Company_Fields = company_Fields($WEB_HOOK, 0)['result'];
//    return array2d_UF_Title_by_listLabel($arr1d_Company_Fields, array2d_ListLabels_Dest_Sour());
//}

function companys_Batch(array $filter,
                        array $arr_UF_Fields): array
{
    global $WEB_HOOK;
    return batch_Fast_Gomzin($WEB_HOOK,
                             'crm.company.list',
                             $arr_UF_Fields,
                             $filter);
}

/** вернуть массив 1мерный нужных полей UF_CRM_*/
function array1d_UF_Titles(): array
{
    global $WEB_HOOK;

    $companys_Fields = company_Fields($WEB_HOOK,
                                      0)['result'];
    return array1d_UserField_Title_by_listLabel($companys_Fields,
                                                array1d_UF_ListLabels_with_ID());// array1d_UserField_Title_by_listLabel($companys_Fields, $arr_UF_Fields);

}

/** обновление полей по задаче: из поля 'тип компании (не выбирать)' перенести в поле 'тип компании'
 * одинаковые не трогаю
 * если нужные поля пользователя разные вернуть строку для batch */
function fields_Type_List_Diff_Batch(array $arr1d_Company,
                                     string $field_Sour,
                                     string $field_Dest,
                                     array $arrXd_company_Fields): array
{ // почему-то пусто

}

/** обновление полей список по парным полям Да/Нет:
 * одинаковые не трогаю
 * если нужные поля пользователя разные вернуть строку для batch
 * @noinspection PhpUnusedLocalVariableInspection
 */
function fields_YesNo_Diff_Batch(array $arr1d_Company,
                                 array $arr2d_UF_Titles,
                                 array $arrXd_company_Fields): array
{

    $arr1d_Field_Value = [];

    foreach ($arr2d_UF_Titles as $arr1d_Titles) {

        // описание полей компании в company_Fields.txt -
        // если левое поле источник = 0, то в правом поле назначения должно быть Нет, если 1 то Да

        $sour_Title = $arr1d_Titles[0];
        $dest_Title = $arr1d_Titles[1];

        assert($sour_Title != '');
        assert($dest_Title != '');

        // найти ID значений Да и Нет в поле назначения, они в каждом поле разные
        $sour_Id_Yes = userField_IDs($arrXd_company_Fields,
                                     $dest_Title,
                                     'Да');
        $sour_Id_No_ = userField_IDs($arrXd_company_Fields,
                                     $dest_Title,
                                     'Нет');

        if ($arr1d_Company['ID'] == 13519 and $dest_Title == 'UF_CRM_POTREBN599337') {
            $debug_Stop = true; // Потребность СИЗОД ПРОМ список
        }

        if ($sour_Id_Yes > 0 and $sour_Id_No_ > 0) { // не во всех полях есть нужные ID

            // если значения полей парных одинаковые, то пропустить
            if (
                $arr1d_Company[$arr1d_Titles[0]] == 0 and
                $arr1d_Company[$arr1d_Titles[1]] != $sour_Id_No_ // 'Нет'
                or
                $arr1d_Company[$arr1d_Titles[0]] == 1 and
                $arr1d_Company[$arr1d_Titles[1]] != $sour_Id_Yes // 'Да'
            ) {
                // какой ID вбить в поле назначения ?
                $dest_Value_ID = ($arr1d_Company[$sour_Title] == 1) ? $sour_Id_Yes : $sour_Id_No_;
                assert($dest_Value_ID > 0);

                // нужен массив вида [UF_CRM_UCHASTVU909709 >= 61867]
                $arr1d_Field_Value[$dest_Title] = $dest_Value_ID;
            }
        }
    }
    return $arr1d_Field_Value;
}


/** вернуть массив 2мерный title парных полей пользователя  */
function array2d_UF_Titles(): array
{
    global $WEB_HOOK;
    $arr1d_Company_Fields = company_Fields($WEB_HOOK,
                                           0)['result'];
    return array2d_UF_Title_by_listLabel($arr1d_Company_Fields,
                                         array2d_ListLabels_Dest_Sour());
}

/** обновить поля компаний - тип компаний */
function companys_Fields_Pairs_Company_Type(array $arr_Fields_Pairs): array
{
    global $WEB_HOOK;
    global $BX24;

    $arr_Companys = batch_Fast_Gomzin($WEB_HOOK,
                                      'crm.company.list',
                                      $arr_Fields_Pairs,
                                      []);
    // вернёт массив вида
    //    {
    //        'COMPANY_TYPE': '3', // STATUS_ID из crm.status.list [ENTITY_ID] => COMPANY_TYPE
    //        'ID': '9', // компания
    //        'UF_CRM_1662558139': null // пользовательское поле
    //    },
    // array_2_File_JSON('./txt/arr_Companys',
    //                   $arr_Companys);

    $arr_Batch_Params = companys_Fields_Pairs_Company_Type_Batch($arr_Fields_Pairs[0],
                                                                 $arr_Fields_Pairs[1],
                                                                 $arr_Companys);
    // array_2_File_JSON('./txt/arr_Batch_Params',
    //                   $arr_Batch_Params);

    $arr_Batch = $BX24->buildCommands('crm.company.update',
                                      $arr_Batch_Params);
    // array_2_File_JSON('./txt/arr_Batch',
    //                   $arr_Batch);

    // $arr_Batch_1 = [array_shift($arr_Batch)]; // для тестов
    // $start = microtime(true);

    // основное действие = обновить сущности, троттлинг
    $result = batchRequest_Dispenser_Array($arr_Batch,
                                           49,
                                           $BX24);

    // $finish = count($arr_Batch) . ' строк batchRequest_Dispenser_Array был выполнен за ' . (microtime(true) - $start) . ' секунд';
    // echo $finish;
    // file_put_contents('batchRequest_Dispenser_Array',
    //                   $finish);

    // array_2_File_JSON('./txt/' . __FUNCTION__,
    //                   $result);
    return $result;
}

/** вернуть массив параметров batch запроса
 * в поле положить из COMPANY_TYPE
 * массив было стало сохранить
 */
function companys_Fields_Pairs_Company_Type_Batch(string $sour,
                                                  string $dest,
                                                  array $arr_Companys): array
{

    $arr_Batch_Params = [];
    $arr_Old_New      = [['ID', $sour, $dest]]; // было стало

    foreach ($arr_Companys as $arr_Company_1) {

        if ($arr_Company_1[$sour] != $arr_Company_1[$dest]) { // создать запись batch

            $arr_Old_New[] = [
                $arr_Company_1['ID'],
                $arr_Company_1[$sour],
                $arr_Company_1[$dest],
            ];

            $arr_Field[$dest]   = $arr_Company_1[$sour];
            $arr_Batch_Params[] = [
                'ID' => $arr_Company_1['ID'],
                'fields' => $arr_Field,
            ];
        }
    }

    array_2_File_CSV($arr_Old_New,
                     './txt/arr_Old_New');

    return $arr_Batch_Params;
}

<?php

declare(strict_types=1);

require_once __DIR__ . '/crest_Methods.php';
require_once __DIR__ . '/lib_Php.php';

function result_total_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $method = '';

    $result = result_total($method);
    assert($result > 17000);

    echo 'time passed = ' . (microtime(true) - $start) . PHP_EOL;
}

function batch_Limit_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $go = microtime(true);

    $method = 'tasks.task.list';
    $params = ['select' => ['ID']];
    $start = 0;
    $limit = 50;
//    $total = 51;

    $result = batch_Limit($method, $params, $start, $limit);

    assert(count($result) === 2, __FUNCTION__);
    $stop = microtime(true);
    $pass = $stop - $go;
    $pass = number_format($pass, 6, '.', ' ');
    echo 'time passed = ' . $pass . PHP_EOL;
}

function list_Batch_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $method = 'tasks.task.list';
    $fields = [
        0 => 'TITLE',
        1 => 'CREATED_BY',
        2 => 'RESPONSIBLE_ID',
        3 => 'CREATED_DATE',
        4 => 'CLOSED_DATE',
        5 => 'GROUP_ID',
        6 => 'DEADLINE',
        7 => 'STATUS',
        8 => 'DESCRIPTION',
    ];
    $params = ['select' => $fields,
               'order'  => ['ID' => 'asc']];
    $limit = 50;

    $result = list_Batch($method, $params, 0, $limit);
    $passed = (microtime(true) - $start);
    $passed = number_format($passed, 6);
    echo 'time passed = ' . $passed . PHP_EOL;

    $tasks = batch_Results_2_Array($result);
    // $tasks = array_Duplicate_by_Keys_Delete($tasks, ['id','title']);
    array_2_Table_ClipBoard($tasks);
    echo 'В буфере обмена $tasks для вставки в Excel';
}

function start_Choice_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $startRun = microtime(true);

    // создаем массивы для параметров функции
    $batch = [
        0 => [
            'params' => [
                'order' => [
                    'ID' => 'desc'
                ]
            ]
        ]
    ];
    $batch_Result = [
        'result' => [
            'result' => [
                49 => [
                    'tasks' => [
                        49 => [
                            'id' => 123
                        ]
                    ]
                ]
            ]
        ]
    ];

    // проверяем, что при заданных параметрах функция возвращает правильное значение
    assert(start_Choice(0, 10, $batch, $batch_Result) == 124);

    // создаем другие значения параметров и проверяем функцию снова
    $batch = [
        0 => [
            'params' => []
        ]
    ];
    $limit = 50;
    $start = 500;
    assert(start_Choice($start, $limit, $batch, $batch_Result) == ($start + $limit * $limit));
    echo 'time passed = ' . number_format(microtime(true) - $startRun, 6, '.', ' ') . PHP_EOL;
}

function array_Key_Max_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

    // Создаем массив для теста
    $test_array = [
        ['id'   => 1,
         'name' => 'John',
         'age'  => 25,],
        ['id'   => 2,
         'name' => 'Jane',
         'age'  => 30,],
        ['id'   => 3,
         'name' => 'Bob',
         'age'  => 35,],];

// Проверяем функцию array_Key_Max на предмет нахождения максимального значения ключа 'age'
    $result = array_Key_Max($test_array, 'age');
    $expected = 35;

    if ($result === $expected) {
        echo 'Тест пройден!';
    } else {
        echo 'Тест не пройден!';
    }
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
}

function batch_1_Test(): void
{
    $method = 'tasks.task.list';

    $query = [
        '01' => ['method' => $method,
                 'params' => ['select' => ['ID'],
                              'start'  => -1,]
        ],
    ];

    $arr = CRest::callBatch($query);
    assert(is_array($arr), 'CRest::callBatch($query)');
}

function batch_2_Test(): void
{
    $method = 'tasks.task.list';

    $query = [
        '01' => ['method' => $method,
                 'params' => ['select' => ['ID'],
                              'filter' => ['>=ID' => 0],
                              'start'  => -1,]
        ],
        '02' => ['method' => $method,
                 'params' => ['select' => ['ID'],
                              'filter' => ['>=ID' => '$result[01][tasks][49][id]'],
                              'start'  => -1] //$result['01']['result']['result']['01']['tasks'][49]['id'],]
        ]];
    //                              'start'  => 50,]

//    $query = ['get_task_1' => ['method' => 'tasks.task.get',
//                               'params' => [
//                                   'taskId' => 123]],
//              'get_task_2' => ['method' => 'tasks.task.get',
//                               'params' => ['taskId' => '$result[get_task_1][task][id]'
//                                            // Используем данные из предыдущего запроса
//                               ]],
//    ];

    $arr = CRest::callBatch($query);
    assert(is_array($arr), 'CRest::callBatch($query)');
}

/** @noinspection PhpUnused */
function batch_3_Test(): void
{
    $method = 'tasks.task.list';

    $query = [
        '01' => ['method' => $method,
                 'params' => ['select' => ['ID'],
                              'start'  => -1,]
        ],
        '02' => ['method' => $method,
                 'params' => ['select' => ['ID'],
                              // 'start'  => $result['01']['result']['result']['01']['tasks'][49]['id'],]
                              'start'  => 50,]

        ]

    ];

    $arr = CRest::callBatch($query);
    assert(is_array($arr), 'CRest::callBatch($query)');
}

// тест для функции array_Duplicate_by_Keys_Delete
function array_Duplicate_by_Keys_Delete_Test()
{
    $array = [
        ['id' => '1', 'title' => 'Заполнить профиль'],
        ['id' => '6', 'title' => 'Заполнить профиль'],
        ['id' => '1', 'title' => 'Заполнить профиль'],
        ['id' => '2', 'title' => 'Завершить регистрацию'],
    ];
    $keys = ['id'];
    $expected = [
        ['id' => '1', 'title' => 'Заполнить профиль'],
        ['id' => '6', 'title' => 'Заполнить профиль'],
        ['id' => '2', 'title' => 'Завершить регистрацию'],
    ];

    $result = array_Duplicate_by_Keys_Delete($array, $keys);
    assert($expected == $result);
}

//batch_2_Test();
//batch_1_Test();
list_Batch_Test();
array_Duplicate_by_Keys_Delete_Test();
batch_2_Test();
array_Key_Max_Test();
start_Choice_Test();
batch_Limit_Test();
result_total_Test();

<?php
/** @noinspection PhpUnused */

declare(strict_types=1);

require_once __DIR__ . '/aTasks_IN_Work.php';

//const DEBUG = true;

function googleSheet_Headers_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

    $sheet_Name = sheetName_by_ID(SPREAD_SHEET_ID, SHEET_ID, CREDENTIALS);
    $spread_Sheet_Cred = ['spreads_ID' => SPREAD_SHEET_ID,
                          'sheet_Name' => $sheet_Name,
                          'credential' => CREDENTIALS];
    $result = googleSheet_Headers($spread_Sheet_Cred);

    assert(count($result['values'][0]) > 9);

    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
}

function bitrix24_Batch_4_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $headers = ['Название', 'Постановщик'];

    $result = bitrix24_Batch_4(WEB_HOOK, $headers);
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
    assert(count($result) > 0);
}

function headers_2_Bitrix24_Fields_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $headers = ['Название', 'Постановщик'];

    $result = headers_2_Bitrix24_Fields(WEB_HOOK, $headers);
    $expect = [0 => 'TITLE', 1 => 'CREATED_BY'];
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
    assert($expect === $result);
}

function batch_Fast_InExSu_Double_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

    $hook = WEB_HOOK;
    $method = 'tasks.task.list';
    $fields = [];
//        [
//        0 => 'TITLE',
//        1 => 'CREATED_BY',
//        2 => 'RESPONSIBLE_ID',
//        3 => 'CREATED_DATE',
//        4 => 'CLOSED_DATE',
//        5 => 'GROUP_ID',
//        6 => 'DEADLINE',
//        7 => 'STATUS',
//        8 => 'DESCRIPTION',
//    ];

    /**
     * по одному хорошо работает
     */
    /*
for ($i = 0; $i <= count($fields); $i++) {
    $select_fields = array_slice($fields, 0, 1);
    $result = batch_Fast_InExSu_Double($hook, $method, $select_fields);
    if (count($result) < 1) {
        $stop = true;
    }
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
}
*/

    $result = batch_Fast_InExSu_Double($hook, $method, $fields);
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
    assert(!isset($result['error_description']));
}

function columns_Rearrange_by_Headings_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

// Тестовые данные
    $google_Headers = ['заг1', 'заг2', 'заг3', 'заг4'];
    $russian_English = ['заг2' => 'head2', 'заг1' => 'head1', 'заг3' => 'head3'];
    $table = [
        0 => ['head3' => 'z03', 'head1' => 'x01', 'head5' => 'нет', 'head2' => 'b02'],
        1 => ['head3' => 'v13', 'head1' => 'x11', 'head5' => 'нет', 'head2' => 'b22']
    ];
    $expected = [
        0 => ['head1' => 'x01', 'head2' => 'b02', 'head3' => 'z03', 'заг4' => ''],
        1 => ['head1' => 'x11', 'head2' => 'b22', 'head3' => 'v13', 'заг4' => '']
    ];

// Выполнение функции и проверка результата
    $result = columns_Rearrange_by_Headings($table, $google_Headers, $russian_English);
    assert($result === $expected);

    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
}

function d_5_columns_Rearrange_by_Headings_6_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

    $spread_sheet_id = SPREAD_SHEET_ID;

    $sheetName = sheetName_by_ID(SPREAD_SHEET_ID,
                                 SHEET_ID,
                                 CREDENTIALS);

    $spread_Sheet_Cred = ['spreads_ID' => $spread_sheet_id,
                          'sheet_Name' => $sheetName,
                          'credential' => CREDENTIALS,
                          'web_hoook_' => WEB_HOOK];

    $table = json_decode(file_get_contents('table.json2023-04-24 18-19-27.txt'), true);

    $result = d_5_columns_Rearrange_by_Headings_6($spread_Sheet_Cred, $table);
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
    assert(is_array($result));
}

function task_Fields_Russian_English_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

    // создаем массив для тестирования
    $test_tasks_task_getFields = [
        'ID'        => [
            'title'   => 'ID',
            'type'    => 'integer',
            'primary' => true,],
        'PARENT_ID' => [
            'title'   => 'ID базовой задачи',
            'type'    => 'integer',
            'default' => 0,],
        'TITLE'     => [
            'title'    => 'Название',
            'type'     => 'string',
            'required' => true,],
        'NOTitle'   => [
            'id' => 'z'],];

// создаем массив с корректными русско-английский названий полей задач
    $expectedResult = [
        'ID'                => 'id',
        'ID базовой задачи' => 'parentId',
        'Название'          => 'title',
        'notitle'           => 'notitle'
    ];

// проверяем функцию на корректность
    $result = task_Fields_Russian_English($test_tasks_task_getFields);
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;

    assert($result === $expectedResult);
}

function string_Right_From_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

    // тест для функции string_Right_From

// тест 1 - если искомая подстрока есть в строке
    $haystack = 'qwefilter%5B%3EID%5D=0';
    $from = 'filter%5B%3EID%5D=';
    $expected_result = '0';

    $result = string_Right_From($haystack, $from);

    assert($result === $expected_result);

// тест 2 - если искомой подстроки нет в строке
    $haystack = 'qwefilter%5B%3CID%5D=0';
    $expected_result = '';

    $result = string_Right_From($haystack, $from);

    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;

    assert($result === $expected_result);
}

function table_Make_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

    $tasks = json_decode(file_get_contents('table.json2023-04-24 18-19-27.txt'), true);

    $sheet_Name = sheetName_by_ID(SPREAD_SHEET_ID, SHEET_ID, CREDENTIALS);
    $spread_Sheet_Cred = ['spreads_ID' => SPREAD_SHEET_ID,
                          'sheet_Name' => $sheet_Name,
                          'credential' => CREDENTIALS];

    $result = table_Make($spread_Sheet_Cred, $tasks);
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
    assert(isset($result[0]['createdBy_ID']));
    assert(isset($result[0]['responsibleId_ID']));
}

function task_field_User_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $task = b24request(WEB_HOOK, 'tasks.task.get', ['taskId' => '39107'], 0)['result']['task'];

    $head = 'Отдел Ответственного';
    $result = task_field_User($task, $head);
    assert($result === 'Отдел развития и цифровизации');

    $head = 'Отдел Постановщика';
    $result = task_field_User($task, $head);
    assert($result === 'Отдел развития и цифровизации');

    $head = 'ЮрЛицо Ответственного';
    $result = task_field_User($task, $head);
    assert($result === 'ООО "Зелинский групп"');

    $head = 'ЮрЛицо Постановщика';
    $result = task_field_User($task, $head);
    assert($result === 'ООО "Зелинский групп"');

    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
}

function task_Fields_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $task = b24request(WEB_HOOK, 'tasks.task.get', ['taskId' => '39107'], 0)['result']['task'];

    $pairs = [
        'Название'      => 'Скорректирвать скрипт PHP - добавить выгрузку задач не завершённых в предыдущие годы.',
        'Постановщик'   => 'Тихомирова, Ольга Сергеевна',
        'Исполнитель'   => 'Попов, Михаил Евгеньевич',
        'Дата создания' => '2023-03-14',
        'Дата закрытия' => null,
        'Проект'        => 'Аналитика',
        'Крайний срок'  => '2023-04-21',
        'Статус'        => 'Выполняется'];

    foreach ($pairs as $head => $value) {
        $result = task_Field_System($task, $head);
//        if ($result !== $value) {
//            $stop = true;
//        }
        assert($result === $value);
    }
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
}

function quarter_Number_IF_In_Test()
{
    assert(quarter_Number_IF_In('2022-01-01', '2022-01-31', '1') === '1');
    assert(quarter_Number_IF_In('2022-02-01', '2022-02-28', '2') === '');
    assert(quarter_Number_IF_In('2022-03-01', '2022-03-31', '1') === '1');
    assert(quarter_Number_IF_In('2022-04-01', '2022-04-30', '1') === '');
}

function array_2_GoogleSheet_End_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

    $sheet_Name = sheetName_by_ID(SPREAD_SHEET_ID, SHEET_ID, CREDENTIALS);
    $spread_Sheet_Cred = ['spreads_ID' => SPREAD_SHEET_ID,
                          'sheet_Name' => $sheet_Name,
                          'credential' => CREDENTIALS];

    $file = 'В гуглтаблицу2023-04-27 18-53-13.txt';
    $array = array_values(file_JSON_2_Array($file));

    array_2_GoogleSheet_End($spread_Sheet_Cred, $array);

    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
}

function tasksInWork_Test(){
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

    $spread_sheet_id = SPREAD_SHEET_ID;

    $sheetName = sheetName_by_ID(SPREAD_SHEET_ID,
        SHEET_ID,
        CREDENTIALS);

    $spread_Sheet_Cred = ['spreads_ID' => $spread_sheet_id,
        'sheet_Name' => $sheetName,
        'credential' => CREDENTIALS,
        'web_hoook_' => WEB_HOOK];

    $tasks = bitrix24_Array_OK(
        bitrix24_Batch_4(
            WEB_HOOK,
            headers_Ok(
                googleSheet_Headers(
                    $spread_Sheet_Cred))));

    $result = tasksInWork($tasks);
    assert(is_array($result));
    echo 'time passed = ' . number_format(microtime(true) - $start,  6, '.', ' ') . PHP_EOL;
}

function tasksClosedNot_Test(){
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $tasks = [];

    $result = tasksClosedNot($tasks);
    assert(is_array($result));
    echo 'time passed = ' . number_format(microtime(true) - $start,  6, '.', ' ') . PHP_EOL;
}

function tasks_In_Work_3_Batches_Test(){
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $select_fields = ['ID', 'TITLE', 'CREATED_DATE', 'CLOSED_DATE', 'STATUS'];

    $result = tasks_In_Work_3_Batches(WEB_HOOK,$select_fields);

    echo 'time passed = ' . number_format(microtime(true) - $start,  6, '.', ' ') . PHP_EOL;
    assert(is_array($result));
}
tasks_In_Work_3_Batches_Test();

//tasksClosedNot_Test();
//tasksInWork_Test();
//array_2_GoogleSheet_End_Test();
//aChain();
//quarter_Number_IF_In_Test();
//task_Fields_Test();
//task_field_User_Test();
//table_Make_Test();
//column_Copy_Test();
//tasks_ID_2_Value_Test();
//string_Right_From_Test();
//task_Fields_Russian_English_Test();
//d_5_columns_Rearrange_by_Headings_6_Test();
//columns_Rearrange_by_Headings_Test();
//table_Fill_by_Headers_Test();
//batch_Fast_InExSu_Double_Test();
//headers_2_Bitrix24_Fields_Test();
//bitrix24_Batch_4_Test();
//googleSheet_Headers_Test();

<?php
/* Запускай на работу из deals_UF_List_Update_Test.php */

// ПП == пользовательское поле
// uf === user field

// Задание:
// Строки из ПП тип строка
// UF_CRM_1602662883400 (Способ закупки), UF_CRM_1627624301 (ФЗ)
// положить в
// ПП сделки тип список UF_CRM_1654498701 (Способ закупки:), UF_CRM_1652353902 (ФЗ:)

require_once __DIR__ . '/vendor/autoload.php';
require_once __DIR__ . '/lib_Bitrix24.php';

use App\Bitrix24\Bitrix24API;

//use App\Bitrix24\Bitrix24APIException;

// ФЗ
// отсюда взять UF_CRM_1627624301 ФЗ строка,  59 ID 3755
// UF_CRM_625414D7285F5 ФЗ список пустой - не трогаю
// сюда положить UF_CRM_1652353902 ФЗ: список, 141 ID 6581

function aMain(string $uf_Field_From_Name, string $uf_Field_Into_Name, string $uf_Field_Into_ID, int $id_Start): void
{

    $file_Name = __DIR__ . '/webHookURL.txt';
    $webHookURL = file_get_contents($file_Name);

    $bx24 = new Bitrix24API($webHookURL);

    $filter = [">ID" => $id_Start];
    $select = ['ID', 'TITLE', $uf_Field_From_Name, $uf_Field_Into_Name];

    // беру сделки
    $generator = $bx24->fetchDealList($filter, $select);

    // массив списка ПП - должен обновляться после вызова crm.deal.userfield.update
    $arr_UF_Into = b24request($webHookURL, 'crm.deal.userfield.get', ['ID' => $uf_Field_Into_ID])['result']['LIST'];

    foreach ($generator as $deals) {

        foreach ($deals as $deal_Part) {

            if (time_4_Show(3)) echo "В очереди сделка " . $deal_Part['ID'] . "\n";

            // пустой источник пропускаю
            if ($deal_Part[$uf_Field_From_Name] !== null) {

                if (trim($deal_Part[$uf_Field_From_Name]) !== trim($deal_Part[$uf_Field_Into_Name])) {

                    $id = $deal_Part['ID'];

                    if ($id > $id_Start) {

                        deal_Update_in_For($id, $webHookURL, $uf_Field_From_Name, $arr_UF_Into, $uf_Field_Into_Name, $uf_Field_Into_ID);
                    }
                }
            }
        }
    }
}

/** основная работа цикла */
function deal_Update_in_For(int $id, string $webHookURL, string $uf_Field_From_Name,
                            array $arr_UF_Into, string $uf_Field_Into_Name, string $uf_Field_Into_ID): void
{

    $deal = b24request($webHookURL, 'crm.deal.get', ['ID' => $id])['result'];

    $valu = is_null($deal[$uf_Field_Into_Name]) ? '' : $deal[$uf_Field_Into_Name];
    $into = field_by_Field($arr_UF_Into, 'ID', $valu, 'VALUE');
    $from = is_null($deal[$uf_Field_From_Name]) ? '' : $deal[$uf_Field_From_Name];

    if (trim((string)$from) !== trim((string)$into)) {

        log_2_File('Начинаю изучать сделку ' . $id . PHP_EOL);

        bitrix24_Deal_Array_UF_Update(
            $deal,
            $uf_Field_From_Name,
            $uf_Field_Into_Name,
            $uf_Field_Into_ID,
            $webHookURL);

        $message = 'Сделка ID: ' . $id . '; Было: ' . $deal[$uf_Field_Into_Name] . '; Стало: ' . $deal[$uf_Field_From_Name];
        log_2_File($message);
    } else {
        // log_2_File('Сделку НЕ обновлял: ' . $id);
    }
}


/** Массив сделки ПП обновить, взять строку из поля */
function bitrix24_Deal_Array_UF_Update(
    array $arr_Deal,
    string $uf_Field_From_Name,
    string $uf_Field_Into_Name,
    int $uf_Field_Into_ID,
    string $webHook): void
{

    $from = trim($arr_Deal[$uf_Field_From_Name]);
    $into = trim($arr_Deal[$uf_Field_Into_Name]);

    if ($from !== $into) {

        // Есть ли $from в ПП ФЗ:
        $arr_userField = b24request($webHook, 'crm.deal.userfield.get', ['ID' => $uf_Field_Into_ID])['result'];
        $arr_List = $arr_userField['LIST'];

        if (is_array($arr_List)) {

            userfield_Update($uf_Field_Into_ID, $from, $webHook, $uf_Field_Into_Name, $arr_List);

            deal_Update($arr_List, $from, $arr_Deal, $uf_Field_Into_Name, $webHook);

        }
    }
}

function userfield_Update(int $uf_Field_Into_ID, string $from, string $webHookURL, string $uf_Field_Into_Name, array $arr_List)
{
    // добавить в ПП
    if (array_Nested_Search($arr_List, $from) === false) {

        $arr_Fields = [
            'ID' => $uf_Field_Into_ID,
            'fields' => ['LIST' => [
                [
                    'VALUE' => $from,
                    'DEF' => 'N'
                ]
            ]]];

        b24request($webHookURL, 'crm.deal.userfield.update', $arr_Fields);
        $message = 'Добавил в ' . $uf_Field_Into_Name . ' => ' . $from . PHP_EOL;
        log_2_File($message);

        global $arr_UF_Into;
        $arr_UF_Into = b24request($webHookURL, 'crm.deal.userfield.get', ['ID' => $uf_Field_Into_ID])['result']['LIST'];
        $message = 'Обновил $uf_Field_Into_ID: ' . $uf_Field_Into_ID;
        log_2_File($message);
    }
}

function deal_Update(array $arr_List, string $from, array $arr_Deal, string $uf_Field_Into_Name, string $webHook)
{
    $id_LIST = id_by_Value($arr_List, $from);

    if (!is_numeric($id_LIST)) {
        log_2_File(__FUNCTION__ . '!is_numeric($id_LIST)', 'WARNING');
    } else {
        // в сделке обновить ID в поле
        $arr_Fields = [
            'ID' => $arr_Deal['ID'],
            'fields' => [$uf_Field_Into_Name => $id_LIST],
            'params' => ["REGISTER_SONET_EVENT" => "Y"]
        ];
        log_2_File('Обновляю сделку ' . $arr_Deal['ID'] . PHP_EOL);
        b24request($webHook, 'crm.deal.update', $arr_Fields);
    }
}

<?php

declare(strict_types=1);

$File_Name = __DIR__ . '/webHookURL.txt';
define(
    'WEB_HOOK',
    file_get_contents($File_Name)
);

require_once __DIR__ . '/lib_Php.php';
require_once __DIR__ . '/lib_B24_Tasks.php';
require_once __DIR__ . '/lib_Bitrix24.php';

function task_ID_2_Value_ForEach_Test()
{
    $arr_Task = [
        'title'         => 'Согласовать проведение производственных испытаний полумасок фильтрующих UNIX AIR на ФКП "Казанский государственный казенный пороховой завод"',
        'createdBy'     => '127',
        'responsibleId' => '127',
        'dateStart'     => '2022-02-04T13:48:16+03:00',
        'closedDate'    => '2022-03-09T06:19:29+03:00',
        'groupId'       => '97',
        'id'            => '18933',
        'group'         =>
            [
                'id'             => '97',
                'name'           => 'План совместных работ',
                'opened'         => false,
                'membersCount'   => 14,
                'image'          => '',
                'additionalData' =>
                    [
                    ],
            ],
        'creator'       =>
            [
                'id'   => '127',
                'name' => 'Погудина, Татьяна Алексеевна',
                'link' => '/company/personal/user/127/',
                'icon' => 'https://zelinskygroup.bitrix24.ru/b6361393/resize_cache/322131/c0120a8d7c10d63c83e32398d1ec4d9e/main/77a/77a8711fefc0f9ab7357629fe4e148f8/R-3.JPG',
            ],
        'responsible'   =>
            [
                'id'   => '127',
                'name' => 'Погудина, Татьяна Алексеевна',
                'link' => '/company/personal/user/127/',
                'icon' => 'https://zelinskygroup.bitrix24.ru/b6361393/resize_cache/322131/c0120a8d7c10d63c83e32398d1ec4d9e/main/77a/77a8711fefc0f9ab7357629fe4e148f8/R-3.JPG',
            ],
    ];

    $arr = task_ID_2_Value_ForEach($arr_Task);
    print_r($arr);
}

function tasks_Filter_Test()
{
    $arr_filter = [
        'CHECK_PERMISSIONS' => 'N',
        'FILTER'            => [
            'LOGIC' => 'OR',
            ['>CREATED_DATE' => date('Y-01-01 00:00:00'), '<=CREATED_DATE' => date('Y-12-31 23:59:59')],
            ['>CLOSED_DATE' => date('Y-01-01 00:00:00'), '<=CLOSED_DATE' => date('Y-12-31 23:59:59')],
            ['>CREATED_DATE' => 0, '<=CREATED_DATE' => date('Y-01-01 00:00:00')],
            ['>CLOSED_DATE' => 0, '<=CLOSED_DATE' => date('Y-01-01 00:00:00')]
        ]
    ];

    $fields = ['ID'];
    $params = ['select' => $fields];
//    $tasks = batch_Fast_Gomzin(WEB_HOOK, 'tasks.task.list', $params);
    $tasks = list_Jet(WEB_HOOK, 'tasks.task.list', $params);
}

function timeClear_Test()
{
    $testCases = [
        ['2023-03-14T08:43:56+03:00', '2023-03-14'],
        ['2023-03-14', '2023-03-14'],
        ['', ''],
        ['не дата', 'не дата']];

    foreach ($testCases as $testCase) {
        $input = $testCase[0];
        $expectedOutput = $testCase[1];
        $output = timeClear($input);

        assert($output === $expectedOutput,
               "Test failed for input '$input'. Expected '$expectedOutput' but got '$output'");
    }
}

timeClear_Test();
//tasks_Filter_Test();
// task_ID_2_Value_ForEach_Test();


<?php

declare(strict_types=1);

// Задачи просроченные

$File_Name = __DIR__ . '/webHookURL.txt';
define(
    'WEB_HOOK',
    file_get_contents($File_Name)
);

require_once __DIR__ . '/vendor/autoload.php';
require_once __DIR__ . '/crest_SRP.php';
require_once __DIR__ . '/lib_Bitrix24.php';
require_once __DIR__ . '/lib_Php.php';
require_once __DIR__ . '/lib_B24_Tasks.php';
require_once __DIR__ . '/google_Sheets.php';

use App\Bitrix24\Bitrix24API;

// use Google\Service\Sheets\UpdateValuesResponse;

$BX24 = new Bitrix24API(WEB_HOOK);

/** поместить товары Битрикс24 в гугл таблицу
 * $arr1d_ListLabels - человечьи названия полей*/
function b24_Tasks_2_Google_Sheet(
    string $googleSheet_Range_Address,
    string $googleSheet_spreadSheets_ID,
    array $arr1d_ListLabels,
    string $file_Credentials,
    array $filter,
    string $sheet_Name,
    $range_Clear,
    string $spread_Sheet_Id
) {
    log_2_File('Поля задач из Битрикс24 загрузить');
    $arr_Task_Fields = b24request(
        WEB_HOOK,
        'tasks.task.getFields'
    )['result']['fields'];

    log_2_File('поля названия в понятные для Bitrix24');
    $arr_Fields = products_userFields_Title_by_listLabel_Bingo(
        $arr_Task_Fields,
        $arr1d_ListLabels
    );

    $params = [
        'filter' => $filter,
        'select' => $arr_Fields
    ];

    log_2_File('Задачи из Битрикс24 загрузить');
    $arr_Tasks_IDs = jet_List_Tasks(WEB_HOOK,
                                    'tasks.task.list',
                                    $params);

    log_2_File('Названия полей задач в ключи: create_By в CREATE_BY');
    $arr_Fields_Keys = array_map(
        'b24_Field_Name_2_Key',
        $arr_Fields
    );

    log_2_File('заменить в задачах ID на значения');
    $arr_Tasks_Value = array_map(
        'task_ID_2_Value_ForEach',
        $arr_Tasks_IDs
    );

    log_2_File('восстановить сортировку полей, сломанную batch_Fast_Gomzin');
    $arr_Tasks_IDs_Column_Ordered = array2D_Order_by_Array(
        $arr_Tasks_Value,
        $arr_Fields_Keys
    );

    log_2_File('массив PHP в массив пригодный для вставки в диапазон листа гуглтаблицы');
    $arr_2_Sheet = array_Php_2_Array_Sheet($arr_Tasks_IDs_Column_Ordered);

    log_2_File('Таблица подготовлена, кладу её в таблицу');

    if (count($arr_2_Sheet) > 1) {
        log_2_File('Таблицу очистить');
        googleSheet_Range_Clear(
            $sheet_Name . $range_Clear,
            $spread_Sheet_Id,
            $file_Credentials
        );

        $arr_Return = array_2_Google_Sheet(
            $arr_2_Sheet,
            $googleSheet_Range_Address,
            $googleSheet_spreadSheets_ID,
            $file_Credentials
        );
    }
    return $arr_Return ?? [];
}

// запуск
function b24_Tasks_2_Google_Sheet_RUN(
    string $sheet_Name,
    string $range_Clear,
    string $spread_Sheet_Id,
    array $filter
) {
    global $File_Credentials;

    // log_2_File('Таблицу очистить');
    // googleSheet_Range_Clear($sheet_Name . $range_Clear,
    //                         $spread_Sheet_Id,
    //                         $File_Credentials);
    //
    log_2_File('из гуглтаблицы взять заголовки');
    $arr1d_ListLabels = googleSheet_Range_2_Array(
        $sheet_Name . '1:1',
        $spread_Sheet_Id,
        $File_Credentials
    )['values'][0];

    b24_Tasks_2_Google_Sheet(
        $sheet_Name . 'A2',
        $spread_Sheet_Id,
        $arr1d_ListLabels,
        $File_Credentials,
        $filter,
        $sheet_Name,
        $range_Clear,
        $spread_Sheet_Id
    );

    log_2_File('Таблица вставлена. Программа завершена. <br> <br> Страницу можно закрыть.');
}

// b24_Tasks_2_Google_Sheet_RUN('Задачи просроченные!A2',
//                              '13yvjC9hV6bVwHdtG6pOTFx6D1LSV9yNuE_DvXa5QX8Y',
//                              ['STATUS'   => '-1']);
//

<?php
declare(strict_types=1);

// Задачи просроченные
// Вызов https://restzg.ru/phpb24/Bitrix24-entity-operations/aTasks_OverDue_2_GoogleSheet.php

require_once __DIR__ . '/aTasks_2_GoogleSheet_Methods.php';

b24_Tasks_2_Google_Sheet_RUN('Задачи просроченные!',
                             'A2:Z',
                             '13yvjC9hV6bVwHdtG6pOTFx6D1LSV9yNuE_DvXa5QX8Y',
                             ['STATUS' => '-1']);


<?php
// uf = user field
// для массового обновления юзай crest_SRP_Test.php

require_once "companys_UF_Update_by_1.php";
const COMPANY_TEST_ID = 13519;

/** @noinspection PhpUnused */
function aUF_Update_Flag_2_List_RUN(): void
{
    global $BX24;
    $uf_From_Name = 'UF_CRM_1548155934428'; // "В компании есть номенклатурный справочник";
    $uf_Into_Name = 'UF_CRM_1660889613'; // "В компании есть номенклатурный справочник список";
    $list_ID_0 = 61575; // значение Нет в UF_CRM_1660889613 тип список
    $list_ID_1 = 61573; // значение Да  в UF_CRM_1660889613 тип список

    aUF_Update_Flag_2_List_Batch($BX24,
        $uf_From_Name,
        $uf_Into_Name,
        $list_ID_0,
        $list_ID_1,
        17325); // часть уже улучшена
}

/** @noinspection PhpUnused */
function company_List_fetch_Test(): void
{
    global $BX24;
    $uf_From_Name = 'UF_CRM_1548155934428'; //В компании есть номенклатурный справочник;
    $uf_Into_Name = 'UF_CRM_1660889613'; // В компании есть номенклатурный справочник список;
    $id_Start = COMPANY_TEST_ID;
    $generator = company_List_fetch($BX24, $uf_From_Name, $uf_Into_Name, $id_Start);
    assert($generator->valid());
}

/** @noinspection PhpUnused */
function company_UF_Flag_2_List_Update_Test(): void
{
    global $WEB_HOOK;
    $comp_ID = '13519';
    $uf_From_Name = 'UF_CRM_1548155934428'; //В компании есть номенклатурный справочник;
    $uf_Into_Name = 'UF_CRM_1660889613'; // В компании есть номенклатурный справочник список;
    $list_ID_0 = 61575; // значение Нет в UF_CRM_1660889613
    $list_ID_1 = 61573; // значение Да  в UF_CRM_1660889613

    company_UF_Flag_2_List_Update($comp_ID,
        $uf_From_Name,
        $uf_Into_Name,
        $list_ID_0,
        $list_ID_1,
        $WEB_HOOK);
}

// тесты
//aUF_Update_Flag_2_List_RUN();
//company_List_fetch_Test();
//company_UF_Flag_2_List_Update_Test();
<?php
declare(strict_types=1);

// Битрикс24 задачи без крайнего срока в гугл таблицу.
// https://restzg.ru/phpb24/Bitrix24-entity-operations/aTasks_NOLimit_2_GoogleSheet.php

require_once __DIR__ . '/aTasks_2_GoogleSheet_Methods.php';

b24_Tasks_2_Google_Sheet_RUN('Задачи без крайнего срока!',
                             'A2:I',
                             '13yvjC9hV6bVwHdtG6pOTFx6D1LSV9yNuE_DvXa5QX8Y',
                             ['DEADLINE' => '']);


<?php
declare(strict_types=1);

// Задача https://zelinskygroup.bitrix24
//.ru/workgroups/group/95/tasks/task/view/39107/
// Вызов https://restzg.ru/phpb24/Bitrix24-entity-operations/aTasks_2_GoogleSheet_Create_Compl.php

require_once __DIR__ . '/aTasks_2_GoogleSheet_Methods.php';

/**
 * Фильтрация по дате
 * https://dev.1c-bitrix.ru/api_help/iblock/classes/ciblockelement/getlist.php
 * $date_from = '12.09.2014';
 * $date_to = '18.09.2014';
 *
 * $db_el = CIBlockElement::GetList(
 * array('ID' => 'DESC'),
 * array(
 * '>=DATE_CREATE' => $date_from,
 * '<=DATE_CREATE' => $date_to . ' 23:59:59'
 * )
 * ); */

// $arr_filter = [
//     ">=CREATED_DATE" => "01.01." . date("Y"),
//     "<=CLOSED_DATE" => "31.12." . date("Y"),
//     "LOGIC" => "OR",
//     [
//         "CLOSED_DATE" => false,
//         "<YEAR_CLOSED_DATE" => date("Y")
//     ]];

// созданы в текущем году или завершены в текущем году или не завершены в предыдущие годы
$filter = [
    'LOGIC' => 'OR',
    [
        // '>=CREATED_DATE' => '01.01.' . date('Y'), // созданы в текущем году
        // 1219 строк
        '>=CLOSED_DATE' => '01.01.' . date('Y'), // дата закрытия в текущем году или позже
        "<=CLOSED_DATE" => "31.12." . date("Y"), // завершены в текущем году
        // 'CLOSED_DATE' => '', // задачи с пустой датой закрытия
    ]];
b24_Tasks_2_Google_Sheet_RUN('Задачи НЕзавершённые!',
                             'A2:Z',
                             '1x_eyfjNhPZeewwERFA8QILbJpfk1ubhr8tzAM0KT-5Y',
    // Битрикс24 проекты задачи ЗГ
                             $filter);

<?php

declare(strict_types=1);

/**
 * все задачи, которые были в работе в текущем году:
 * а это созданы или завершены в 2023 или не завершены в предыдущие годы.
 * https://zelinskygroup.bitrix24.ru/company/personal/user/853/tasks/task/view/39107/
 * Вызов https://restzg.ru/phpb24/Bitrix24-entity-operations/aTasks_IN_Work.php
 */

/**
 * Mermaid
 * https://docs.google.com/spreadsheets/d/1gun5pN2wczcBtfkD5kysavjEKX63tcyh-YztvXyXeOU/edit#gid=1137426431
 * https://mermaid-js.github.io/mermaid-live-editor/edit#pako:eNqNU91q2zAUfhVxrhRwQuSfWPagF6W73NV2NQxDxO5iqO3gOdAu5KIpG4wOBmN36_YMWdLQ0LLtFY7eaMcSKSwJYxeWP-n7kY5-pjCs0gxieF2r8Yi9OHmSlIJz0emwbpfhDS70pb7EDS4Z3uECV_gLH-hb4n3bMmLuGK70FTEPek6KH8Rv9Ht9TQFHzOXc7XQo1IL_Cz1ifWP2OPeM2QJj_oILw_mc-7vcN1zruWHxKwWtOLd_o9sdMo7v-NvMu9YfcI0_aeGfrP-zvtbviLolwyM2OXbi1n2cN3V-7vqvjlUzHBlfwHlgVBbslbutbMD5wOgs-KuykPNwl_tnZdawv7Vtabft5tK5tEVu9Fx_ZHh_8LxwbeIl59KEWrAfuiTY2h7jloeP_-rwasGBIqsLlad056ZJyVgCzSgrsgRigml2qiZnTQJJOSPpZJyqJnua5k1VQ9zUk8wBNWmq5xflcNu3mpNc0Q0uID5VZ29odKzKl1VVbEXUhXgK5xBL2ZMDN5KRHwUyDPueAxcQdwd-rx_0aVDIMAoDGc0ceGsCRE-4QvjCc13fEyIMAgcys6Jn9uWYBzT7A_1jahI
 */

/**
 * Адрес параметров вебхука https://zelinskygroup.bitrix24.ru/devops/edit/in-hook/417/
 */

// Таблица Битрикс24 проекты задачи ЗГ
// https://docs.google.com/spreadsheets/d/1x_eyfjNhPZeewwERFA8QILbJpfk1ubhr8tzAM0KT-5Y
// const SPREAD_SHEET_ID = '1x_eyfjNhPZeewwERFA8QILbJpfk1ubhr8tzAM0KT-5Y';

/**
 * Константы объявляю, чтобы использовать в файле тестов aTasks_IN_Work_Tests.php
 */

// Копия Битрикс24 проекты задачи ЗГ 2023-04-21
// https://docs.google.com/spreadsheets/d/1wvikLCK5MNYmHbLv3ZU4EmDZK05I15IsmAxPTyjkknQ
//const SPREAD_SHEET_ID = '1wvikLCK5MNYmHbLv3ZU4EmDZK05I15IsmAxPTyjkknQ';
// Битрикс24 проекты задачи
// https://docs.google.com/spreadsheets/d/1x_eyfjNhPZeewwERFA8QILbJpfk1ubhr8tzAM0KT-5Y
const SPREAD_SHEET_ID = '1x_eyfjNhPZeewwERFA8QILbJpfk1ubhr8tzAM0KT-5Y';

// одинаковая у обоих таблиц
const SHEET_ID = '1823613534';
const CREDENTIALS = __DIR__ . '/popov-php-bitrix24-zg-20220603-a1df757bd724.json';

$fileName = __DIR__ . '/webHookURL.txt';
define('WEB_HOOK', file_get_contents($fileName));


require_once __DIR__ . '/vendor/autoload.php';

use Google\Service\Sheets\ValueRange;

require_once __DIR__ . '/google_Sheets.php';
require_once __DIR__ . '/lib_Batch_Fast.php';
require_once __DIR__ . '/lib_Bitrix24.php';
require_once __DIR__ . '/lib_B24_Tasks.php';

function aChain()
{
    file_Clear_If('error.log', 1000000);
    unlink_If('log.txt');

    $spread_sheet_id = SPREAD_SHEET_ID;

    $sheetName = sheetName_by_ID(SPREAD_SHEET_ID,
        SHEET_ID,
        CREDENTIALS);

    $spread_Sheet_Cred = ['spreads_ID' => $spread_sheet_id,
        'sheet_Name' => $sheetName,
        'credential' => CREDENTIALS,
        'web_hoook_' => WEB_HOOK];

    array_2_GoogleSheet_End(
        $spread_Sheet_Cred,
        range_Clear_Decor(
            $spread_Sheet_Cred,
            table_Make(
                $spread_Sheet_Cred,
                tasksInWork(
                    bitrix24_Array_OK(
                        bitrix24_Batch_4(
                            WEB_HOOK,
                            headers_Ok(
                                googleSheet_Headers(
                                    $spread_Sheet_Cred))))))));
}

/**
 * Создать массив для вставки в гуглтаблицу
 * Проходом по массиву задач преобразовывать их в строку таблицы
 */
function table_Make(array $spread_Sheet_Cred, array $tasks): array
{
    $run = microtime(true);
    echo __FUNCTION__ . ': ';

    $heads_User = headers_Ok(googleSheet_Headers($spread_Sheet_Cred));

    $table = [];

    $row_Max = count($tasks);
    $col_Max = count($heads_User);

    for ($row = 0; $row < $row_Max; $row++) {
        $task = $tasks[$row] ?? null;

        if (is_null($task)) continue;

        // сначала заполню пользовательские поля (русские названия), пока id не перезатёрты
        for ($col = 0; $col < $col_Max; $col++) {
            $head = $heads_User[$col];

            $table[$row][$col] = '';
            $table[$row][$col] = task_field_User($task, $head) ?? $table[$row][$col];
        }
        // теперь можно заменить значения системных полей
        for ($col = 0; $col < $col_Max; $col++) {
            $head = $heads_User[$col];
            // Если поле не найдено, ячейку таблицы НЕ перезаписывать
            $table[$row][$col] = task_Field_System($task, $head) ?? $table[$row][$col];
        }
    }

    echo 'time passed = ' . number_format(microtime(true) - $run, 6, '.', ' ') . PHP_EOL;

    return $table;
}

/**
 * В задаче найти английское поле по русскому
 * попробовать расшифровать id,
 * или вернуть null
 *
 * @param string $field
 * @param bool $timeClear
 * @param array $task
 * @return mixed|null
 */
function task_Field_System(array $task, string $field, bool $timeClear = true): ?string
{
    static $dictionary_Russian_English;

    if (empty($dictionary_Russian_English)) {
        $dictionary_Russian_English =
            task_Fields_Russian_English(
                tasks_task_getFields());
    }

    $english = $dictionary_Russian_English[$field] ?? '';

    return task_Field_Inner($task, $english, $timeClear) ?? null;
}

/**
 * По задаче и заголовку вернуть значение или null
 */
function task_field_User(array $task, string $field_Russian): ?string
{
    $return = null;

    switch ($field_Russian) {
        case 'Отдел Ответственного':
            $return = user_Departments($task['responsibleId'] ?? '');
            break;
        case'Отдел Постановщика':
            $return = user_Departments($task['createdBy'] ?? '');
            break;
        case 'ЮрЛицо Ответственного':
            $return = legal_Face($task['responsibleId'] ?? '');
            break;
        case 'ЮрЛицо Постановщика':
            $return = legal_Face($task['createdBy'] ?? '');
            break;
        case 'кв1':
        case 'кв2':
        case 'кв3':
        case 'кв4':
            $quarter = $field_Russian[4];
            $return = quarter_Number_IF_In($task['createdDate'] ?? '',
                $task['closedDate'] ?? '',
                $quarter);
            break;
    }

    return $return;
}

/**
 * Если любая дата квартала в диапазоне дат, вернуть '1', иначе ''
 *
 * @param string $date_Close
 * @param string $quarter
 * @param string $date_Create
 * @return string
 */
function quarter_Number_IF_In(string $date_Create, string $date_Close, string $quarter): string
{
    $year = (strlen($date_Create) > 3)
        ? substr($date_Create, 0, 4)
        : date('Y');

    $format = 'Y-m-d';

    $quarter_start = quarter_start($year, $quarter);
    $quarter_stop_ = quarter_Stop_($year, $quarter);

    $range_Start = (strtotime($date_Create))
        ? date($format, strtotime($date_Create))
        : year_Day_First($year);

    $range_Stop_ = (strtotime($date_Close))
        ? date($format, strtotime($date_Close))
        : year_Day_Last($year);

    return date_In_Range($range_Start,
        $range_Stop_,
        $quarter_start,
        $quarter_stop_)
        ? '1'
        : '';
}

/**
 * Декоратор запуска columns_Rearrange_by_Headings
 *
 * @param array $table
 * @param array $spread_Sheet_Cred
 * @return array
 */
function d_5_columns_Rearrange_by_Headings_6(array $spread_Sheet_Cred, array $table): array
{
    //TODO придётся переделать
    $google_Headers = headers_Ok(googleSheet_Headers($spread_Sheet_Cred));

    $russian_English =
        task_Fields_Russian_English(
            tasks_task_getFields());

    return columns_Rearrange_by_Headings($table,
        $google_Headers,
        $russian_English);
}

/* из массива вида
$tasks_task_getFields = [
    'ID'        => [
        'title'   => 'ID',
        'type'    => 'integer',
        'primary' => true,],
    'PARENT_ID' => [
        'title'   => 'ID базовой задачи',
        'type'    => 'integer',
        'default' => 0,],
    'TITLE'     => [
        'title'    => 'Название',
        'type'     => 'string',
        'required' => true,],
    'NOTitle'   => [
        'id' => 'z'],];
создать массив словарь русско-английский названий полей задач
$a = ['ID'                => 'ID',
      'ID базовой задачи' => 'PARENT_ID',
      'Название'          => 'TITLE',
      'NOTitle'           => 'NOTitle'];
*/
/**
 * @param array $tasks_task_getFields
 * @return array
 */
function task_Fields_Russian_English(array $tasks_task_getFields): array
{
    $dict = [];

    // TODO нужно добавить пары для столбцов из таблицы: Отдел Постановщика	Отдел Ответственного	ЮрЛицо Постановщика	ЮрЛицо Ответственного

    foreach ($tasks_task_getFields as $key => $field) {
        $dict[$field['title'] ?? b24_Field_Name_2_Key($key)] = b24_Field_Name_2_Key($key);
    }

    return $dict;
}

function tasks_task_getFields(): array
{
    $tasks_task_getFields = b24request(WEB_HOOK, 'tasks.task.getFields', [], 0);

    if (!isset($tasks_task_getFields['result']['fields'])) {
        error_EMail(__FUNCTION__, 'tasks.task.getFields НЕ вернул нужное');
        exit();
    }

    $fields = $tasks_task_getFields['result']['fields'];

    if ($fields['CREATED_DATE']['title'] === null) {
        $fields['CREATED_DATE']['title'] = 'Дата создания';
    }

    return $fields;
}

/**
 * Переставить столбцы в $table, чтобы они соответствовали $google_Headers
 *
 * @param array $google_Headers ['заг1','заг2', 'заг4','заг3']
 * @param array $russian_English ['заг2' => 'head2','заг1'=> 'head1','заг3'=>'head3']
 * @param array $table [0 => ['head3' => 'z03',
 *                               'head1' => 'x01',
 *                               'head5' => 'не нужен',
 *                               'head2' => 'b02',],
 *                               1 => ['head3' => 'v13',
 *                               'head1' => 'x11',
 *                               'head5' => 'не нужен',
 *                               'head2' => 'b22',],];
 * @return array [0 => ['head1' => 'x01',
 *                      'head2' => 'b02',
 *                      'заг4' => '',
 *                      'head3' => 'z03',],
 *                1 => ['head1' => 'x11',
 *                      'head2' => 'b22',
 *                      'заг4' => '',
 *                      'head3' => 'v13',],];
 */
function columns_Rearrange_by_Headings(array $table,
                                       array $google_Headers,
                                       array $russian_English): array
{
    // Создаем массив для новой таблицы
    $new_Table = [];
    // Проходимся по каждой строке в исходной таблице
    foreach ($table as $row) {
        // Создаем массив для новой строки
        $new_Row = [];
        // Проходимся по каждому заголовку в нужном порядке
        foreach ($google_Headers as $header) {
            // Получаем соответствующий заголовок на русском языке
            $russian_Header = $russian_English[$header] ?? '';
            // Добавляем значение из исходной таблицы в новую строку
            $new_Row[$header] = $row[$russian_Header] ?? '';
        }
        // Добавляем новую строку в новую таблицу
        $new_Table[] = $new_Row;
    }
    // Возвращаем новую таблицу
    return $new_Table;
}


function range_Clear_Decor(array $spread_Sheet_Cred,
                           array $array): array
{
    if (!isset($array[0])) {
        error_EMail(__FUNCTION__, '!isset($array[0])');
        exit();
    }

    $column_Letter = column_Number_2_Letter((count($array[0]) + 1));
    $range_Address = $spread_Sheet_Cred['sheet_Name'] . '!A2:' . $column_Letter;

    googleSheet_Range_Clear($range_Address,
        $spread_Sheet_Cred['spreads_ID'],
        $spread_Sheet_Cred['credential']);

    return $array;
}

/**
 * Взять из гуглтаблицы заголовки
 *
 * @param array $spread_Sheet_Cred
 * @return ValueRange
 */
function googleSheet_Headers(array $spread_Sheet_Cred): ValueRange
{
    static $headers;

    if (is_null($headers)) {
        $range_Address = $spread_Sheet_Cred['sheet_Name'] . '!1:1';

        $headers = googleSheet_Range_2_Array(
            $range_Address,
            $spread_Sheet_Cred['spreads_ID'],
            $spread_Sheet_Cred['credential']
        );
    }
    return $headers;
}

/**
 * Проверка массива заголовков
 */
function headers_Ok($valueRange): array
{
    if (!isset($valueRange['values'][0])) {
        error_EMail(__FUNCTION__, '!isset($valueRange[\'values\'][0])');
        exit();
    }

    return $valueRange['values'][0];
}

/**
 * Положить массив в гуглтаблицу
 *
 * @param array $array
 * @param array $spread_Sheet_Cred
 * @return void
 */
function array_2_GoogleSheet_End(array $spread_Sheet_Cred,
                                 array $array)
{
    try {
        $range_Address = $spread_Sheet_Cred['sheet_Name'] . '!A2';

        array_2_Google_Sheet(array_values($array),
            $range_Address,
            $spread_Sheet_Cred['spreads_ID'],
            $spread_Sheet_Cred['credential']);
    } catch (Exception $e) {
        error_EMail(__FUNCTION__, $e->getMessage());
        exit();
    }
}

function bitrix24_Array_OK(array $array): array
{
    if (count($array) < 3) {
        error_EMail(__FUNCTION__, 'count($array) < 3');
        exit();
    }
    return $array;
}

function bitrix24_Batch_4(string $hook, array $headers): array
{
    $fields = headers_2_Bitrix24_Fields($hook, $headers);
    $method = 'tasks.task.list';

    $return = [];

    if (defined('DEBUG')) {
        if (DEBUG) {
            $return = json_decode(file_get_contents('table.json2023-04-24 18-19-27.txt'), true);
        }
    } else {
        ini_set('memory_limit', '500M');

        $return = batch_Fast_InExSu_Double($hook,
            $method,
            $fields);
    }

    return $return;
}

/**
 * вернуть задачи "в работе"
 * тремя запросами
 * 1 - созданы в текущем году
 * 2 - завершены в текущем году
 * 3 - незавершённые
 */
function tasks_In_Work_3_Batches(string $hook, array $select_fields): array
{

    /**
     * сразу три условия работают через И
     * $filter = [
     * '<=CLOSED_DATE' => $closed_Date,
     * '>=CREATED_DATE' => $created_Date,
     * '!REAL_STATUS' => '5',]; */

    $method = 'tasks.task.list';
    $current_year = date('Y');

    $closed_Date = "$current_year-12-31T23:59:59+03:00";
    $filter = ['<=CLOSED_DATE' => $closed_Date,];
    $tasks_Closed = batch_Fast_InExSu_Double($hook, $method, $select_fields, $filter);

    $created_Date = "$current_year-01-01T00:00:00+03:00";
    $filter = ['>=CREATED_DATE' => $created_Date];
    $tasks_Created = batch_Fast_InExSu_Double($hook, $method, $select_fields, $filter);

    $filter = ['!REAL_STATUS' => '5',];
    $tasks_Work = batch_Fast_InExSu_Double($hook, $method, $select_fields, $filter);

    $tasks = array_merge_recursive($tasks_Closed, $tasks_Created, $tasks_Work);

    return array_unique($tasks, SORT_REGULAR);
}

/**
 * русские заголовки в поля Битрикс24
 */
function headers_2_Bitrix24_Fields(string $hook, array $headers): array
{
    $run = microtime(true);
    echo __FUNCTION__ . PHP_EOL;

    static $arr_Fields = [];

    if (is_null($arr_Fields)) {
        $arr_Task_Fields = b24request(
            $hook,
            'tasks.task.getFields',
            [],
            0);

        if (!isset($arr_Task_Fields['result']['fields'])) {
            error_EMail(__FUNCTION__, '!isset($arr_Task_Fields[\'result\'][\'fields\'])');
            exit();
        }

        $arr_Task_Fields = $arr_Task_Fields['result']['fields'];

        $arr_Fields = products_userFields_Title_by_listLabel_Bingo(
            $arr_Task_Fields,
            $headers);

        if (count($arr_Fields) == 0) {
            error_EMail(__FUNCTION__, 'count($arr_Fields) == 0');
            exit();
        }
    }

    echo 'time passed = ' . number_format(microtime(true) - $run, 6, '.', ' ') . PHP_EOL;

    return $arr_Fields;
}
<?php
declare(strict_types=1);

require_once __DIR__.'/lib_Bitrix24.php';
$File_Name   = __DIR__ . '/webHookURL.txt';
define('WEB_HOOK', file_get_contents($File_Name));

// $list =batch_Fast_Gomzin(WEB_HOOK,'disk.storage.getlist',[]);
// var_dump($list);

$stor = b24request(WEB_HOOK,'disk.storage.get', ['id'=>11]);
var_dump($stor);

<?php

class Google
{
    public Google_Client $client;
    public Google_Service_Sheets $service;
    public Google\Service\Sheets\Spreadsheet $spreadSheet;
    public string $googleCredentialsFilePath;
    public string $spreadSheetId;

    public function __construct(string $googleCredentialsFilePath, string $spreadSheetId)
    {
        $this->googleCredentialsFilePath = $googleCredentialsFilePath;
        $this->spreadSheetId = $spreadSheetId;
    }

    /**
     * Пример вызова - по файлу JSON и id гугл таблицы вернуть гуглтаблицу
     * $google = new Google($googleAccountKeyFilePath, $spreadsheetId);
     * $googleService = $google->service();
     */
    public function service_Sheets(): Google_Service_Sheets
    {
        putenv('GOOGLE_APPLICATION_CREDENTIALS=' . $this->googleCredentialsFilePath);
        $this->client = new Google_Client;
        $this->client->useApplicationDefaultCredentials();
        // Adding an access area for reading, editing, creating and deleting tables
        $this->client->addScope('https://www.googleapis.com/auth/spreadsheets');
        return new Google_Service_Sheets($this->client);
    }
}
<?php
declare(strict_types=1);

require_once __DIR__ . DIRECTORY_SEPARATOR . 'lib_Php.php';
require_once __DIR__ . DIRECTORY_SEPARATOR . 'lib_Bitrix24.php';
require_once __DIR__ . DIRECTORY_SEPARATOR . 'google_Sheets.php';

function array_Companies_2_Google_Sheet(array $noo_Sfera) {

}

function range_Clear(array $noo_Sfera): array {
    return $noo_Sfera;
}

function array_Companies_Fill(array $noo_Sfera): array {
    return $noo_Sfera;
}

/**
 * получить список компаний с нужными полями
 */
function companies_List(array $noo_Sfera): array {
    return $noo_Sfera;
}

/**
 * подготовить список полей для запроса компаний
 * названия из ГуглТаблица заменить на назваиня Битрикс24
 */
function companies_Fields_Title_2_Key(array $noo_Sfera): array {

    $arr = [];

    foreach ($noo_Sfera['companies_Fields_List'] as $field_key => $field_Value) {
        foreach ($noo_Sfera['array_Headers_from_Google_Sheet'] as $header_Value) {

            if (isset($field_Value['title']) === false) {

                $message = ': $field_Value[title] = ' .
                           $field_Value['title'] .
                           ' === false';

                log_2(__FUNCTION__ . $message);
                echo $message . PHP_EOL;

            } elseif (mb_strtoupper($field_Value['title']) == trim(mb_strtoupper($header_Value)))
                $arr[$field_key] = $header_Value;
        }
    }

    $noo_Sfera[__FUNCTION__] = $arr;

    return $noo_Sfera;
}

/**
 * полчить заголовки из ГуглТаблицы
 */
function array_Headers_from_Google_Sheet(string $google_Sheet_ID,
                                         string $sheet_Name,
                                         string $range_Headers,
                                         string $range_Insert,
                                         string $web_Hook,
                                         string $file_credentials): array {

    $arr_Headers = googleSheet_Range_2_Array($sheet_Name . $range_Headers,
                                             $google_Sheet_ID,
                                             $file_credentials);

    if (count($arr_Headers->values[0] ?? []) < 3) {
        log_2(__FUNCTION__ . ': $arr_Headers->values[0] ?? []) < 3. ВЫХОД!');
        exit(E_USER_WARNING);
    }

    return [
        'google_Sheet_ID' => $google_Sheet_ID,
        'sheet_Name' => $sheet_Name,
        'range_Headers' => $range_Headers,
        'range_Insert' => $range_Insert,
        'web_Hook' => $web_Hook,
        'file_credentials' => $file_credentials,
        __FUNCTION__ => $arr_Headers->values[0]];
}

/**
 * компании из массива полей listLabels создать массив titles
 */
function companies_Fields_List(array $noo_Sfera): array {

    $arr = b24request($noo_Sfera['web_Hook'],
                      'crm.company.fields',
                      [],
                      0);

    if (count($arr['result'] ?? []) < 9) {
        log_2(__FUNCTION__ . ': count($arr ?? []) < 9. ВЫХОД!');
        exit(E_USER_WARNING);
    }

    $noo_Sfera[__FUNCTION__] = $arr['result'];

    return $noo_Sfera;
}

<?php
/** **Задача
 * Компании - скопировать значение из одного поля в другое.
 **Решение**:
 * Получить массив всех компаний.
 * Создать новый массив для batch обновления
 * Запустить batch обновление.
 */

// общий require для модулей связанных с запросами batch
require_once __DIR__ . '/vendor/autoload.php';
// сделай универсальный путь
// require_once __DIR__ . '../PHP-Bitrix24-Library/lib_Bitrix24.php';
//require_once __DIR__ . '/crest_SRP.php';

use App\Bitrix24\Bitrix24API;

$File_Name   = __DIR__ . '/webHookURL.txt';
$WEB_HOOK = file_get_contents($File_Name);

$BX24 = new Bitrix24API($WEB_HOOK);

/** Компании - обновить поля простые по title (UF_CRM_
 * запускаю из aMain_UF_update_02_Test.php */
function uf_Batch_Update(array $arr2d_fields_pair) {
    global $BX24;
    global $WEB_HOOK;

    // вытягиваю массив 2мерный, чтобы использовать в получении списка компаний с нужными полями
    $arr1d_Fields   = array2d_2_1d($arr2d_fields_pair);
    $arrXd_Companys = batch_Fast_Gomzin($WEB_HOOK,
                                        'crm.company.list',
                                        $arr1d_Fields,
                                        []);

    assert(count($arrXd_Companys) > 2);

    $batch_Params = [];

    foreach ($arr2d_fields_pair as $arr_Pair) {
        $batch_Params = array_merge($batch_Params,
                                    company_fields_Diff($arrXd_Companys,
                                                        $arr_Pair[0],
                                                        $arr_Pair[1]));
    }

    array_2_file($batch_Params,
                 __FUNCTION__ . '_batch_Params ' . date("Y-m-d H-i-s") . '.txt');

    $commands = $BX24->buildCommands('crm.company.update',
                                     $batch_Params);
    array_2_File_DateTime($commands,
                          'arr_Batch');

    // основное действие = обновить сущности, троттлинг
    require_once 'companys_UF_Update_batch.php';
    // ! Для работы раскомментируй
//    $result = batchRequest_Dispenser_Array($commands,
//                                           49,
//                                           $BX24);
//    array_2_File_DateTime($result,
//                          __FUNCTION__);
}

/** получить массив компаний и два имени поля
 * вернуть массив обновлений полей компаний
 * 0, null, пусто - считаю равными
 * сохранить старые значения $field_Dest в файл
 */
function company_fields_Diff(array $arrX_Companys,
                             string $field_Sour,
                             string $field_Dest): array {
    $arr_Batch = [];
    $arr_Field = [];
    $arr_DestO = [];

    foreach ($arrX_Companys as $index => $company) {

        $sour = $company[$field_Sour];
        $dest = $company[$field_Dest];

        if ((float)$sour > (float)$dest) {

            $arr_DestO[$company['ID']] = $dest;

            $arr_Field[$field_Dest] = $sour;

            $arr_Batch[$index] = [
                'ID'     => $company['ID'],
                'fields' => $arr_Field,
            ];
        }
    }

    array_2_File_DateTime($arr_DestO,
                          'arr_DestO');

    return $arr_Batch;
}

/** Обновить поле UF_CRM_ из csv */
function ufs_Csv_update(string $field,
                        string $file_CSV) { //
    global $BX24;
    global $WEB_HOOK;

    $arr1d_Fields = [$field];

    $arr_CSV = file_CSV_2_Array($file_CSV);

    $arr_UF = batch_Fast_Gomzin($WEB_HOOK,
                                'crm.company.list',
                                $arr1d_Fields,
                                []);

    $batch_Params = array_Compare_If_Less_Batch($arr_UF,
                                                $arr_CSV,
                                                $field);

    $commands = $BX24->buildCommands('crm.company.update',
                                     $batch_Params);
    // основное действие = обновить сущности, троттлинг
    require_once 'companys_UF_Update_batch.php';
    $result = batchRequest_Dispenser_Array($commands,
                                           49,
                                           $BX24);
    array_2_File_DateTime($result,
                          'ufs_Csv_update');
}

/** сравнить массивы
 *  вернуть массив для batch
 */
function array_Compare_If_Less_Batch(array $uf,
                                     array $csv,
                                     string $field): array {

    $arr_Batch = [];

    foreach ($uf as $index => $company) {

        foreach ($csv as $line) {

            if ($company['ID'] == $line[0]) {
                if ($company[$field] < $line[1]) {

                    // создать запись batch
                    $arr_Field[$field] = $line[1];

                    $arr_Batch[$index] = [
                        'ID'     => $company['ID'],
                        'fields' => $arr_Field,
                    ];

                }
            }
        }
    }

    array_2_File_DateTime($arr_Batch,
                          'arr_Batch');
    return $arr_Batch;
}



<?php

declare(strict_types=1);

const FILE_CREDENTIALS = __DIR__ . '/popov-php-bitrix24-zg-20220603-a1df757bd724.json';
define('WEB_HOOK', file_get_contents('webHookURL.txt'));

// require_once __DIR__ . '/lib_Php.php';
// require_once __DIR__ . '/lib_Bitrix24.php';
require_once __DIR__ . '/aCompanys_2_GoogleSheet_Methods.php';

/**
 * массив Битрикс24 компании из полей с русскими названиями
 */
function b24_Companys_Fileds_Titles_2_Array2D(array  $arr1D_Filelds_Name,
                                              string $webHook): array
{
    $url_Domain = 'https://' . parse_url($webHook)['host'];
    $arr_Company_Fields = b24request($webHook,
                                     'crm.company.fields',
                                     [])['result'];
    // поля названия человечьи в понятные для Bitrix24
    $arr_Fields = companys_userFields_Title_by_listLabel($arr_Company_Fields,
                                                         $arr1D_Filelds_Name);
    log_2_File('Поля из Битрикс24 загружены');

    // вернёт столбцы по названиям полей по алфавиту
    // порядок столбцов улучшит $arr_Companys_IDs_Column_Ordered
    $arr_Companys_IDs = batch_Fast_Gomzin($webHook,
                                          'crm.Company.list',
                                          $arr_Fields);
    log_2_File('компания загружены');


    // добавить значения служебных полей типа MEASURE ...,
    // у которых значение нужно достать по ID
    // $arr_Company_Fields = table_Make_If($arr_Company_Fields,
    //                                     $arr_Fields,
    //                                     $webHook);
    // log_2_File('Поля добавлены');
    // assert(count($arr_Company_Fields['SECTION_ID']) > 1);

    // восстановить сортировку полей, сломанную batch_Fast_Gomzin
    $arr_Companys_IDs_Column_Ordered = array2D_Order_by_Array($arr_Companys_IDs,
                                                              $arr_Fields);
    log_2_File('Сортировка восстановлена');

    $arr_Companys_Value = companys_ID_2_Values($arr_Companys_IDs_Column_Ordered,
                                               $arr_Company_Fields,
                                               $url_Domain);
    log_2_File('ID на значения заменены');

    // массив PHP в массив пригодный для вставки в диапазон листа гуглтаблицы
    return array_Php_2_Array_Sheet($arr_Companys_Value);
}

function b24_Companys_Fileds_Titles_2_Array2D_Test()
{
    $arr1D_Filelds_Name = ['Ответственный', 'Тип компании'];
    b24_Companys_Fileds_Titles_2_Array2D($arr1D_Filelds_Name, WEB_HOOK);
}

function companies_Fields_List_Test()
{
    echo __FUNCTION__ . PHP_EOL;

    $noo_Sfera['web_Hook'] = WEB_HOOK;

    $arr = companies_Fields_List($noo_Sfera);

    assert(is_array($arr["companies_Fields_List"]));
}

function companies_Fields_Title_2_Key_Test()
{
    $noo_Sfera = companies_Fields_List(
        array_Headers_from_Google_Sheet(
            '1HhDntSA619JnVoAR0gkM7Mz68GifPID16o6bdmJohJ0',
            'Битрикс24 Компании 2022-12-26!',
            '1:1',
            'A2',
            WEB_HOOK,
            FILE_CREDENTIALS));

    $arr = companies_Fields_Title_2_Key($noo_Sfera);

    assert(is_array($arr));
}

// companies_Fields_List_Test();
<?php
declare(strict_types=1);

require_once __DIR__ . '/lib_Bitrix24.php';
require_once __DIR__ . '/lib_Php.php';

/** скопировать поле в поле */
function lead_Field_Copy(string  $field_Sour, string  $field_Dest):void {
}
<?php /** @noinspection PhpUnused */

$File_Name   = __DIR__ . '/webHookURL.txt';
$WEB_HOOK = file_get_contents($File_Name);

require_once 'companys_UF_Update_batch.php';
// require_once '../PHP-Bitrix24-Library/lib_Bitrix24.php';
require_once __DIR__ .'/lib_Bitrix24.php';

use App\Bitrix24\Bitrix24API;
$BX24 = new Bitrix24API($WEB_HOOK);

/** Запуск версии заменым по одной сущности
 * @noinspection PhpUnused
 */
function batch_Do_RUN()
{
    echo __FUNCTION__ . "\n";

    global $BX24;
    global $WEB_HOOK;

    $arr_Companys       = $BX24->fetchCompanyList([],
                                                  ['ID']);
    $arr_ListLabels     = array2d_ListLabels_Dest_Sour();
    $arr_Company_Fields = company_Fields($WEB_HOOK,
                                         0)['result'];

    $result = [];

    foreach ($arr_Companys as $arr_IDs) {

        foreach ($arr_IDs as $id) {

            $company = company_Get($WEB_HOOK,
                                   $id['ID'],
                                   0)['result'];

            echo 'batch_Do: ' . $id['ID'] . "\n";

            $result = array_merge($result,
                                  batch_Do($company,
                                           $arr_ListLabels,
                                           $arr_Company_Fields));
        }
    }
    assert(is_array($result));

    array_2_File($result,
                 'batch_Do_RUN.txt');

}

/** @noinspection PhpUnused */
function batch_Do_Test()
{
    echo __FUNCTION__ . "\n";

    global $WEB_HOOK;

    $company = company_Get($WEB_HOOK,
                           13519,
                           0)['result'];

    $arr_ListLabels = array2d_ListLabels_Dest_Sour();

    $arr_Company_Fields = company_Fields($WEB_HOOK,
                                         0)['result'];

    $result = batch_Do($company,
                       $arr_ListLabels,
                       $arr_Company_Fields);
    assert(is_array($result));

    array_2_File($result,
                 'batch_Do_Test.txt');
}

function array1d1d_2_array1d_Test()
{
    echo __FUNCTION__ . "\n";
    $arr1d1d = array2d_ListLabels_Dest_Sour();
    $result  = array1d1d_2_array1d($arr1d1d);
    $result  = array_merge(['ID'],
                           $result);
    assert(is_array($result));
}

function companys_Batch_Test()
{
    echo __FUNCTION__ . "\n";

    global $WEB_HOOK;
    $companys_Fields = company_Fields($WEB_HOOK,
                                      0)['result'];
    $arr1d_UF_Titles = array1d_UserField_Title_by_listLabel($companys_Fields,
                                                            array1d_UF_ListLabels_with_ID());// array1d_UserField_Title_by_listLabel($companys_Fields, $arr_UF_Fields);
    $filter          = [];
    $arr_Companys    = companys_Batch($filter,
                                      $arr1d_UF_Titles);

    assert(is_array($arr_Companys));

    $count = 0;
    /** @noinspection PhpUnusedLocalVariableInspection */
    foreach ($arr_Companys as $company) {
        $count++;
        if ($count > 1) break;
    }
    assert($count > 1);
}

function array2d_UF_Title_by_listLabel_Test()
{
    echo __FUNCTION__ . "\n";

    global $WEB_HOOK;
    $arr1d_Company_Fields = company_Fields($WEB_HOOK,
                                           0)['result'];
    $result               = array2d_UF_Title_by_listLabel($arr1d_Company_Fields,
                                                          array2d_ListLabels_Dest_Sour());
    assert(is_array($result));
    assert(strripos($result[0][0],
                    'UF_CRM_') == 0);
}

function array2d_UF_Titles_Test()
{
    echo __FUNCTION__ . "\n";

    $result = array2d_UF_Titles();
    assert(count($result) > 2);
}

function fields_Type_List_Diff_Batch_Test()
{
    echo __FUNCTION__ . "\n";

    global $WEB_HOOK;

    // делаю пару полей разными
    companies_Update_Test();

    $arr1d_Company        = company_Get($WEB_HOOK,
                                        13519,
                                        0)['result'];
    $arr2d_UF_Titles      = array2d_UF_Titles();
    $arrXd_company_Fields = company_Fields($WEB_HOOK,
                                           0)['result'];
    $result               = fields_Type_List_Diff_Batch($arr1d_Company,
                                                        'COMPANY_TYPE',
                                                        'UF_CRM_1662558139',
                                                        $arrXd_company_Fields);
    assert(count($result) > 1);
}

function fields_YesNo_Diff_Batch_Test()
{
    echo __FUNCTION__ . "\n";

    global $WEB_HOOK;

    // делаю пару полей разными
    companies_Update_Test();

    $arr1d_Company        = company_Get($WEB_HOOK,
                                        13519,
                                        0)['result'];
    $arr2d_UF_Titles      = array2d_UF_Titles();
    $arrXd_company_Fields = company_Fields($WEB_HOOK,
                                           0)['result'];
    $result               = fields_YesNo_Diff_Batch($arr1d_Company,
                                                    $arr2d_UF_Titles,
                                                    $arrXd_company_Fields);
    assert(count($result) > 1);
}

function companies_Update_Test(int $company_ID = 13519,
                               string $uf_1_Name = 'UF_CRM_1548156531497',
                               int $uf_1_Value = 0,
                               string $uf_2_Name = 'UF_CRM_POTREBN599337',
                               int $uf_2_Value = 61845)
{
    echo __FUNCTION__ . "\n";

    // сработала такая ссылка:
    // вебхук batch?cmd[1]=crm.company.update%3Fid%3D13519%26fields%5BUF_CRM_ZAYAVKA_207302%5D%3D61893%26fields%5BUF_CRM_UCHASTVU909709%5D%3D61865
    // раскодировано batch?cmd[1]=crm.company.update?id=13519&fields[UF_CRM_ZAYAVKA_207302]=61893&fields[UF_CRM_UCHASTVU909709]=61865
    global $BX24;
    // Эти поля в карточке компании вверху и рядок
    // 'UF_CRM_1548156531497' Потребность СИЗОД ПРОМ ; 0 или 1
    // 'UF_CRM_POTREBN599337' Потребность СИЗОД ПРОМ список  61845 Да 61847 Нет

    $params = ['REGISTER_SONET_EVENT' => 'Y'];

    $companies = [0 => ['ID' => $company_ID,
        $uf_1_Name => $uf_1_Value,
        $uf_2_Name => $uf_2_Value]];
    /** @noinspection PhpUnhandledExceptionInspection */
    $result = $BX24->updateCompanies($companies,
                                     $params);
    assert($result[0] = $company_ID);
}

/** сделать отличие в парном поле */
function companies_Update_Diff_Yes()
{
    companies_Update_Test($company_ID = 13519,
                          $uf_1_Name = 'UF_CRM_1548156531497',
                          $uf_1_Value = 0,
                          $uf_2_Name = 'UF_CRM_POTREBN599337',
                          $uf_2_Value = 61845);
}

/** убрать отличие в парном поле */
function companies_Update_Diff_No_()
{
    companies_Update_Test($company_ID = 13519,
                          $uf_1_Name = 'UF_CRM_1548156531497',
                          $uf_1_Value = 1,
                          $uf_2_Name = 'UF_CRM_POTREBN599337',
                          $uf_2_Value = 61845);
}


function batchRequest_Test()
{
    echo __FUNCTION__ . "\n";

    global $BX24;

    // 'UF_CRM_1548156531497' Потребность СИЗОД ПРОМ ; 0 или 1
    // 'UF_CRM_POTREBN599337' Потребность СИЗОД ПРОМ список 61847 Нет  61845 Да
    $commandParams    = [];
    $commandParams[0] = [
        'ID' => 13519,
        'fields' => [
            'UF_CRM_1548156531497' => 1,
            'UF_CRM_POTREBN599337' => 61845],
    ];
    $commandParams[1] = [
        'ID' => 211,
        'fields' => [
            'UF_CRM_1548156531497' => 1,
            'UF_CRM_POTREBN599337' => 61845],
        // 'params' => ['REGISTER_SONET_EVENT' => 'Y'], // не срабатывает
    ];

    $commands = $BX24->buildCommands('crm.company.update',
                                     $commandParams);
    $result   = $BX24->batchRequest($commands);

    assert((is_array($result)));
    assert($result[0] == true);
    assert($result[1] == true);
}

function companys_Fields_Pairs_Company_Type_Test()
{
    $arr_Fields_Pair = ['COMPANY_TYPE', 'UF_CRM_1662558139'];
    companys_Fields_Pairs_Company_Type($arr_Fields_Pair);
}

//batch_Do_Test();

// продолжить с 18108
// batch_Do_RUN(); //$filter = [">ID" => $id_Start];

//array1d1d_2_array1d_Test();
//companys_Batch_Test();
//array1d_UserField_Title_by_listLabel_Test();

//companys_Update_Batch_Prepare_Test();
//array2d_UF_Title_by_listLabel_Test();
//array2d_UF_Titles_Test();
//companies_Update_Test();
//fields_YesNo_Diff_Batch_Test();

//fields_YesNo_Diff_Batch_Test();
//batchRequest_Test();

//aMain_UF_Check_Peplace();

companys_Fields_Pairs_Company_Type_Test();

<?php

/** @noinspection PhpUnused */
declare(strict_types=1);
/** @noinspection PhpUnused */

const TEST_DATA_PATHS = __DIR__ . '/tests/data/';

$File_Name = '../Bitrix24-entity-operations/webHookURL.txt';
define('WEB_HOOK', file_get_contents($File_Name));

require_once __DIR__ . '/google_Sheets.php';
require_once __DIR__ . '/lib_Bitrix24.php';

//require_once 'companys_UF_Update_batch.php';

use App\Bitrix24\Bitrix24API;

$BX24 = new Bitrix24API(WEB_HOOK);

function uf_ID_by_Name_Test()
{
    $method = 'crm.company.userfield.list';

    $uf_name = 'UF_CRM_1548155934428'; //В компании есть номенклатурный справочник; 477
    $resu = uf_ID_by_Name(
        WEB_HOOK,
        $method,
        $uf_name,
        0
    );
    assert($resu == 477);

    $uf_name = 'UF_CRM_1660889613'; // В компании есть номенклатурный справочник список; 6913
    $resu = uf_ID_by_Name(
        WEB_HOOK,
        $method,
        $uf_name,
        0
    );
    assert($resu == 6913);
}

function russian_2_Latin_Transliterate_Test(): void
{
    $resu = russian_2_Latin_Transliterate('ёЯ');
    assert($resu == 'yoYa');

//    echo russian_2_Latin_Transliterate(mb_substr('В компании есть номенклатурный справочник список', 0, 29)) .
//        string_Random('0123459789', 9);
}

function string_Random_Test()
{
    $characters = '0123456789';
    $length = 9;

    $retu = string_Random(
        $characters,
        $length
    );

    assert(strlen($retu) == $length);
}

function company_UserField_Title_by_listLabel_Test()
{
    $arr = company_Fields(WEB_HOOK)['result'];
    array_2_File(
        $arr,
        'company_Fields.txt'
    );

    $listLabel = 'Отношение с клиентом';
    $title = company_UserField_Title_by_listLabel(
        $arr,
        $listLabel
    );
    assert($title == 'UF_CRM_5C408A65437E6');

    $listLabel = 'Годовой оборот';
    $title = company_UserField_Title_by_listLabel(
        $arr,
        $listLabel
    );
    echo $title;
}

/** @noinspection PhpUnusedLocalVariableInspection */
function userField_IDs_Test()
{
    $arr_Company_Fields = company_Fields(WEB_HOOK)['result'];
    $uf_Name = 'UF_CRM_POTREBN599337'; // Потребность СИЗОД ПРОМ список

    $result = userField_IDs(
        $arr_Company_Fields,
        $uf_Name,
        'Да'
    );
    assert($result = 61845);

    $result = userField_IDs(
        $arr_Company_Fields,
        $uf_Name,
        'Нет'
    );
    assert($result = 61847);
}

function batch_Fast_Gomzin_Test()
{
    require_once 'companys_UF_Update_batch.php';
    $method = 'crm.company.list';

    $companys_Fields = company_Fields(WEB_HOOK)['result'];
    $arr1d_UF_Titles = array1d_UserField_Title_by_listLabel(
        $companys_Fields,
        array1d_UF_ListLabels_with_ID()
    );// array1d_UserField_Title_by_listLabel($companys_Fields, $arr_UF_Fields);

    $result = batch_Fast_Gomzin(
        WEB_HOOK,
        $method,
        $arr1d_UF_Titles
    );

    assert(is_array($result));
    assert((count($result) > 6000));

    array_2_File(
        $result,
        'batch_Fast_Gomzin_Test_company_list.txt'
    );

//    $filter = ['ID' => 13519];
//    $result = batch_Fast_Gomzin(WEB_HOOK, $method, $arr1d_UF_Titles, $filter);
//    assert( count($result) > 1);
}


function batch_String_Mult_at_Once_Test()
{
    $method = 'crm.company.update';
    $id = 13519;

    // Нет
    $arr_Fields = [
        'UF_CRM_ZAYAVKA_207302' => 61895,
        'UF_CRM_UCHASTVU909709' => 61867,
    ];

    // 61893 Да, 61895 - Нет, UF_CRM_UCHASTVU909709 61865 - да, 61867 - Нет
    $result = batch_String_Mult_at_Once(
        WEB_HOOK,
        $method,
        $id,
        $arr_Fields
    );

    echo "\nНет: " . $result;

    file_get_contents($result);

    $company = company_Get(
                   WEB_HOOK,
                   13519
               )['result'];

    $UF_CRM_ZAYAVKA_207302 = $company['UF_CRM_ZAYAVKA_207302'];
    $UF_CRM_UCHASTVU909709 = $company['UF_CRM_UCHASTVU909709'];

    assert($UF_CRM_ZAYAVKA_207302 == 61895);
    assert($UF_CRM_UCHASTVU909709 == 61867);

    // Да
    $arr_Fields = [
        'UF_CRM_ZAYAVKA_207302' => 61893,
        'UF_CRM_UCHASTVU909709' => 61865,
    ];

    $result = batch_String_Mult_at_Once(
        WEB_HOOK,
        $method,
        $id,
        $arr_Fields
    );
    echo "\nДа:  " . $result;

    file_get_contents($result);

    $company = company_Get(
                   WEB_HOOK,
                   13519
               )['result'];

    $UF_CRM_ZAYAVKA_207302 = $company['UF_CRM_ZAYAVKA_207302'];
    $UF_CRM_UCHASTVU909709 = $company['UF_CRM_UCHASTVU909709'];

    assert($UF_CRM_ZAYAVKA_207302 == 61893);
    assert($UF_CRM_UCHASTVU909709 == 61865);
}

function url_Encode_Test()
{
    // == Ещё проще заменить амперсаунд & на %26
    // вебхук batch?cmd[1]=crm.company.update?id=13519%26fields[UF_CRM_ZAYAVKA_207302]=61893%26fields[UF_CRM_UCHASTVU909709]=61865

    $url = '?id=13519&fields[UF_CRM_ZAYAVKA_207302]=61895&fields[UF_CRM_UCHASTVU909709]=61867';
    $url_DeCode = urlencode($url);
    echo $url_DeCode;
}

function company_Get_Test(): void
{
    $id = 13519;// Тестовая компания
    $result = b24request(
        WEB_HOOK,
        'crm.company.get',
        ['ID' => $id],
        0
    );
    array_2_File(
        $result,
        'company_' . $id . '.txt'
    );
}

function crm_invoice_get_Test()
{
    $arr = b24request(
        WEB_HOOK,
        'crm.invoice.get',
        [],
        0
    );
    array_2_File(
        $arr,
        'crm_invoice_get.txt'
    );
}

function crm_Company_FieldValue_by_Company_Id_Test()
{
    $id = 155;
    $company = crm_Company_FieldValue_by_Company_Id(
        $id,
        'TITLE'
    );
    assert($company != '');
}

function perCent_Arithmetic_Test()
{
    define(
        'NUMBER_100',
        100
    );
    define(
        'PERCENTS_30',
        30
    );

    $sign = '+';
    $fnubm = perCent_Arithmetic(
        NUMBER_100,
        $sign,
        PERCENTS_30
    );
    assert($fnubm == 130);

    $sign = '-';
    $fnubm = perCent_Arithmetic(
        NUMBER_100,
        $sign,
        PERCENTS_30
    );
    assert($fnubm == 70);

    $sign = '*';
    $fnubm = perCent_Arithmetic(
        NUMBER_100,
        $sign,
        PERCENTS_30
    );
    assert($fnubm == 3000.0);

    $sign = '/';
    $fnubm = perCent_Arithmetic(
        NUMBER_100,
        $sign,
        PERCENTS_30
    );
    assert(
        round(
            $fnubm,
            2
        ) == 3.33
    );
}

function company_List_UF_Test()
{
    global $Web_Hook_URL;
    $assertion = company_UF_List_UF($Web_Hook_URL);
    assert(is_array($assertion));
}

function string_Cut_Right_Test()
{
    $string = '1 список';
    $right = ' список';
    $assertion = string_Cut_Right(
        $string,
        $right
    );
    assert($assertion == '1 ');

    $string = '1 список 2';
    $assertion = string_Cut_Right(
        $string,
        $right
    );
    assert($assertion == '');
}

function float_Left_Less_Right_Test()
{
    $arr_sour = [null, 0, ''];
    $arr_dest = [null, 0, ''];
    foreach ($arr_sour as $sour) {
        foreach ($arr_dest as $dest) {
            $diff = float_Left_Less_Right(
                $sour,
                $dest
            );
            assert(!$diff);
        }
    }
}

function file_CSV_2_Array_Test()
{
    $file = 'o:\+PME\_Arrange\Битрикс24 ЗГ\Годовой бюджет СИЗОД пром.csv';
    file_CSV_2_Array($file);
}

function company_userfield_get_Test(
    string $webHookURL,
    int    $id
)
{
    $result = company_userfield_get(
                  $webHookURL,
                  $id
              )['result'];
    assert(count($result) > 0);
}

//function crm_status_fields_Test()
//{
//    
//    $result = crm_status_fields(WEB_HOOK);
//}

/** тест REST API запроса к Битрикс24  */
function b24request_Test()
{
    $method = 'crm.status.list';
    $queryData = [
        'filter' => ['ENTITY_ID' => 'COMPANY_TYPE'],
    ];

    $result = b24request(
                  WEB_HOOK,
                  $method,
                  $queryData,
                  0
              )['result'];
    assert(is_array($result));
}

function array_field_By_Test()
{
    $arr2d = [];
    $field_Find = '';
    $field_Retu = '';
    $value = '';

    $result = array_field_By(
        $arr2d,
        $field_Find,
        $field_Retu,
        $value
    );
    assert(is_array($result));
}

function array_2_File_CSV_Test()
{
    $arr = [];
    array_2_File_CSV(
        $arr,
        './txt'
    );
}

function products_userFields_Title_by_listLabel_Test()
{
    global $File_Credentials;

    // $spread_Sheet_Id    = '1W3PaaY7yB6Acd0QA7B_Uy0B60jvlVGBquLjY3u7Jncg';
    // $arr_Product_Fields = b24request(WEB_HOOK,
    //                                  'crm.product.fields',
    //                                  [],
    //                                  0)['result'];
    //
    // $arr1d_ListLabels = googleSheet_Range_2_Array('1:1',
    //                                               $spread_Sheet_Id,
    //                                               $File_Credentials)['values'][0];
    //
    // $arr_Titles = products_userFields_Title_by_listLabel($arr_Product_Fields,
    //                                                      $arr1d_ListLabels);
    //
    // assert(count($arr_Titles)> 0);

    // Задачи
    $spread_Sheet_Id = '1BRiTRRyd9f0KFxT3VhVgsSZnR8zkkQ8OeNz8cAnG8VY';
    $arr_Tasks_Fields = b24request(
                            WEB_HOOK,
                            'tasks.task.getFields',
                            [],
                            0
                        )['result']['fields'];

    $arr1d_ListLabels = googleSheet_Range_2_Array(
                            '1:1',
                            $spread_Sheet_Id,
                            $File_Credentials
                        )['values'][0];

    $arr_Titles = products_userFields_Title_by_listLabel(
        $arr_Tasks_Fields,
        $arr1d_ListLabels
    );

    if (assert(count($arr_Titles) != count($arr1d_ListLabels))) {
        echo 'count($arr_Titles)' . count($arr_Titles) . ' != count($arr1d_ListLabels) ' . count($arr1d_ListLabels);
    }
    $arr = array_diff(
        $arr_Titles,
        $arr1d_ListLabels
    );
    if (count($arr) > 0) {
        print_r($arr);
    }
}

/** @noinspection PhpUnusedLocalVariableInspection */
function product_Fields_Test()
{
    // описание полей раздела товара
    $productsection_list = batch_Fast_Gomzin(
        WEB_HOOK,
        'crm.productsection.list',
        []
    );

    $product_Fields = b24request(
                          WEB_HOOK,
                          'crm.product.list',
                          [],
                          0
                      )['result'];
    //
    $productsection_fields = b24request(
                                 WEB_HOOK,
                                 'crm.productsection.fields',
                                 [],
                                 0
                             )['result'];
    $productsection_get = b24request(
                              WEB_HOOK,
                              'crm.productsection.get',
                              ['ID' => '741'],
                              0
                          )['result'];
    $crm_catalog_list = batch_Fast_Gomzin(
        WEB_HOOK,
        'crm.catalog.list',
        []
    );

    assert(is_array($crm_catalog_list));
}

/** тесты скоростей выгрузк из Битрикс24 */
function batchs_Speed()
{
    /**  $arr_Fields
     * $arr_Fields       = [
     * 0  => 'ID',
     * 1  => 'NAME',
     * 2  => 'Раздел (уровень 1)',
     * 3  => 'Раздел (уровень 2)',
     * 4  => 'Раздел (уровень 3)',
     * 5  => 'Раздел (уровень 4)',
     * 6  => 'PRICE',
     * 7  => 'PROPERTY_485',
     * 8  => 'MEASURE',
     * 9  => 'PREVIEW_PICTURE',
     * 10 => 'PROPERTY_705',
     * 11 => 'DESCRIPTION',
     * 12 => 'PROPERTY_427',
     * ]; */
    $start = microtime(true);
    $arr_Products_IDs = batch_Fast_Gomzin(
        WEB_HOOK,
        'crm.product.list',
        []
    );
    $finish = microtime(true);
    $delta_Gomzin = $finish - $start;

    $start = microtime(true);
    $arr_Params = [
        'order'  => ['ID' => 'ASC'],
        'filter' => ['>ID' => 0],
        'start'  => 0,
    ];
    $arr_Products_IDs_jet = jet_list(
        WEB_HOOK,
        'crm.product.list',
        $arr_Params
    );

    $finish = microtime(true);
    $delta_JetLi_ = $finish - $start;

    echo '$delta_Gomzin = ' . $delta_Gomzin . "\n";
    echo '$delta_JetLi_ = ' . $delta_JetLi_ . "\n";

    $arr_Diff = array_diff(
        $arr_Products_IDs,
        $arr_Products_IDs_jet
    );
    assert(count($arr_Diff) == 0);

// $delta_Gomzin = 1.1570839881897
// $delta_JetLi_ = 5.4941890239716
}

function section_ID_X_ForEach_Test()
{
    $arr_Products_IDs = batch_Fast_Gomzin(
        WEB_HOOK,
        'crm.product.list',
        []
    );
    $res = section_ID_X_ForEach(
        $arr_Products_IDs,
        productSection_List()
    );
    assert(is_array($res));
}

function section_ID_X_Test()
{
    $arr_Product = b24request(
                       WEB_HOOK,
                       'crm.product.get',
                       ['ID' => '957']
                   )['result']; // в 957 нет раздела 4
    // $arr_Params = ['order' => ['ID' => 'ASC'],
    //     'filter' => ['>ID' => 0, 'CATALOG_ID' => 24],
    //     'select' => ['ID', 'NAME', 'SECTION_ID'],
    //     'start' => 0,];

    $arr_ProductSection_List = productSection_List();
    $arr = section_ID_X(
        $arr_Product,
        $arr_ProductSection_List
    );

    assert(isset($arr['Раздел (уровень 4)']));
}

function sections_Shift_Test()
{
    $arr_Product = b24request(
                       WEB_HOOK,
                       'crm.product.get',
                       ['ID' => '957']
                   )['result'];
    $arr_Product = section_ID_X(
        $arr_Product,
        productSection_List()
    );
    $arr = sections_Shift($arr_Product);
    assert(isset($arr['Раздел (уровень 4)']));
}

function catalog_product_list_Test()
{
    // Не доделал

    // $arr_Product_Fields = b24request(WEB_HOOK,
    //                                  'crm.product.fields',
    //                                  [])['result'];
    // $arr1d_ListLabels   = ['ID', 'Внешний код', 'Название'];
    // поля названия человечьи в понятные для Bitrix24
    // $arr_Fields = products_userFields_Title_by_listLabel($arr_Product_Fields,
    //                                                      $arr1d_ListLabels);
    $arr = batch_Fast_Gomzin(WEB_HOOK, 'catalog.product.list', []);
    assert(is_array($arr));
    array_2_File($arr, 'catalog.product.list.txt');
}

function productSection_List(): array
{
    $arr_Params = [
        'order'  => ['ID' => 'ASC'],
        'filter' => ['>ID' => 0, 'CATALOG_ID' => 24],
        'select' => ['ID', 'NAME', 'SECTION_ID'],
        'start'  => 0,
    ];

    // batch_Fast_Gomzin тут не справился
    return jet_list(
        WEB_HOOK,
        'crm.productsection.list',
        $arr_Params
    );
}

function productSection_List_Test()
{
    $arr = productSection_List();
    assert(count($arr));
}

function array_Value_by_Id_Test()
{
    $array_1d = [
        'ID'         => '285',
        'SECTION_ID' => null,
        'NAME'       => 'ВЭД',
    ];

    $field_Name = 'ID';
    $field_Valu = '9';
    $field_Retu = 'NAME';

    $res = array_Value_by_Id(
        $array_1d,
        $field_Name,
        $field_Valu,
        $field_Retu
    );

    assert($res == '');

    $res = array_Value_by_Id(
        $array_1d,
        $field_Name,
        '285',
        $field_Retu
    );

    assert($res == $array_1d['NAME']);
}

/** создать массив batch запроса  */
function jet_Data_Batch(
    int    $prevID,
    string $method,
    array  $params
): array
{
    // рефакторинг Бажанова и Вострикова
    $arr_Batch = [];
    for ($i = 0; $i < 50; $i++) {
        $arr_Batch['step_' . $i] = [
            'method' => $method,
            'params' => $params,
        ];

        $arr_Batch['step_' . $i]['params']['filter'] = ['>ID' => $prevID++];
        //$prevID++; // = '$result[step_' . $i . '][49][ID]';
    }
    return $arr_Batch;
}

/** выгрузить много данных. Бажанов, Востриков. */
function jet_Data(
    $method,
    $order = ['ID' => 'ASC'],
    $select = []
): array
{
// УВЫ не возвращает ID > 675

    require_once __DIR__ . '/crest_SRP.php';

    $prevID = 0;
    $params = [
        'order'  => $order,
        'select' => $select,
        'start'  => -1,
    ];

    $arr_Return = [];

    while (true) {
        $batch = jet_Data_Batch(
            (int)$prevID,
            $method,
            $params
        );
        $result = batch_SRP(
            $batch,
            1
        );

        if (!empty($result['result']['result'])) {
            foreach ($result['result']['result'] as $arr_List) {
                $last = end($arr_List);

                if ($last['ID'] > $prevID) {
                    $prevID = $last['ID'];
                    $arr_Return = array_merge(
                        $arr_Return,
                        $arr_List
                    );
                } else {
                    break;
                }
            }
        } else {
            break;
        }
    }
    return $arr_Return;
}

function jet_list_Test()
{
//    $arr_Params = [
//        'order'  => ['ID' => 'ASC'],
//        'filter' => ['>ID' => 0, 'CATALOG_ID' => 24],
//        'select' => ['ID', 'NAME', 'SECTION_ID'],
//        'start'  => 0,
//    ];
//    $method = 'crm.productsection.list';

    $arr_Params = [
        'order'  => ['id' => 'ASC'],
        'filter' => ['iblockId' => '15'],
        'select' => ['id', 'iblockId', 'previewPicture'],
        'start'  => 0,
    ];
    $method = 'catalog.product.list';
// УВЫ не работает
    $arr = jet_list(WEB_HOOK, $method, $arr_Params);
    assert(count($arr) > 100);
}

function jet_list_crm_product_list()
{
    $arr_Params = [
        'order'  => ['id' => 'ASC'],
        'filter' => [],
        'select' => ['id', 'previewPicture'],
        'start'  => 0,
    ];
    $method = 'crm.product.list';

    $arr = jet_list(WEB_HOOK, $method, $arr_Params);
    assert(count($arr) > 100);
}

function product_Propertys_Tests()
{
    $arr_List = b24request(
        WEB_HOOK,
        'crm.product.property.list'
    );
    $arr_Valu = array_Search_Recursive_Key_Neighb(
        $arr_List,
        'NAME',
        'Завод-изготовитель',
        'VALUES'
    );
    assert(is_array($arr_Valu));
}

function b24_Field_Name_2_Key_Test()
{
    $str_In_ = 'CREATED_BY';
    $str = b24_Field_Name_2_Key($str_In_);
    assert($str == 'createdBy');
}

function b24_Field_Key_2_Name_Test()
{
    $str_In_ = 'createdBy';
    $str = b24_Field_Key_2_Name($str_In_);
    assert($str === 'CREATED_BY');
}

function catalog_product_get_Test()
{
    $arr = b24request(
        WEB_HOOK,
        'catalog.product.get',
        ['id' => '961']
    );
    assert(is_array($arr));
}

function b24_Products_2_Array2D_Test()
{
    $arr1d_ListLabels = ['ID', 'Внешний код', 'Название', 'DETAIL_TEXT']; //'Детальное описание'
    $arr_Product_Fields = b24request(
                              WEB_HOOK,
                              'crm.product.fields',
                              [],
                              0
                          )['result'];

    array_2_File($_REQUEST, '$_REQUEST');

    // поля названия человечьи в понятные для Bitrix24
    $arr_Fields = products_userFields_Title_by_listLabel(
        $arr_Product_Fields,
        $arr1d_ListLabels
    );
    $arr = b24_Products_2_Array2D(
        $arr_Fields,
        WEB_HOOK,
        24
    );
    array_2_File($arr, __FUNCTION__ . '.txt');
}

function product_property_fields_Test()
{
    $arr = b24request(WEB_HOOK, 'crm.product.property.fields', [], 0);
    assert(is_array($arr));
}

/** XML_ID (внешний код) дубли
 * выявить дубли
 * самый младший не трогать
 * найти свободный номер
 * присвоить номер остальным
 */
function product_xml_id_Dupl_Update_Test()
{
    $params = [
        'id'     => '44907', // id именно в нижнем регистре
        'fields' => [
            'xml_id' => '44907',
            'name'   => 'удалить тест'
        ],
    ];

    $arr = b24request(WEB_HOOK, 'catalog.product.update', $params, 0);
    // batch_Fast_Gomzin(WEB_HOOK, 'catalog.product.update', $params);
    assert($arr['result']['element']['xmlId'] == $params['fields']['xml_id']);
}

function batchRequest_Dispenser_Array_Test()
{
    // вебхук batch?cmd[1]=crm.company.update%3Fid%3D13519%26fields%5BUF_CRM_ZAYAVKA_207302%5D%3D61893%26fields%5BUF_CRM_UCHASTVU909709%5D%3D61865
    // раскодировано batch?cmd[1]=crm.company.update?id=13519&fields[UF_CRM_ZAYAVKA_207302]=61893&fields[UF_CRM_UCHASTVU909709]=61865

    // $batch_Params_Good = [
    //     0 =>
    //         ['productId' => '9305',],
    //     1 =>
    //         ['productId' => '9473',],];

    $arr_Products_IDs = batch_Fast_Gomzin(
        WEB_HOOK,
        'crm.product.list',
        ['select' => ['ID']]
    );

    $batch_Params = [];
    foreach ($arr_Products_IDs as $index => $product) {
        $batch_Params[$index] = ['productId' => (string)$product['ID']];
    }
    global $BX24;
    $commands = $BX24->buildCommands(
        'catalog.productImage.list',
        $batch_Params
    );
    $dispenser_Start = microtime(true);
    $arr_Disp = batchRequest_Dispenser_Array($commands, 50, $BX24);
    $dispenser_Stop_ = microtime(true);
    // 1439 за 32 секунды
    assert(count($arr_Disp) > 1000);
    echo 'batchRequest_Dispenser_Array ' . count($commands) . ' за ' . ($dispenser_Stop_ - $dispenser_Start);
}

function catalog_productImage_list_Test()
{
    /** вот так добудь id продуктов  */
    $arr_Products_IDs = batch_Fast_Gomzin(
        WEB_HOOK,
        'crm.product.list',
        ['select' => ['ID']]
    );

    $arr = catalog_productImage_list($arr_Products_IDs)[0];

    assert(count($arr) > 1000);
}

function products_Images_Count_Add_Test()
{
    $arr_Products_IDs = batch_Fast_Gomzin(
        WEB_HOOK,
        'crm.product.list',
        ['select' => ['ID']]
    );

    $arr = products_Images_Count_Add($arr_Products_IDs, 'Картинки товара количество');
    assert(is_array($arr));
}

function array_Add_Value_by_Key_Test()
{
    $arrX = [
        0 => ['ID' => '495'],
        1 => ['ID' => '123'],
    ];
    $key_Find = 'ID';
    $value_Find = '123';
    $key_Add_ = 'Ключ';
    $value_Add = 'Знач';

    array_Add_Value_by_Key($arrX, $key_Find, $value_Find, $key_Add_, $value_Add);

    assert(isset($arrX[1][$key_Add_]));
    assert(!isset($arrX[0][$key_Add_]));
}

/**  "возвращает поля товара торгового каталога по фильтру"
 * @see https://dev.1c-bitrix.ru/rest_help/catalog/product/catalog_product_getfieldsbyfilter.php
 * а на самом деле возвращает массив описаний полей товаров
 */
function catalog_product_getFieldsByFilter_Test()
{
    global $WEB_HOOK;
    $arr_Filter = [
        'filter' => [
            'iblockId'    => 24,
            'productType' => 1,
        ]
    ];
    $arr = b24request(
        $WEB_HOOK,
        'catalog.product.getFieldsByFilter',
        $arr_Filter,
        0
    );
    assert(is_array($arr));
}

function crm_lead_fields_Test()
{
    $arr = b24request(WEB_HOOK, 'crm.lead.fields');
    assert(is_array($arr));
}

function user_get_Test()
{
    $params = [
        'FILTER'     => [],
        'order'      => 'ASC',
        'sort'       => '',
        'ADMIN_MODE' => false
    ];
    global $BX24;
    $start = microtime(true);
    $getList = $BX24->getList('user.get', $params);
    assert(!empty($getList));
    $stop_ = microtime(true);
    echo __FUNCTION__ . ' BX24->getList' . ' за ' . round(($stop_ - $start) * 1000, 6);

    $start = microtime(true);
    $gomzin = batch_Fast_Gomzin(WEB_HOOK, 'user.get', ['ID']);
    assert(is_array($gomzin));
    // УВЫ, $gomzin ПУСТ
    $stop_ = microtime(true);
    echo __FUNCTION__ . ' gomzin' . ' за ' . round(($stop_ - $start) * 1000, 6);
}

function company_Userfield_List_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $arr = company_Userfield_List(WEB_HOOK);
    assert(is_array($arr['result'][0]));
}

function company_Fields_Test()
{
    $arr = company_Fields(WEB_HOOK);
    assert(is_array($arr));
}

function tasks_task_get_Test()
{
    $arr_Task = b24request(
        WEB_HOOK,
        'tasks.task.get',
        [
            'taskId' => 36005,
            'select' => ['*'],
        ]
    );
    assert(is_array($arr_Task));
}

function jet_List_Tasks_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

//    $webHook = WEB_HOOK;
//    $method = 'tasks.task.list';
//    $params = [
//        'order'  => ['ID' => 'ASC'],
//        'select' => ['ID', 'TITLE', 'CREATED_DATE'],
//        //        'filter' => ['=RESPONSIBLE_ID' => '1'],
//        'start'  => 0,
//    ];
//    $res = jet_List_Tasks($webHook, $method, $params);

    $BX24 = new Bitrix24API(WEB_HOOK);

    $generator = $BX24->getTaskList([], ['ID']);
//    foreach ($generator as $result) {
//    }

    echo 'time passed = ' . (microtime(true) - $start) . PHP_EOL;

    $array = iterator_to_array($generator);
    assert(is_array($array));
}

function batch_Tasks_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

// URL Битрикс24 облака
    $bx24Url = WEB_HOOK;

// Массив с методами и параметрами для batch-запроса
    $batch = [
        'task1' => [
            'method' => 'tasks.task.list',
            'params' => [
                'select' => ['ID'], // Поля, которые нужно получить
            ],
        ],
    ];

// Кодируем массив с batch-запросом в JSON
    $batchJson = json_encode($batch);

// Формируем запрос
    $options = [
        'http' => [
            'method'  => 'POST',
            'header'  => 'Content-Type: application/json',
            'content' => $batchJson,
        ],
    ];
    $context = stream_context_create($options);
    $response = file_get_contents($bx24Url, false, $context);

// Декодируем JSON-ответ
    $result = json_decode($response, true);

// Получаем результаты batch-запроса
    if (!empty($result['result'])) {
        // Результаты первого запроса (задачи)
        $task1Result = $result['result']['task1']['result'];

        // Выводим список задач с их ID
        echo "Список задач:\n";
        foreach ($task1Result as $task) {
            echo 'ID: ' . $task['ID'] . "\n";
        }
    } else {
        echo 'Ошибка выполнения batch-запроса: ' . $result['error_description'] . "\n";
    }

    echo 'time passed = ' . (microtime(true) - $start) . PHP_EOL;
}

function array_2_Table_ClipBoard_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

    $data = [
        ['id' => '1', 'group' => ['f']],
        ['id' => '6', 'group' => 'z']
    ];

    array_2_Table_ClipBoard($data);

    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
}

function tasksCreatedInYear_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

// Исходные данные
    $year = '1967';
    $tasks = [
        0 => [
            'id'          => '1',
            'title'       => 'Заполнить профиль',
            'createdDate' => '1967-09-15T23:43:29+03:00',
            'closedDate'  => '2018-04-28T12:19:02+03:00',
            'group'       => [],
        ],
        1 => [
            'id'          => '6',
            'title'       => 'Заполнить профиль',
            'createdDate' => '2018-03-04T22:36:47+03:00',
            'closedDate'  => '2018-04-26T10:35:35+03:00',
            'group'       => [],
        ],
    ];

// Вызываем функцию и сохраняем результат
    $result = tasksCreatedInYear($tasks, $year);

// Ожидаемый результат
    $expected = [
        0 => [
            'id'          => '1',
            'title'       => 'Заполнить профиль',
            'createdDate' => '1967-09-15T23:43:29+03:00',
            'closedDate'  => '2018-04-28T12:19:02+03:00',
            'group'       => [],
        ],
    ];

// Сравниваем результат с ожидаемым результатом
    assert($result === $expected);

    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
}

function tasksClosedInYear_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

// Тестовые данные
    $year = '1998';
    $tasks = [
        0 => [
            'id'          => '1',
            'title'       => 'Заполнить профиль',
            'createdDate' => '2018-03-02T23:43:29+03:00',
            'closedDate'  => '1998-04-28T12:19:02+03:00',
            'group'       => [],
        ],
        1 => [
            'id'          => '6',
            'title'       => 'Заполнить профиль',
            'createdDate' => '2018-03-04T22:36:47+03:00',
            'closedDate'  => '2018-04-26T10:35:35+03:00',
            'group'       => [],
        ],
    ];

// Вызов функции и проверка результата
    $result = tasksClosedInYear($tasks, $year);
    $expected = [
        0 => [
            'id'          => '1',
            'title'       => 'Заполнить профиль',
            'createdDate' => '2018-03-02T23:43:29+03:00',
            'closedDate'  => '1998-04-28T12:19:02+03:00',
            'group'       => [],
        ],
    ];
    assert($expected == $result);

    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
}

function tasksClosedNotInYearsOthers_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

    // Задаем тестовые данные
    $tasks = [
        [
            'id'          => '1',
            'title'       => 'Заполнить профиль',
            'createdDate' => '2018-03-02T23:43:29+03:00',
            'closedDate'  => '',
            'group'       => [],
        ],
        [
            'id'          => '6',
            'title'       => 'Заполнить профиль',
            'createdDate' => '2018-03-04T22:36:47+03:00',
            'closedDate'  => '2018-04-26T10:35:35+03:00',
            'group'       => [],
        ],
    ];

    $year = '2018';

// Вызываем тестируемую функцию
    $result = tasksClosedNotInYearsOthers($tasks, $year);

// Проверяем результаты
// Ожидаемый результат
    $expectedResult = [
        [
            'id'          => '1',
            'title'       => 'Заполнить профиль',
            'createdDate' => '2018-03-02T23:43:29+03:00',
            'closedDate'  => '',
            'group'       => [],
        ],
    ];
// Проверка совпадения ожидаемого и полученного результата
    assert($result === $expectedResult);

    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
}

function tasksInWork_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

// Задаем тестовые данные
    $tasks = [
        [
            'id'          => '1',
            'title'       => 'Заполнить профиль',
            'createdDate' => '2018-03-02T23:43:29+03:00',
            'closedDate'  => '2018-04-28T12:19:02+03:00',
            'group'       => [],
        ],
        [
            'id'          => '6',
            'title'       => 'Заполнить профиль',
            'createdDate' => '2018-03-04T22:36:47+03:00',
            'closedDate'  => '2018-04-26T10:35:35+03:00',
            'group'       => [],
        ],
    ];

// Вызываем тестируемую функцию
    $result = tasksInWork($tasks);

// Проверяем результаты
// Ожидаемый результат
    $expectedResult = [
        [
            'id'          => '1',
            'title'       => 'Заполнить профиль',
            'createdDate' => '2018-03-02T23:43:29+03:00',
            'closedDate'  => '2018-04-28T12:19:02+03:00',
            'group'       => [],
        ],
        [
            'id'          => '6',
            'title'       => 'Заполнить профиль',
            'createdDate' => '2018-03-04T22:36:47+03:00',
            'closedDate'  => '2018-04-26T10:35:35+03:00',
            'group'       => [],
        ],
    ];
// Проверка совпадения ожидаемого и полученного результата
    if ($result == $expectedResult) {
        echo 'Тест пройден успешно!';
    } else {
        echo 'Тест не пройден. Ожидаемый результат: ' . print_r($expectedResult,
                                                                true) . '. Полученный результат: ' . print_r($result,
                                                                                                             true);
    }

    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
}

function exec_Async_Test()
{
    exec_Async('01lib_Php_Test');
}

function user_Department_ID_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

    $result = user_Department_ID('853');
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
    assert($result === '339');
}

function user_Departments_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $user_ID = '853';

    $result = user_Departments($user_ID);
    assert($result === 'Отдел развития и цифровизации');
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
}

function legal_Face_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $user_ID = '853';

    $result = legal_Face($user_ID);
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
    assert($result === 'ООО "Зелинский групп"');
}

jet_list_crm_product_list();
//legal_Face_Test();
//user_Departments_Test();
//user_Department_ID_Test();
//user_Departments_Test();
//exec_Async_Test();
//tasksInWork_Test();
//tasksClosedNotInYearsOthers_Test();
//tasksClosedInYear_Test();
//array_2_Table_ClipBoard_Test();
//batch_Tasks_Test();
//jet_List_Tasks_Test();
//batch_Fast_Gomzin_Test();
// tasks_task_get_Test();
// company_Fields_Test();
// company_Userfield_List_Test();
// crm_lead_fields_Test();
// user_get_Test();
//array_2_File_CSV_Test();
//array_2_file(company_Fields(WEB_HOOK,0), 'company_Fields.txt');
//array_2_file(company_Get(WEB_HOOK, 13519, 0), 'company_Get_13519.txt');
//array_Add_Value_by_Key_Test();
//array_Value_by_Id_Test();
//b24_Field_Key_2_Name_Test();
//b24_Field_Name_2_Key_Test();
// b24_Products_2_Array2D_Test();
//b24request_Test();
//batchRequest_Dispenser_Array_Test();
//batch_String_Mult_at_Once_Test();
//batchs_Speed();
//big_Data_Test();
//catalog_productImage_list_Test();
//catalog_product_get_Test();
//catalog_product_list_Test();
//company_Get_Test();
//company_UserField_Title_by_listLabel_Test();
//crm_invoice_get_Test();
//file_CSV_2_Array_Test();
//float_Left_Less_Right_Test();
//jet_Data_Test();
//jet_list_Test();
//productSection_List_Test();
//product_Fields_Test();
//product_Propertys_Tests();
//product_property_fields_Test();
//product_xml_id_Dupl_Update_Test();
//products_Images_Count_Add_Test();
//products_userFields_Title_by_listLabel_Test();
//russian_2_Latin_Transliterate_Test();
//section_ID_Replace_Test();
//section_ID_X_ForEach_Test();
//section_ID_X_Test();
//sections_Shift_Test();
//string_Random_Test();
//uf_ID_by_Name_Test();
//url_Encode_Test();
//userField_IDs_Test();

<?php

declare(strict_types=1);

// адаптировал код из
// https://pocketadmin.tech/ru/%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-4-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B5%D0%B9-api-google-%D1%82%D0%B0%D0%B1%D0%BB%D0%B8%D1%86%D1%8B-%D0%BD%D0%B0-php/
// код размещён на
// https://restzg.ru/phpb24/googleSheetsAPI/
// адрес почты для прудоставления доступа
// service-account-01@popov-php-bitrix24-zg-20220603.iam.gserviceaccount.com

// Connect the Google Sheets API client
use Google\Service\Sheets\ClearValuesResponse;
use Google\Service\Sheets\UpdateValuesResponse;
use Google\Service\Sheets\ValueRange;

require_once __DIR__ . '/vendor/autoload.php';
require_once __DIR__ . '/Google.php';
require_once __DIR__ . '/lib_Php.php';

$File_Credentials = __DIR__ . '/popov-php-bitrix24-zg-20220603-a1df757bd724.json';
$googleSheet_Range_Address = 'список';                                       // весь диапазон листа
$googleSheet_Spread_ID = '18B7ifEIqg0GHyET5AX-RM0ZVv1Sm9phJWJNRbNaH0SM'; // Контакты с выставки

function bitrix24_Leads_from_Array($object)
{ // создать лиды из массива
    $values = $object->getValues();
    if (empty($values)) {
        print 'No data found.n';
    } else {
        print 'A, B:n';
        foreach ($values as $row) {
            // Print columns A and B, which correspond to indices 0 and 1.
            printf('%s, %s<br>',
                   $row[0],
                   $row[1]);
        }
    }
}

/** диапазон гугтаблицы в ValueRange
 * чтобы получить массив, добавь к вызову ['values']
 */
function googleSheet_Range_2_Array(string $googleSheet_Range_Address,
                                   string $googleSheet_spreadSheets_ID,
                                   string $file_Credentials): ValueRange
{
    $google = new Google($file_Credentials,
                         $googleSheet_spreadSheets_ID);
    $googleService = $google->service_Sheets();
    return $googleService->spreadsheets_values->get($googleSheet_spreadSheets_ID,
                                                    $googleSheet_Range_Address);
}

/**
 * диапазон гугл таблицы очистить
 */
function googleSheet_Range_Clear(string $range_Address,
                                 string $spreadSheet_ID,
                                 string $file_Credentials): ClearValuesResponse
{
    $google = new Google($file_Credentials,
                         $spreadSheet_ID);
    $googleService = $google->service_Sheets();
    $requestBody = new Google_Service_Sheets_ClearValuesRequest();

    return $googleService->spreadsheets_values->clear($spreadSheet_ID,
                                                      $range_Address,
                                                      $requestBody);
}

/** массив в гуглтаблицу */
function array_2_Google_Sheet(array  $array,
                              string $googleSheet_Range_Address,
                              string $googleSheet_spreadSheets_ID,
                              string $file_Credentials,
                              array  $arr_Options = ['valueInputOption' => 'RAW']): UpdateValuesResponse
{
    $google = new Google($file_Credentials,
                         $googleSheet_spreadSheets_ID);

    $googleService = $google->service_Sheets();
    $body = new Google_Service_Sheets_ValueRange(['values' => $array]);

    return $googleService->spreadsheets_values->update($googleSheet_spreadSheets_ID,
                                                       $googleSheet_Range_Address,
                                                       $body,
                                                       $arr_Options);
}

/**
 * получить имя листа по его id
 */
function sheetName_by_ID(string $spreadSheets_ID,
                         string $sheet_ID,
                         string $file_Credentials): string
{
    $google = new Google($file_Credentials,
                         $spreadSheets_ID);

    $googleService = $google->service_Sheets();
    $response = $googleService->spreadsheets->get($spreadSheets_ID);
    $sheets = $response->getSheets();
    $sheetName = '';
    foreach ($sheets as $sheet) {
        if ($sheet['properties']['sheetId'] == $sheet_ID) {
            $sheetName = $sheet['properties']['title'];
            break;
        }
    }
    return $sheetName;
}

/**
 * Преобразовать массив Php в массив для вставки в диапазон гугл таблицы
 */
function array_Php_2_Array_Sheet(array $arr_Php): array
{
    $max = count($arr_Php);

    $arr_Sheet = [];

    for ($row = 0; $row < $max; $row++) {
        if(!isset($arr_Php[$row])){
            $stop = true;
        }
        foreach ($arr_Php[$row] as $key => $elem) {
            if (is_array($elem)) {
                $arr_Sheet[$row][] = implode_If(';',
                                             $elem);
            } else {
                $arr_Sheet[$row][] = null_2($arr_Php[$row][$key]);
            }
        }
    }
    return $arr_Sheet;
}

function array_Php_2_Array_Sheet_Order(array $arr_Php,
                                       array $arr_Fields): array
{
    $arr_Sheet = [];

    foreach ($arr_Fields as $elem) {
        $value = $arr_Php[$elem];
        $arr_Sheet = array_merge($arr_Sheet,
                                 [$elem => $value]);
    }
    return $arr_Sheet;
}

/** если null, то заменить на, иначе без изменений  */
function null_2($value,
                $replace = '')
{
    return ($value == null) ? $replace : $value;
}

/** добавить в низ гугл таблицы массив
 * @noinspection PhpInconsistentReturnPointsInspection
 */
function array_Add_2_GS(string $gs_Id,
                        string $gs_Name,
                        string $file_Credential,
                        array  $arr,
                        string $column = 'A'): UpdateValuesResponse
{
    if (count($arr) > 0) {
        $arr_Gs = googleSheet_Range_2_Array($gs_Name, $gs_Id, $file_Credential);
        $row = count($arr_Gs) + 1;
        $rng = $gs_Name . '!' . $column . $row; // типа Лист!A2
        $UpdateValuesResponse = array_2_Google_Sheet($arr, $rng, $gs_Id, $file_Credential);
        log_2_File(__FUNCTION__ . json_encode($UpdateValuesResponse));
        // log_2_File(__FUNCTION__ , implode($arr));
        return $UpdateValuesResponse;
    } else {
        log_2_File(__FUNCTION__ . '; ! count($arr) > 0');
    }
}

/**
 * номер столбца таблицы в буквы
 * @return string 'A'
 * @param int $number 1
 */
function column_Number_2_Letter(int $number): string
{
    $numLetters = '';
    while ($number > 0) {
        $modulo = ($number - 1) % 26;
        $numLetters = chr(65 + $modulo) . $numLetters;
        $number = intval(($number - $modulo) / 26);
    }
    return $numLetters;
}

/**
 * Проверяю массив на подходящесть вставки в гуглтаблицу
 */
function array_2_GoogleSheet_Valid($array)
{
    // Массив для хранения ошибок
    $errors = [];

    // Проверка, является ли массив пустым
    if (empty($array)) {
        $errors[] = 'Массив пустой';
        return $errors;
    }

    // Проверка, являются ли все элементы массива массивами
    foreach ($array as $row_index => $row) {
        if (!is_array($row)) {
            $errors[] = "Элемент с индексом {$row_index} не является массивом";
        }
    }

    // Проверка, имеют ли все строки одинаковое количество элементов
    $row_length = count($array[0]);
    foreach ($array as $row_index => $row) {
        if (count($row) != $row_length) {
            $errors[] = "Строка с индексом {$row_index} имеет неправильное количество элементов";
        }
    }

    return empty($errors) ? true : $errors;
}
<?php
declare(strict_types=1);

$File_Credentials = __DIR__ . '/popov-php-bitrix24-zg-20220603-a1df757bd724.json';
const NOMENKLATURA_SVODNAYA = '19SvdLfCv-OM9yBSG5ojbDc3UdZA-VqGH1ULtqZgB1AY';

require_once __DIR__ . '/google_Sheets.php';
require_once __DIR__ . '/lib_Bitrix24.php';
function array_2_Google_Sheet_Test() {
    $arr_2_Sheet                 = [];
    $googleSheet_Range_Address   = '';
    $googleSheet_spreadSheets_ID = '';
    $file_Credentials            = '';
    array_2_Google_Sheet($arr_2_Sheet,
                         $googleSheet_Range_Address,
                         $googleSheet_spreadSheets_ID,
                         $file_Credentials);
}

function googleSheet_Range_2_Array_Test() {

    global $File_Credentials;
    $range_Address = 'сводная таблица';

    $arr = googleSheet_Range_2_Array($range_Address,
                                     NOMENKLATURA_SVODNAYA,
                                     $File_Credentials)['values'];// [0];
    assert(is_array($arr));
}

function array_Add_2_GS_Test() {
    $gs_Id   = '1DBXDXoZvfOYl5h-ufEjKHiOgBzjfTFY9U_xvNfl9MyY'; // Тесты эксперименты ЗГ
    $gs_Name = 'Лист1';
    global $File_Credentials;
    $arr = [[1, 2, __FUNCTION__],];

    require_once __DIR__ . '/lib_Bitrix24.php';
    $json = array_Add_2_GS($gs_Id, $gs_Name, $File_Credentials, $arr);
    assert($json->updatedRows == count($arr));
}

function sheetName_by_ID_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);
    $spreadSheets_ID = '1wvikLCK5MNYmHbLv3ZU4EmDZK05I15IsmAxPTyjkknQ';
    $sheet_ID = '557558822';
    $file_Credentials = __DIR__ . '/popov-php-bitrix24-zg-20220603-a1df757bd724.json';

    $result = sheetName_by_ID($spreadSheets_ID, $sheet_ID, $file_Credentials);
    assert($result == 'Сводная Проекты задачи');

    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;
}

function array_Php_2_Array_Sheet_Test()
{
    $arr_Php = [
        ['A', 'B', 'C'],
        ['D', ['E1', 'E2'], 'F'],
        ['G', null, 'H']
    ];

    $expectedResult = [
        ['A', 'B', 'C'],
        ['D', 'E1;E2', 'F'],
        ['G', '', 'H']
    ];

    $result = array_Php_2_Array_Sheet($arr_Php);

    assert($expectedResult === $result);
}

function array_2_GoogleSheet_Valid_Test()
{
    echo __FUNCTION__ . PHP_EOL;
    $start = microtime(true);

    $file = __DIR__ . '/В гуглтаблицу2023-04-27 18-53-13.txt';
    $array = file_JSON_2_Array($file);

    $result = array_2_GoogleSheet_Valid($array);
    assert(empty($result));
    echo 'time passed = ' . number_format(microtime(true) - $start, 6, '.', ' ') . PHP_EOL;

}

array_2_GoogleSheet_Valid_Test();

//array_Php_2_Array_Sheet_Test();
//sheetName_by_ID_Test();
// array_2_Google_Sheet_Test();
// googleSheet_Range_2_Array_Test();
//array_Add_2_GS_Test();
<?php
declare(strict_types=1);

// Вызов https://restzg.ru/phpb24/Bitrix24-entity-operations/aTasks_ALL_2_GoogleSheet.php

require_once __DIR__ . '/aTasks_2_GoogleSheet_Methods.php';

b24_Tasks_2_Google_Sheet_RUN('Задачи ВСЕ!',
                             'A2:Z',
                             '1BRiTRRyd9f0KFxT3VhVgsSZnR8zkkQ8OeNz8cAnG8VY',
                             []);
<?php
declare(strict_types=1);

$File_Name   = __DIR__ . '/webHookURL.txt';
$WEB_HOOK = file_get_contents($File_Name);

require_once __DIR__ . '/vendor/autoload.php';
require_once __DIR__ . '/lib_Bitrix24.php';

use App\Bitrix24\Bitrix24API;

$BX24 = new Bitrix24API($WEB_HOOK);

